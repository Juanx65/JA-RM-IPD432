-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eucHW_eucHW_Pipeline_VITIS_LOOP_34_26 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_array_7_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_6_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_5_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_4_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_3_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_2_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_1_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_0_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_14_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_13_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_12_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_11_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_10_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_9_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_8_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_15_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_array_7_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_array_7_12_out_ap_vld : OUT STD_LOGIC;
    out_array_6_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_array_6_12_out_ap_vld : OUT STD_LOGIC;
    out_array_5_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_array_5_12_out_ap_vld : OUT STD_LOGIC;
    out_array_4_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_array_4_12_out_ap_vld : OUT STD_LOGIC;
    out_array_3_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_array_3_12_out_ap_vld : OUT STD_LOGIC;
    out_array_2_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_array_2_12_out_ap_vld : OUT STD_LOGIC;
    out_array_1_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_array_1_12_out_ap_vld : OUT STD_LOGIC;
    out_array_0_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_array_0_12_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of eucHW_eucHW_Pipeline_VITIS_LOOP_34_26 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln34_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_92 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_334_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_array_1_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_array_1_18_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln38_fu_364_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_array_1_10_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_array_1_11_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_array_1_12_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_array_1_13_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_array_1_14_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_array_1_15_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_array_1_16_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln39_8_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_7_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_6_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_5_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_4_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_3_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_3_fu_444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln39_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_2_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_4_fu_456_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_5_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln39_3_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_6_fu_474_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_7_fu_488_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tem2_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tem1_fu_368_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_356 : BOOLEAN;
    signal ap_condition_359 : BOOLEAN;
    signal ap_condition_362 : BOOLEAN;
    signal ap_condition_365 : BOOLEAN;
    signal ap_condition_368 : BOOLEAN;
    signal ap_condition_371 : BOOLEAN;
    signal ap_condition_374 : BOOLEAN;
    signal ap_condition_377 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component eucHW_mux_83_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component eucHW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_83_32_1_1_U3035 : component eucHW_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => out_array_1_fu_96,
        din1 => out_array_1_10_fu_100,
        din2 => out_array_1_11_fu_104,
        din3 => out_array_1_12_fu_108,
        din4 => out_array_1_13_fu_112,
        din5 => out_array_1_14_fu_116,
        din6 => out_array_1_15_fu_120,
        din7 => out_array_1_16_fu_124,
        din8 => trunc_ln38_fu_364_p1,
        dout => tem1_fu_368_p10);

    flow_control_loop_pipe_sequential_init_U : component eucHW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv4_0;
                elsif (((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_92 <= add_ln34_fu_334_p2;
                end if;
            end if; 
        end if;
    end process;

    out_array_1_10_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_array_1_10_fu_100 <= out_array_1_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_356)) then 
                    out_array_1_10_fu_100 <= out_array_1_18_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;

    out_array_1_11_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_array_1_11_fu_104 <= out_array_2_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_359)) then 
                    out_array_1_11_fu_104 <= out_array_1_18_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;

    out_array_1_12_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_array_1_12_fu_108 <= out_array_3_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_362)) then 
                    out_array_1_12_fu_108 <= out_array_1_18_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;

    out_array_1_13_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_array_1_13_fu_112 <= out_array_4_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_365)) then 
                    out_array_1_13_fu_112 <= out_array_1_18_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;

    out_array_1_14_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_array_1_14_fu_116 <= out_array_5_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_368)) then 
                    out_array_1_14_fu_116 <= out_array_1_18_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;

    out_array_1_15_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_array_1_15_fu_120 <= out_array_6_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_371)) then 
                    out_array_1_15_fu_120 <= out_array_1_18_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;

    out_array_1_16_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_array_1_16_fu_124 <= out_array_7_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_374)) then 
                    out_array_1_16_fu_124 <= out_array_1_18_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;

    out_array_1_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    out_array_1_fu_96 <= out_array_0_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_377)) then 
                    out_array_1_fu_96 <= out_array_1_18_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln34_fu_334_p2 <= std_logic_vector(unsigned(i_fu_92) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_356_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_fu_328_p2, trunc_ln38_fu_364_p1)
    begin
                ap_condition_356 <= ((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln38_fu_364_p1 = ap_const_lv3_1));
    end process;


    ap_condition_359_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_fu_328_p2, trunc_ln38_fu_364_p1)
    begin
                ap_condition_359 <= ((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln38_fu_364_p1 = ap_const_lv3_2));
    end process;


    ap_condition_362_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_fu_328_p2, trunc_ln38_fu_364_p1)
    begin
                ap_condition_362 <= ((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln38_fu_364_p1 = ap_const_lv3_3));
    end process;


    ap_condition_365_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_fu_328_p2, trunc_ln38_fu_364_p1)
    begin
                ap_condition_365 <= ((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln38_fu_364_p1 = ap_const_lv3_4));
    end process;


    ap_condition_368_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_fu_328_p2, trunc_ln38_fu_364_p1)
    begin
                ap_condition_368 <= ((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln38_fu_364_p1 = ap_const_lv3_5));
    end process;


    ap_condition_371_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_fu_328_p2, trunc_ln38_fu_364_p1)
    begin
                ap_condition_371 <= ((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln38_fu_364_p1 = ap_const_lv3_6));
    end process;


    ap_condition_374_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_fu_328_p2, trunc_ln38_fu_364_p1)
    begin
                ap_condition_374 <= ((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln38_fu_364_p1 = ap_const_lv3_7));
    end process;


    ap_condition_377_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln34_fu_328_p2, trunc_ln38_fu_364_p1)
    begin
                ap_condition_377 <= ((icmp_ln34_fu_328_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln38_fu_364_p1 = ap_const_lv3_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln34_fu_328_p2)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln34_fu_328_p2 <= "1" when (i_fu_92 = ap_const_lv4_8) else "0";
    icmp_ln39_3_fu_396_p2 <= "1" when (trunc_ln38_fu_364_p1 = ap_const_lv3_1) else "0";
    icmp_ln39_4_fu_402_p2 <= "1" when (trunc_ln38_fu_364_p1 = ap_const_lv3_2) else "0";
    icmp_ln39_5_fu_408_p2 <= "1" when (trunc_ln38_fu_364_p1 = ap_const_lv3_3) else "0";
    icmp_ln39_6_fu_414_p2 <= "1" when (trunc_ln38_fu_364_p1 = ap_const_lv3_4) else "0";
    icmp_ln39_7_fu_420_p2 <= "1" when (trunc_ln38_fu_364_p1 = ap_const_lv3_5) else "0";
    icmp_ln39_8_fu_426_p2 <= "1" when (trunc_ln38_fu_364_p1 = ap_const_lv3_6) else "0";
    icmp_ln39_fu_390_p2 <= "1" when (trunc_ln38_fu_364_p1 = ap_const_lv3_0) else "0";
    or_ln39_1_fu_450_p2 <= (icmp_ln39_6_fu_414_p2 or icmp_ln39_5_fu_408_p2);
    or_ln39_2_fu_462_p2 <= (icmp_ln39_4_fu_402_p2 or icmp_ln39_3_fu_396_p2);
    or_ln39_3_fu_482_p2 <= (or_ln39_fu_438_p2 or or_ln39_1_fu_450_p2);
    or_ln39_fu_438_p2 <= (icmp_ln39_8_fu_426_p2 or icmp_ln39_7_fu_420_p2);
    out_array_0_12_out <= out_array_1_fu_96;

    out_array_0_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln34_fu_328_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_array_0_12_out_ap_vld <= ap_const_logic_1;
        else 
            out_array_0_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_array_1_12_out <= out_array_1_10_fu_100;

    out_array_1_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln34_fu_328_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_array_1_12_out_ap_vld <= ap_const_logic_1;
        else 
            out_array_1_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_array_1_18_fu_504_p2 <= std_logic_vector(unsigned(tem2_fu_496_p3) + unsigned(tem1_fu_368_p10));
    out_array_2_12_out <= out_array_1_11_fu_104;

    out_array_2_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln34_fu_328_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_array_2_12_out_ap_vld <= ap_const_logic_1;
        else 
            out_array_2_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_array_3_12_out <= out_array_1_12_fu_108;

    out_array_3_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln34_fu_328_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_array_3_12_out_ap_vld <= ap_const_logic_1;
        else 
            out_array_3_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_array_4_12_out <= out_array_1_13_fu_112;

    out_array_4_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln34_fu_328_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_array_4_12_out_ap_vld <= ap_const_logic_1;
        else 
            out_array_4_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_array_5_12_out <= out_array_1_14_fu_116;

    out_array_5_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln34_fu_328_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_array_5_12_out_ap_vld <= ap_const_logic_1;
        else 
            out_array_5_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_array_6_12_out <= out_array_1_15_fu_120;

    out_array_6_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln34_fu_328_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_array_6_12_out_ap_vld <= ap_const_logic_1;
        else 
            out_array_6_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_array_7_12_out <= out_array_1_16_fu_124;

    out_array_7_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln34_fu_328_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln34_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_array_7_12_out_ap_vld <= ap_const_logic_1;
        else 
            out_array_7_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln39_3_fu_444_p3 <= 
        out_array_12_10_reload when (icmp_ln39_6_fu_414_p2(0) = '1') else 
        out_array_11_10_reload;
    select_ln39_4_fu_456_p3 <= 
        out_array_10_10_reload when (icmp_ln39_4_fu_402_p2(0) = '1') else 
        out_array_9_10_reload;
    select_ln39_5_fu_468_p3 <= 
        out_array_8_10_reload when (icmp_ln39_fu_390_p2(0) = '1') else 
        out_array_15_10_reload;
    select_ln39_6_fu_474_p3 <= 
        select_ln39_fu_432_p3 when (or_ln39_fu_438_p2(0) = '1') else 
        select_ln39_3_fu_444_p3;
    select_ln39_7_fu_488_p3 <= 
        select_ln39_4_fu_456_p3 when (or_ln39_2_fu_462_p2(0) = '1') else 
        select_ln39_5_fu_468_p3;
    select_ln39_fu_432_p3 <= 
        out_array_14_10_reload when (icmp_ln39_8_fu_426_p2(0) = '1') else 
        out_array_13_10_reload;
    tem2_fu_496_p3 <= 
        select_ln39_6_fu_474_p3 when (or_ln39_3_fu_482_p2(0) = '1') else 
        select_ln39_7_fu_488_p3;
    trunc_ln38_fu_364_p1 <= i_fu_92(3 - 1 downto 0);
end behav;
