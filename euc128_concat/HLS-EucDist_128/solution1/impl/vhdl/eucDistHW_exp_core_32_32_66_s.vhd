-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eucDistHW_exp_core_32_32_66_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (40 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of eucDistHW_exp_core_32_32_66_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv67_17217F7D1CF79ABC0 : STD_LOGIC_VECTOR (66 downto 0) := "0010111001000010111111101111101000111001111011110011010101111000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv65_80000000 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000";
    constant ap_const_lv63_80000000 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal f_x_msb_4_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_4_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_5_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_5_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_5_table_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (67 downto 0);
    signal tmp_fu_237_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_746_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_746_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_103_reg_752 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter12_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter13_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter14_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_103_reg_752_pp0_iter15_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_757_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_763_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_fu_313_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_reg_770 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_323_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_775 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_775_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln666_fu_332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln666_reg_787_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1647_1_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_1_reg_793_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_msb_4_V_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_4_V_reg_798_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_4_V_reg_798_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_4_V_reg_798_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_5_V_reg_829 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_reg_834 : STD_LOGIC_VECTOR (5 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m4_V_fu_413_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m4_V_reg_839 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_V_fu_429_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_V_reg_849 : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter6_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter7_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter8_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter9_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter10_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal f_x_msb_3_V_reg_855 : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_V_reg_855_pp0_iter6_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_V_reg_855_pp0_iter7_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_V_reg_855_pp0_iter8_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_V_reg_855_pp0_iter9_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_3_V_reg_855_pp0_iter10_reg : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_34_reg_860 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_50_reg_875 : STD_LOGIC_VECTOR (43 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_V_fu_524_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_V_reg_885 : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter12_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter13_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter14_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter15_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter16_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal ret_V_fu_547_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_891 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_891_pp0_iter12_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_891_pp0_iter13_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_891_pp0_iter14_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_891_pp0_iter15_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_891_pp0_iter16_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln594_2_fu_553_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln594_2_reg_897 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln594_2_reg_897_pp0_iter12_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln594_2_reg_897_pp0_iter13_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln594_2_reg_897_pp0_iter14_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln594_2_reg_897_pp0_iter15_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln594_2_reg_897_pp0_iter16_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln4_reg_913 : STD_LOGIC_VECTOR (61 downto 0);
    signal exp_x_msb_2_3_4_5_lsb_m_1_V_fu_625_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal exp_x_msb_2_3_4_5_lsb_m_1_V_reg_923 : STD_LOGIC_VECTOR (71 downto 0);
    signal exp_x_msb_1_V_reg_928 : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_928_pp0_iter18_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_928_pp0_iter19_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_928_pp0_iter20_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_928_pp0_iter21_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_928_pp0_iter22_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal y_lo_s_V_reg_944 : STD_LOGIC_VECTOR (67 downto 0);
    signal y_V_1_fu_680_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_1_reg_949 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln666_1_fu_687_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln666_1_reg_954 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln527_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln527_2_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln527_3_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln527_4_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln527_5_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln594_fu_225_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_45_fu_245_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_215_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_102_fu_229_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal icmp_ln1505_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1503_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1501_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1647_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1647_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_msb_5_lsb_V_fu_348_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_372_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln294_fu_388_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln666_fu_391_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln3_fu_400_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_739_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_4_5_lsb_m_1_m3_V_1_fu_394_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln3_fu_400_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln666_7_fu_409_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln294_1_fu_423_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln666_8_fu_426_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal exp_x_msb_3_m_1_s_V_fu_453_p4 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_s_fu_445_p4 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_469_p0 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_469_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (100 downto 0);
    signal p_Result_104_fu_489_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_35_fu_504_p5 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln666_10_fu_500_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln666_9_fu_497_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln666_fu_518_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln666_11_fu_514_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_105_fu_530_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln666_13_fu_544_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln666_12_fu_540_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_106_fu_557_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal grp_fu_570_p0 : STD_LOGIC_VECTOR (66 downto 0);
    signal grp_fu_570_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_570_p2 : STD_LOGIC_VECTOR (129 downto 0);
    signal p_Result_103_fu_576_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_14_fu_600_p4 : STD_LOGIC_VECTOR (70 downto 0);
    signal zext_ln666_14_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1199_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln666_11_fu_615_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln666_15_fu_621_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal zext_ln1199_5_fu_608_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_637_p0 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (139 downto 0);
    signal xor_ln1632_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_l_V_fu_666_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal select_ln594_fu_658_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_fu_670_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1632_fu_691_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal p_Val2_45_fu_694_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_51_fu_705_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln58_fu_700_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal overf_1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_721_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_739_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_739_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to23 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_372_p00 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_372_p10 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_469_p00 : STD_LOGIC_VECTOR (100 downto 0);
    signal grp_fu_469_p10 : STD_LOGIC_VECTOR (100 downto 0);
    signal grp_fu_570_p00 : STD_LOGIC_VECTOR (129 downto 0);
    signal grp_fu_570_p10 : STD_LOGIC_VECTOR (129 downto 0);
    signal grp_fu_637_p00 : STD_LOGIC_VECTOR (139 downto 0);
    signal grp_fu_637_p10 : STD_LOGIC_VECTOR (139 downto 0);
    signal grp_fu_739_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_739_p10 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component eucDistHW_mul_32ns_8ns_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component eucDistHW_mul_51ns_50ns_101_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (50 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (100 downto 0) );
    end component;


    component eucDistHW_mul_67ns_63ns_130_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (66 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (129 downto 0) );
    end component;


    component eucDistHW_mul_72ns_68ns_140_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (71 downto 0);
        din1 : IN STD_LOGIC_VECTOR (67 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (139 downto 0) );
    end component;


    component eucDistHW_mul_mul_25ns_8ns_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component eucDistHW_exp_core_32_32_66_s_f_x_msb_4_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component eucDistHW_exp_core_32_32_66_s_f_x_msb_5_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component eucDistHW_exp_core_32_32_66_s_f_x_msb_3_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component eucDistHW_exp_core_32_32_66_s_f_x_msb_2_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component eucDistHW_exp_core_32_32_66_s_exp_x_msb_1_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (67 downto 0) );
    end component;



begin
    f_x_msb_4_table_V_U : component eucDistHW_exp_core_32_32_66_s_f_x_msb_4_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_table_V_address0,
        ce0 => f_x_msb_4_table_V_ce0,
        q0 => f_x_msb_4_table_V_q0);

    f_x_msb_5_table_V_U : component eucDistHW_exp_core_32_32_66_s_f_x_msb_5_table_V
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_5_table_V_address0,
        ce0 => f_x_msb_5_table_V_ce0,
        q0 => f_x_msb_5_table_V_q0);

    f_x_msb_3_table_V_U : component eucDistHW_exp_core_32_32_66_s_f_x_msb_3_table_V
    generic map (
        DataWidth => 51,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component eucDistHW_exp_core_32_32_66_s_f_x_msb_2_table_V
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component eucDistHW_exp_core_32_32_66_s_exp_x_msb_1_table_V
    generic map (
        DataWidth => 68,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    mul_32ns_8ns_40_2_1_U25 : component eucDistHW_mul_32ns_8ns_40_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_372_p0,
        din1 => grp_fu_372_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p2);

    mul_51ns_50ns_101_5_1_U26 : component eucDistHW_mul_51ns_50ns_101_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 51,
        din1_WIDTH => 50,
        dout_WIDTH => 101)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_469_p0,
        din1 => grp_fu_469_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p2);

    mul_67ns_63ns_130_5_1_U27 : component eucDistHW_mul_67ns_63ns_130_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 67,
        din1_WIDTH => 63,
        dout_WIDTH => 130)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_570_p0,
        din1 => grp_fu_570_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_570_p2);

    mul_72ns_68ns_140_5_1_U28 : component eucDistHW_mul_72ns_68ns_140_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 72,
        din1_WIDTH => 68,
        dout_WIDTH => 140)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_637_p0,
        din1 => grp_fu_637_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);

    mul_mul_25ns_8ns_33_4_1_U29 : component eucDistHW_mul_mul_25ns_8ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_739_p0,
        din1 => grp_fu_739_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_739_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1647_1_reg_793_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_x_msb_1_V_reg_928 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_2_3_4_5_lsb_m_1_V_reg_923 <= exp_x_msb_2_3_4_5_lsb_m_1_V_fu_625_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_1_V_reg_928_pp0_iter18_reg <= exp_x_msb_1_V_reg_928;
                exp_x_msb_1_V_reg_928_pp0_iter19_reg <= exp_x_msb_1_V_reg_928_pp0_iter18_reg;
                exp_x_msb_1_V_reg_928_pp0_iter20_reg <= exp_x_msb_1_V_reg_928_pp0_iter19_reg;
                exp_x_msb_1_V_reg_928_pp0_iter21_reg <= exp_x_msb_1_V_reg_928_pp0_iter20_reg;
                exp_x_msb_1_V_reg_928_pp0_iter22_reg <= exp_x_msb_1_V_reg_928_pp0_iter21_reg;
                exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter12_reg <= exp_x_msb_3_4_5_lsb_m_1_V_reg_885;
                exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter13_reg <= exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter12_reg;
                exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter14_reg <= exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter13_reg;
                exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter15_reg <= exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter14_reg;
                exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter16_reg <= exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter15_reg;
                exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter10_reg <= exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter9_reg;
                exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter6_reg <= exp_x_msb_4_5_lsb_m_1_m5_V_reg_849;
                exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter7_reg <= exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter6_reg;
                exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter8_reg <= exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter7_reg;
                exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter9_reg <= exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter8_reg;
                f_x_msb_3_V_reg_855_pp0_iter10_reg <= f_x_msb_3_V_reg_855_pp0_iter9_reg;
                f_x_msb_3_V_reg_855_pp0_iter6_reg <= f_x_msb_3_V_reg_855;
                f_x_msb_3_V_reg_855_pp0_iter7_reg <= f_x_msb_3_V_reg_855_pp0_iter6_reg;
                f_x_msb_3_V_reg_855_pp0_iter8_reg <= f_x_msb_3_V_reg_855_pp0_iter7_reg;
                f_x_msb_3_V_reg_855_pp0_iter9_reg <= f_x_msb_3_V_reg_855_pp0_iter8_reg;
                f_x_msb_4_V_reg_798_pp0_iter2_reg <= f_x_msb_4_V_reg_798;
                f_x_msb_4_V_reg_798_pp0_iter3_reg <= f_x_msb_4_V_reg_798_pp0_iter2_reg;
                f_x_msb_4_V_reg_798_pp0_iter4_reg <= f_x_msb_4_V_reg_798_pp0_iter3_reg;
                or_ln1647_1_reg_793_pp0_iter10_reg <= or_ln1647_1_reg_793_pp0_iter9_reg;
                or_ln1647_1_reg_793_pp0_iter11_reg <= or_ln1647_1_reg_793_pp0_iter10_reg;
                or_ln1647_1_reg_793_pp0_iter12_reg <= or_ln1647_1_reg_793_pp0_iter11_reg;
                or_ln1647_1_reg_793_pp0_iter13_reg <= or_ln1647_1_reg_793_pp0_iter12_reg;
                or_ln1647_1_reg_793_pp0_iter14_reg <= or_ln1647_1_reg_793_pp0_iter13_reg;
                or_ln1647_1_reg_793_pp0_iter15_reg <= or_ln1647_1_reg_793_pp0_iter14_reg;
                or_ln1647_1_reg_793_pp0_iter16_reg <= or_ln1647_1_reg_793_pp0_iter15_reg;
                or_ln1647_1_reg_793_pp0_iter17_reg <= or_ln1647_1_reg_793_pp0_iter16_reg;
                or_ln1647_1_reg_793_pp0_iter18_reg <= or_ln1647_1_reg_793_pp0_iter17_reg;
                or_ln1647_1_reg_793_pp0_iter19_reg <= or_ln1647_1_reg_793_pp0_iter18_reg;
                or_ln1647_1_reg_793_pp0_iter20_reg <= or_ln1647_1_reg_793_pp0_iter19_reg;
                or_ln1647_1_reg_793_pp0_iter21_reg <= or_ln1647_1_reg_793_pp0_iter20_reg;
                or_ln1647_1_reg_793_pp0_iter22_reg <= or_ln1647_1_reg_793_pp0_iter21_reg;
                or_ln1647_1_reg_793_pp0_iter2_reg <= or_ln1647_1_reg_793_pp0_iter1_reg;
                or_ln1647_1_reg_793_pp0_iter3_reg <= or_ln1647_1_reg_793_pp0_iter2_reg;
                or_ln1647_1_reg_793_pp0_iter4_reg <= or_ln1647_1_reg_793_pp0_iter3_reg;
                or_ln1647_1_reg_793_pp0_iter5_reg <= or_ln1647_1_reg_793_pp0_iter4_reg;
                or_ln1647_1_reg_793_pp0_iter6_reg <= or_ln1647_1_reg_793_pp0_iter5_reg;
                or_ln1647_1_reg_793_pp0_iter7_reg <= or_ln1647_1_reg_793_pp0_iter6_reg;
                or_ln1647_1_reg_793_pp0_iter8_reg <= or_ln1647_1_reg_793_pp0_iter7_reg;
                or_ln1647_1_reg_793_pp0_iter9_reg <= or_ln1647_1_reg_793_pp0_iter8_reg;
                p_Result_s_103_reg_752_pp0_iter10_reg <= p_Result_s_103_reg_752_pp0_iter9_reg;
                p_Result_s_103_reg_752_pp0_iter11_reg <= p_Result_s_103_reg_752_pp0_iter10_reg;
                p_Result_s_103_reg_752_pp0_iter12_reg <= p_Result_s_103_reg_752_pp0_iter11_reg;
                p_Result_s_103_reg_752_pp0_iter13_reg <= p_Result_s_103_reg_752_pp0_iter12_reg;
                p_Result_s_103_reg_752_pp0_iter14_reg <= p_Result_s_103_reg_752_pp0_iter13_reg;
                p_Result_s_103_reg_752_pp0_iter15_reg <= p_Result_s_103_reg_752_pp0_iter14_reg;
                p_Result_s_103_reg_752_pp0_iter2_reg <= p_Result_s_103_reg_752_pp0_iter1_reg;
                p_Result_s_103_reg_752_pp0_iter3_reg <= p_Result_s_103_reg_752_pp0_iter2_reg;
                p_Result_s_103_reg_752_pp0_iter4_reg <= p_Result_s_103_reg_752_pp0_iter3_reg;
                p_Result_s_103_reg_752_pp0_iter5_reg <= p_Result_s_103_reg_752_pp0_iter4_reg;
                p_Result_s_103_reg_752_pp0_iter6_reg <= p_Result_s_103_reg_752_pp0_iter5_reg;
                p_Result_s_103_reg_752_pp0_iter7_reg <= p_Result_s_103_reg_752_pp0_iter6_reg;
                p_Result_s_103_reg_752_pp0_iter8_reg <= p_Result_s_103_reg_752_pp0_iter7_reg;
                p_Result_s_103_reg_752_pp0_iter9_reg <= p_Result_s_103_reg_752_pp0_iter8_reg;
                ret_V_reg_891_pp0_iter12_reg <= ret_V_reg_891;
                ret_V_reg_891_pp0_iter13_reg <= ret_V_reg_891_pp0_iter12_reg;
                ret_V_reg_891_pp0_iter14_reg <= ret_V_reg_891_pp0_iter13_reg;
                ret_V_reg_891_pp0_iter15_reg <= ret_V_reg_891_pp0_iter14_reg;
                ret_V_reg_891_pp0_iter16_reg <= ret_V_reg_891_pp0_iter15_reg;
                tmp_52_reg_757_pp0_iter10_reg <= tmp_52_reg_757_pp0_iter9_reg;
                tmp_52_reg_757_pp0_iter2_reg <= tmp_52_reg_757_pp0_iter1_reg;
                tmp_52_reg_757_pp0_iter3_reg <= tmp_52_reg_757_pp0_iter2_reg;
                tmp_52_reg_757_pp0_iter4_reg <= tmp_52_reg_757_pp0_iter3_reg;
                tmp_52_reg_757_pp0_iter5_reg <= tmp_52_reg_757_pp0_iter4_reg;
                tmp_52_reg_757_pp0_iter6_reg <= tmp_52_reg_757_pp0_iter5_reg;
                tmp_52_reg_757_pp0_iter7_reg <= tmp_52_reg_757_pp0_iter6_reg;
                tmp_52_reg_757_pp0_iter8_reg <= tmp_52_reg_757_pp0_iter7_reg;
                tmp_52_reg_757_pp0_iter9_reg <= tmp_52_reg_757_pp0_iter8_reg;
                tmp_53_reg_763_pp0_iter10_reg <= tmp_53_reg_763_pp0_iter9_reg;
                tmp_53_reg_763_pp0_iter2_reg <= tmp_53_reg_763_pp0_iter1_reg;
                tmp_53_reg_763_pp0_iter3_reg <= tmp_53_reg_763_pp0_iter2_reg;
                tmp_53_reg_763_pp0_iter4_reg <= tmp_53_reg_763_pp0_iter3_reg;
                tmp_53_reg_763_pp0_iter5_reg <= tmp_53_reg_763_pp0_iter4_reg;
                tmp_53_reg_763_pp0_iter6_reg <= tmp_53_reg_763_pp0_iter5_reg;
                tmp_53_reg_763_pp0_iter7_reg <= tmp_53_reg_763_pp0_iter6_reg;
                tmp_53_reg_763_pp0_iter8_reg <= tmp_53_reg_763_pp0_iter7_reg;
                tmp_53_reg_763_pp0_iter9_reg <= tmp_53_reg_763_pp0_iter8_reg;
                tmp_reg_746_pp0_iter10_reg <= tmp_reg_746_pp0_iter9_reg;
                tmp_reg_746_pp0_iter11_reg <= tmp_reg_746_pp0_iter10_reg;
                tmp_reg_746_pp0_iter12_reg <= tmp_reg_746_pp0_iter11_reg;
                tmp_reg_746_pp0_iter13_reg <= tmp_reg_746_pp0_iter12_reg;
                tmp_reg_746_pp0_iter14_reg <= tmp_reg_746_pp0_iter13_reg;
                tmp_reg_746_pp0_iter15_reg <= tmp_reg_746_pp0_iter14_reg;
                tmp_reg_746_pp0_iter16_reg <= tmp_reg_746_pp0_iter15_reg;
                tmp_reg_746_pp0_iter17_reg <= tmp_reg_746_pp0_iter16_reg;
                tmp_reg_746_pp0_iter18_reg <= tmp_reg_746_pp0_iter17_reg;
                tmp_reg_746_pp0_iter19_reg <= tmp_reg_746_pp0_iter18_reg;
                tmp_reg_746_pp0_iter20_reg <= tmp_reg_746_pp0_iter19_reg;
                tmp_reg_746_pp0_iter21_reg <= tmp_reg_746_pp0_iter20_reg;
                tmp_reg_746_pp0_iter22_reg <= tmp_reg_746_pp0_iter21_reg;
                tmp_reg_746_pp0_iter2_reg <= tmp_reg_746_pp0_iter1_reg;
                tmp_reg_746_pp0_iter3_reg <= tmp_reg_746_pp0_iter2_reg;
                tmp_reg_746_pp0_iter4_reg <= tmp_reg_746_pp0_iter3_reg;
                tmp_reg_746_pp0_iter5_reg <= tmp_reg_746_pp0_iter4_reg;
                tmp_reg_746_pp0_iter6_reg <= tmp_reg_746_pp0_iter5_reg;
                tmp_reg_746_pp0_iter7_reg <= tmp_reg_746_pp0_iter6_reg;
                tmp_reg_746_pp0_iter8_reg <= tmp_reg_746_pp0_iter7_reg;
                tmp_reg_746_pp0_iter9_reg <= tmp_reg_746_pp0_iter8_reg;
                trunc_ln594_2_reg_897_pp0_iter12_reg <= trunc_ln594_2_reg_897;
                trunc_ln594_2_reg_897_pp0_iter13_reg <= trunc_ln594_2_reg_897_pp0_iter12_reg;
                trunc_ln594_2_reg_897_pp0_iter14_reg <= trunc_ln594_2_reg_897_pp0_iter13_reg;
                trunc_ln594_2_reg_897_pp0_iter15_reg <= trunc_ln594_2_reg_897_pp0_iter14_reg;
                trunc_ln594_2_reg_897_pp0_iter16_reg <= trunc_ln594_2_reg_897_pp0_iter15_reg;
                trunc_ln666_1_reg_954 <= trunc_ln666_1_fu_687_p1;
                trunc_ln666_reg_787_pp0_iter10_reg <= trunc_ln666_reg_787_pp0_iter9_reg;
                trunc_ln666_reg_787_pp0_iter2_reg <= trunc_ln666_reg_787_pp0_iter1_reg;
                trunc_ln666_reg_787_pp0_iter3_reg <= trunc_ln666_reg_787_pp0_iter2_reg;
                trunc_ln666_reg_787_pp0_iter4_reg <= trunc_ln666_reg_787_pp0_iter3_reg;
                trunc_ln666_reg_787_pp0_iter5_reg <= trunc_ln666_reg_787_pp0_iter4_reg;
                trunc_ln666_reg_787_pp0_iter6_reg <= trunc_ln666_reg_787_pp0_iter5_reg;
                trunc_ln666_reg_787_pp0_iter7_reg <= trunc_ln666_reg_787_pp0_iter6_reg;
                trunc_ln666_reg_787_pp0_iter8_reg <= trunc_ln666_reg_787_pp0_iter7_reg;
                trunc_ln666_reg_787_pp0_iter9_reg <= trunc_ln666_reg_787_pp0_iter8_reg;
                y_V_1_reg_949 <= y_V_1_fu_680_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1647_1_reg_793_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_x_msb_3_4_5_lsb_m_1_V_reg_885 <= exp_x_msb_3_4_5_lsb_m_1_V_fu_524_p2;
                ret_V_reg_891 <= ret_V_fu_547_p2;
                trunc_ln594_2_reg_897 <= trunc_ln594_2_fu_553_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1647_1_reg_793_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_x_msb_4_5_lsb_m_1_m4_V_reg_839 <= exp_x_msb_4_5_lsb_m_1_m4_V_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1647_1_reg_793_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_x_msb_4_5_lsb_m_1_m5_V_reg_849 <= exp_x_msb_4_5_lsb_m_1_m5_V_fu_429_p2;
                f_x_msb_3_V_reg_855 <= f_x_msb_3_table_V_q0;
                tmp_34_reg_860 <= f_x_msb_3_table_V_q0(50 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                f_x_msb_4_V_reg_798 <= f_x_msb_4_table_V_q0;
                or_ln1647_1_reg_793 <= or_ln1647_1_fu_342_p2;
                or_ln1647_1_reg_793_pp0_iter1_reg <= or_ln1647_1_reg_793;
                p_Result_s_103_reg_752 <= x(38 downto 32);
                p_Result_s_103_reg_752_pp0_iter1_reg <= p_Result_s_103_reg_752;
                tmp_52_reg_757 <= x(31 downto 24);
                tmp_52_reg_757_pp0_iter1_reg <= tmp_52_reg_757;
                tmp_53_reg_763 <= x(23 downto 16);
                tmp_53_reg_763_pp0_iter1_reg <= tmp_53_reg_763;
                tmp_54_reg_770 <= x(15 downto 8);
                tmp_55_reg_775 <= tmp_55_fu_323_p1;
                tmp_55_reg_775_pp0_iter1_reg <= tmp_55_reg_775;
                tmp_reg_746 <= x(40 downto 40);
                tmp_reg_746_pp0_iter1_reg <= tmp_reg_746;
                trunc_ln666_reg_787 <= trunc_ln666_fu_332_p1;
                trunc_ln666_reg_787_pp0_iter1_reg <= trunc_ln666_reg_787;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1647_1_reg_793_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                f_x_msb_5_V_reg_829 <= f_x_msb_5_table_V_q0;
                trunc_ln2_reg_834 <= grp_fu_372_p2(39 downto 34);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1647_1_reg_793_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_50_reg_875 <= grp_fu_469_p2(100 downto 57);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1647_1_reg_793_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln4_reg_913 <= grp_fu_570_p2(129 downto 68);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln1647_1_reg_793_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                y_lo_s_V_reg_944 <= grp_fu_637_p2(139 downto 72);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln58_fu_700_p2 <= std_logic_vector(unsigned(trunc_ln666_1_reg_954) + unsigned(ap_const_lv63_80000000));
    add_ln666_11_fu_615_p2 <= std_logic_vector(unsigned(zext_ln666_14_fu_612_p1) + unsigned(zext_ln1199_fu_597_p1));
    add_ln666_fu_518_p2 <= std_logic_vector(unsigned(zext_ln666_10_fu_500_p1) + unsigned(zext_ln666_9_fu_497_p1));
    and_ln1647_fu_277_p2 <= (icmp_ln1505_fu_265_p2 and icmp_ln1503_fu_271_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to23_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to23 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to23)
    begin
        if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv31_7FFFFFFF when (overf_1_fu_715_p2(0) = '1') else 
        tmp_36_fu_721_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln527_5_fu_592_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_2_3_4_5_lsb_m_1_V_fu_625_p2 <= std_logic_vector(unsigned(zext_ln666_15_fu_621_p1) + unsigned(zext_ln1199_5_fu_608_p1));
    exp_x_msb_3_4_5_lsb_m_1_V_fu_524_p2 <= std_logic_vector(unsigned(add_ln666_fu_518_p2) + unsigned(zext_ln666_11_fu_514_p1));
    exp_x_msb_3_m_1_s_V_fu_453_p4 <= ((tmp_53_reg_763_pp0_iter5_reg & ap_const_lv3_0) & tmp_34_reg_860);
    exp_x_msb_4_5_lsb_m_1_m3_V_1_fu_394_p2 <= std_logic_vector(unsigned(zext_ln294_fu_388_p1) + unsigned(zext_ln666_fu_391_p1));
    exp_x_msb_4_5_lsb_m_1_m4_V_fu_413_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_400_p4) + unsigned(zext_ln666_7_fu_409_p1));
    exp_x_msb_4_5_lsb_m_1_m5_V_fu_429_p2 <= std_logic_vector(unsigned(zext_ln294_1_fu_423_p1) + unsigned(zext_ln666_8_fu_426_p1));
    f_x_msb_2_table_V_address0 <= zext_ln527_4_fu_485_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln527_3_fu_419_p1(8 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_table_V_address0 <= zext_ln527_fu_327_p1(8 - 1 downto 0);

    f_x_msb_4_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_4_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_5_table_V_address0 <= zext_ln527_2_fu_362_p1(8 - 1 downto 0);

    f_x_msb_5_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_x_msb_5_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_5_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_372_p0 <= grp_fu_372_p00(32 - 1 downto 0);
    grp_fu_372_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_4_V_reg_798),40));
    grp_fu_372_p1 <= grp_fu_372_p10(8 - 1 downto 0);
    grp_fu_372_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_reg_775_pp0_iter1_reg),40));
    grp_fu_469_p0 <= grp_fu_469_p00(51 - 1 downto 0);
    grp_fu_469_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_445_p4),101));
    grp_fu_469_p1 <= grp_fu_469_p10(50 - 1 downto 0);
    grp_fu_469_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_m_1_s_V_fu_453_p4),101));
    grp_fu_570_p0 <= grp_fu_570_p00(67 - 1 downto 0);
    grp_fu_570_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_106_fu_557_p3),130));
    grp_fu_570_p1 <= grp_fu_570_p10(63 - 1 downto 0);
    grp_fu_570_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_5_lsb_m_1_V_reg_885),130));
    grp_fu_637_p0 <= grp_fu_637_p00(72 - 1 downto 0);
    grp_fu_637_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_5_lsb_m_1_V_reg_923),140));
    grp_fu_637_p1 <= grp_fu_637_p10(68 - 1 downto 0);
    grp_fu_637_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_928),140));
    grp_fu_739_p0 <= grp_fu_739_p00(25 - 1 downto 0);
    grp_fu_739_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_5_lsb_V_fu_348_p3),33));
    grp_fu_739_p1 <= grp_fu_739_p10(8 - 1 downto 0);
    grp_fu_739_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_reg_770),33));
    icmp_ln1501_fu_259_p2 <= "1" when (signed(p_Result_s_fu_215_p4) > signed(ap_const_lv6_16)) else "0";
    icmp_ln1503_fu_271_p2 <= "1" when (unsigned(p_Result_102_fu_229_p3) > unsigned(ap_const_lv67_17217F7D1CF79ABC0)) else "0";
    icmp_ln1505_fu_265_p2 <= "1" when (p_Result_s_fu_215_p4 = ap_const_lv6_16) else "0";
    or_ln1647_1_fu_342_p2 <= (overf_fu_253_p2 or or_ln1647_fu_336_p2);
    or_ln1647_fu_336_p2 <= (icmp_ln1501_fu_259_p2 or and_ln1647_fu_277_p2);
    overf_1_fu_715_p2 <= "0" when (tmp_51_fu_705_p4 = ap_const_lv2_0) else "1";
    overf_fu_253_p2 <= (tmp_fu_237_p3 xor tmp_45_fu_245_p3);
    p_Result_102_fu_229_p3 <= (trunc_ln594_fu_225_p1 & ap_const_lv33_0);
    p_Result_103_fu_576_p3 <= (tmp_reg_746_pp0_iter15_reg & p_Result_s_103_reg_752_pp0_iter15_reg);
    p_Result_104_fu_489_p4 <= ((tmp_53_reg_763_pp0_iter10_reg & ap_const_lv3_0) & f_x_msb_3_V_reg_855_pp0_iter10_reg);
    p_Result_105_fu_530_p4 <= f_x_msb_2_table_V_q0(63 downto 58);
    p_Result_106_fu_557_p3 <= (ret_V_reg_891 & trunc_ln594_2_reg_897);
    p_Result_s_fu_215_p4 <= x(39 downto 34);
    p_Val2_45_fu_694_p2 <= std_logic_vector(unsigned(zext_ln1632_fu_691_p1) + unsigned(ap_const_lv65_80000000));
    ret_V_fu_547_p2 <= std_logic_vector(unsigned(zext_ln666_13_fu_544_p1) + unsigned(zext_ln666_12_fu_540_p1));
    rhs_14_fu_600_p4 <= ((ret_V_reg_891_pp0_iter16_reg & trunc_ln594_2_reg_897_pp0_iter16_reg) & ap_const_lv4_0);
    select_ln594_fu_658_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (xor_ln1632_fu_653_p2(0) = '1') else 
        ap_const_lv64_0;
    tmp_35_fu_504_p5 <= (((trunc_ln666_reg_787_pp0_iter10_reg & ap_const_lv2_0) & exp_x_msb_4_5_lsb_m_1_m5_V_reg_849_pp0_iter10_reg) & ap_const_lv3_0);
    tmp_36_fu_721_p4 <= add_ln58_fu_700_p2(62 downto 32);
    tmp_45_fu_245_p3 <= x(39 downto 39);
    tmp_51_fu_705_p4 <= p_Val2_45_fu_694_p2(64 downto 63);
    tmp_54_fu_313_p4 <= x(15 downto 8);
    tmp_55_fu_323_p1 <= x(8 - 1 downto 0);
    tmp_fu_237_p3 <= x(40 downto 40);
    tmp_s_fu_445_p4 <= ((trunc_ln666_reg_787_pp0_iter5_reg & ap_const_lv2_0) & exp_x_msb_4_5_lsb_m_1_m5_V_reg_849);
    trunc_ln3_fu_400_p1 <= grp_fu_739_p2;
    trunc_ln3_fu_400_p4 <= trunc_ln3_fu_400_p1(32 downto 8);
    trunc_ln594_2_fu_553_p1 <= f_x_msb_2_table_V_q0(58 - 1 downto 0);
    trunc_ln594_fu_225_p1 <= x(34 - 1 downto 0);
    trunc_ln666_1_fu_687_p1 <= y_V_1_fu_680_p3(63 - 1 downto 0);
    trunc_ln666_fu_332_p1 <= x(16 - 1 downto 0);
    x_msb_5_lsb_V_fu_348_p3 <= (tmp_55_reg_775 & ap_const_lv17_0);
    xor_ln1632_fu_653_p2 <= (tmp_reg_746_pp0_iter22_reg xor ap_const_lv1_1);
    y_V_1_fu_680_p3 <= 
        select_ln594_fu_658_p3 when (or_ln1647_1_reg_793_pp0_iter22_reg(0) = '1') else 
        y_V_fu_670_p4;
    y_V_fu_670_p4 <= y_l_V_fu_666_p2(67 downto 4);
    y_l_V_fu_666_p2 <= std_logic_vector(unsigned(exp_x_msb_1_V_reg_928_pp0_iter22_reg) + unsigned(y_lo_s_V_reg_944));
    zext_ln1199_5_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_14_fu_600_p4),72));
    zext_ln1199_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_913),64));
    zext_ln1632_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_949),65));
    zext_ln294_1_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_4_V_reg_798_pp0_iter4_reg),33));
    zext_ln294_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_5_V_reg_829),17));
    zext_ln527_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_reg_775_pp0_iter1_reg),64));
    zext_ln527_3_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_reg_763_pp0_iter3_reg),64));
    zext_ln527_4_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_reg_757_pp0_iter9_reg),64));
    zext_ln527_5_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_103_fu_576_p3),64));
    zext_ln527_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_313_p4),64));
    zext_ln666_10_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_104_fu_489_p4),63));
    zext_ln666_11_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_504_p5),63));
    zext_ln666_12_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_105_fu_530_p4),9));
    zext_ln666_13_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_reg_757_pp0_iter10_reg),9));
    zext_ln666_14_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_5_lsb_m_1_V_reg_885_pp0_iter16_reg),64));
    zext_ln666_15_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln666_11_fu_615_p2),72));
    zext_ln666_7_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_4_5_lsb_m_1_m3_V_1_fu_394_p2),25));
    zext_ln666_8_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_4_5_lsb_m_1_m4_V_reg_839),33));
    zext_ln666_9_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_reg_875),63));
    zext_ln666_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2_reg_834),17));
end behav;
