-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eucHW is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of eucHW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eucHW_eucHW,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg400-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.154625,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1259,HLS_SYN_LUT=2836,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal C : STD_LOGIC_VECTOR (31 downto 0);
    signal C_ap_vld : STD_LOGIC;
    signal sext_ln37_fu_372_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln37_1_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_1_reg_856 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_2_fu_398_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_2_reg_861 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_3_fu_418_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln37_4_fu_430_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_4_reg_872 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_5_fu_450_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln37_6_fu_462_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_6_reg_883 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_7_fu_482_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln37_8_fu_494_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_8_reg_894 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_9_fu_514_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln37_10_fu_526_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_10_reg_905 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_11_fu_546_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln37_12_fu_558_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_12_reg_916 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_13_fu_578_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln37_14_fu_590_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_14_reg_927 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_15_fu_610_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_fu_617_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln37_1_fu_626_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_3_fu_635_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_5_fu_644_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_7_fu_653_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_9_fu_662_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_11_fu_671_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_13_fu_680_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln37_6_fu_718_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln37_6_reg_978 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln37_13_fu_756_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln37_13_reg_983 : STD_LOGIC_VECTOR (19 downto 0);
    signal result_2_fu_768_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal result_2_reg_988 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sqrt_fixed_32_32_s_fu_353_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_993 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln37_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_1_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_fu_366_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_2_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_3_fu_380_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_4_fu_390_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_5_fu_394_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_6_fu_404_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_7_fu_408_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_3_fu_412_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_8_fu_422_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_9_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_10_fu_436_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_11_fu_440_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_5_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_12_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_13_fu_458_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_14_fu_468_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_15_fu_472_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_7_fu_476_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_16_fu_486_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_17_fu_490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_18_fu_500_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_19_fu_504_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_9_fu_508_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_20_fu_518_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_21_fu_522_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_22_fu_532_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_23_fu_536_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_11_fu_540_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_24_fu_550_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_25_fu_554_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_26_fu_564_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_27_fu_568_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_13_fu_572_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_28_fu_582_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_29_fu_586_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_30_fu_596_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_31_fu_600_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_15_fu_604_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln37_fu_617_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_1_fu_614_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_fu_617_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln37_1_fu_626_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_2_fu_623_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_1_fu_626_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln37_3_fu_635_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_4_fu_632_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_3_fu_635_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln37_5_fu_644_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_6_fu_641_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_5_fu_644_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln37_7_fu_653_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_8_fu_650_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_7_fu_653_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln37_9_fu_662_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_10_fu_659_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_9_fu_662_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln37_11_fu_671_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_12_fu_668_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_11_fu_671_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln37_13_fu_680_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln37_14_fu_677_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln37_13_fu_680_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_778_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_787_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln37_17_fu_689_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln37_16_fu_686_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln37_2_fu_692_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_796_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_805_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln37_20_fu_705_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln37_19_fu_702_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln37_5_fu_708_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln37_21_fu_714_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln37_18_fu_698_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_814_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_823_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln37_24_fu_727_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln37_23_fu_724_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln37_9_fu_730_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_832_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_841_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln37_27_fu_743_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln37_26_fu_740_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln37_12_fu_746_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln37_28_fu_752_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln37_25_fu_736_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln37_29_fu_765_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln37_22_fu_762_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_778_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_778_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_787_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_787_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_796_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_796_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_805_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_805_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_814_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_814_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_823_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_823_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_832_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_832_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_841_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_841_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component eucHW_sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (20 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component eucHW_mul_9s_9s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component eucHW_mac_muladd_9s_9s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component eucHW_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        A_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
        C : IN STD_LOGIC_VECTOR (31 downto 0);
        C_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_sqrt_fixed_32_32_s_fu_353 : component eucHW_sqrt_fixed_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x => result_2_reg_988,
        ap_return => grp_sqrt_fixed_32_32_s_fu_353_ap_return);

    control_s_axi_U : component eucHW_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A_0 => A_0,
        A_1 => A_1,
        A_2 => A_2,
        A_3 => A_3,
        A_4 => A_4,
        A_5 => A_5,
        A_6 => A_6,
        A_7 => A_7,
        A_8 => A_8,
        A_9 => A_9,
        A_10 => A_10,
        A_11 => A_11,
        A_12 => A_12,
        A_13 => A_13,
        A_14 => A_14,
        A_15 => A_15,
        B_0 => B_0,
        B_1 => B_1,
        B_2 => B_2,
        B_3 => B_3,
        B_4 => B_4,
        B_5 => B_5,
        B_6 => B_6,
        B_7 => B_7,
        B_8 => B_8,
        B_9 => B_9,
        B_10 => B_10,
        B_11 => B_11,
        B_12 => B_12,
        B_13 => B_13,
        B_14 => B_14,
        B_15 => B_15,
        C => C,
        C_ap_vld => C_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_9s_9s_18_1_1_U2 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln37_fu_617_p0,
        din1 => mul_ln37_fu_617_p1,
        dout => mul_ln37_fu_617_p2);

    mul_9s_9s_18_1_1_U3 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln37_1_fu_626_p0,
        din1 => mul_ln37_1_fu_626_p1,
        dout => mul_ln37_1_fu_626_p2);

    mul_9s_9s_18_1_1_U4 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln37_3_fu_635_p0,
        din1 => mul_ln37_3_fu_635_p1,
        dout => mul_ln37_3_fu_635_p2);

    mul_9s_9s_18_1_1_U5 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln37_5_fu_644_p0,
        din1 => mul_ln37_5_fu_644_p1,
        dout => mul_ln37_5_fu_644_p2);

    mul_9s_9s_18_1_1_U6 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln37_7_fu_653_p0,
        din1 => mul_ln37_7_fu_653_p1,
        dout => mul_ln37_7_fu_653_p2);

    mul_9s_9s_18_1_1_U7 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln37_9_fu_662_p0,
        din1 => mul_ln37_9_fu_662_p1,
        dout => mul_ln37_9_fu_662_p2);

    mul_9s_9s_18_1_1_U8 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln37_11_fu_671_p0,
        din1 => mul_ln37_11_fu_671_p1,
        dout => mul_ln37_11_fu_671_p2);

    mul_9s_9s_18_1_1_U9 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln37_13_fu_680_p0,
        din1 => mul_ln37_13_fu_680_p1,
        dout => mul_ln37_13_fu_680_p2);

    mac_muladd_9s_9s_18s_18_4_1_U10 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_778_p0,
        din1 => grp_fu_778_p1,
        din2 => mul_ln37_fu_617_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_778_p3);

    mac_muladd_9s_9s_18s_18_4_1_U11 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_787_p0,
        din1 => grp_fu_787_p1,
        din2 => mul_ln37_1_fu_626_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_787_p3);

    mac_muladd_9s_9s_18s_18_4_1_U12 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_796_p0,
        din1 => grp_fu_796_p1,
        din2 => mul_ln37_3_fu_635_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_796_p3);

    mac_muladd_9s_9s_18s_18_4_1_U13 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_805_p0,
        din1 => grp_fu_805_p1,
        din2 => mul_ln37_5_fu_644_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_805_p3);

    mac_muladd_9s_9s_18s_18_4_1_U14 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_814_p0,
        din1 => grp_fu_814_p1,
        din2 => mul_ln37_7_fu_653_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_814_p3);

    mac_muladd_9s_9s_18s_18_4_1_U15 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_823_p0,
        din1 => grp_fu_823_p1,
        din2 => mul_ln37_9_fu_662_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_823_p3);

    mac_muladd_9s_9s_18s_18_4_1_U16 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_832_p0,
        din1 => grp_fu_832_p1,
        din2 => mul_ln37_11_fu_671_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_832_p3);

    mac_muladd_9s_9s_18s_18_4_1_U17 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_841_p0,
        din1 => grp_fu_841_p1,
        din2 => mul_ln37_13_fu_680_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_841_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln37_13_reg_983 <= add_ln37_13_fu_756_p2;
                add_ln37_6_reg_978 <= add_ln37_6_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_Val2_s_reg_993 <= grp_sqrt_fixed_32_32_s_fu_353_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                result_2_reg_988 <= result_2_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sub_ln37_10_reg_905 <= sub_ln37_10_fu_526_p2;
                sub_ln37_12_reg_916 <= sub_ln37_12_fu_558_p2;
                sub_ln37_14_reg_927 <= sub_ln37_14_fu_590_p2;
                sub_ln37_1_reg_856 <= sub_ln37_1_fu_384_p2;
                sub_ln37_2_reg_861 <= sub_ln37_2_fu_398_p2;
                sub_ln37_4_reg_872 <= sub_ln37_4_fu_430_p2;
                sub_ln37_6_reg_883 <= sub_ln37_6_fu_462_p2;
                sub_ln37_8_reg_894 <= sub_ln37_8_fu_494_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    C <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_993),32));

    C_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            C_ap_vld <= ap_const_logic_1;
        else 
            C_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln37_12_fu_746_p2 <= std_logic_vector(signed(sext_ln37_27_fu_743_p1) + signed(sext_ln37_26_fu_740_p1));
    add_ln37_13_fu_756_p2 <= std_logic_vector(signed(sext_ln37_28_fu_752_p1) + signed(sext_ln37_25_fu_736_p1));
    add_ln37_2_fu_692_p2 <= std_logic_vector(signed(sext_ln37_17_fu_689_p1) + signed(sext_ln37_16_fu_686_p1));
    add_ln37_5_fu_708_p2 <= std_logic_vector(signed(sext_ln37_20_fu_705_p1) + signed(sext_ln37_19_fu_702_p1));
    add_ln37_6_fu_718_p2 <= std_logic_vector(signed(sext_ln37_21_fu_714_p1) + signed(sext_ln37_18_fu_698_p1));
    add_ln37_9_fu_730_p2 <= std_logic_vector(signed(sext_ln37_24_fu_727_p1) + signed(sext_ln37_23_fu_724_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_778_p0 <= sext_ln37_fu_372_p1(9 - 1 downto 0);
    grp_fu_778_p1 <= sext_ln37_fu_372_p1(9 - 1 downto 0);
    grp_fu_787_p0 <= sext_ln37_3_fu_418_p1(9 - 1 downto 0);
    grp_fu_787_p1 <= sext_ln37_3_fu_418_p1(9 - 1 downto 0);
    grp_fu_796_p0 <= sext_ln37_5_fu_450_p1(9 - 1 downto 0);
    grp_fu_796_p1 <= sext_ln37_5_fu_450_p1(9 - 1 downto 0);
    grp_fu_805_p0 <= sext_ln37_7_fu_482_p1(9 - 1 downto 0);
    grp_fu_805_p1 <= sext_ln37_7_fu_482_p1(9 - 1 downto 0);
    grp_fu_814_p0 <= sext_ln37_9_fu_514_p1(9 - 1 downto 0);
    grp_fu_814_p1 <= sext_ln37_9_fu_514_p1(9 - 1 downto 0);
    grp_fu_823_p0 <= sext_ln37_11_fu_546_p1(9 - 1 downto 0);
    grp_fu_823_p1 <= sext_ln37_11_fu_546_p1(9 - 1 downto 0);
    grp_fu_832_p0 <= sext_ln37_13_fu_578_p1(9 - 1 downto 0);
    grp_fu_832_p1 <= sext_ln37_13_fu_578_p1(9 - 1 downto 0);
    grp_fu_841_p0 <= sext_ln37_15_fu_610_p1(9 - 1 downto 0);
    grp_fu_841_p1 <= sext_ln37_15_fu_610_p1(9 - 1 downto 0);
    mul_ln37_11_fu_671_p0 <= sext_ln37_12_fu_668_p1(9 - 1 downto 0);
    mul_ln37_11_fu_671_p1 <= sext_ln37_12_fu_668_p1(9 - 1 downto 0);
    mul_ln37_13_fu_680_p0 <= sext_ln37_14_fu_677_p1(9 - 1 downto 0);
    mul_ln37_13_fu_680_p1 <= sext_ln37_14_fu_677_p1(9 - 1 downto 0);
    mul_ln37_1_fu_626_p0 <= sext_ln37_2_fu_623_p1(9 - 1 downto 0);
    mul_ln37_1_fu_626_p1 <= sext_ln37_2_fu_623_p1(9 - 1 downto 0);
    mul_ln37_3_fu_635_p0 <= sext_ln37_4_fu_632_p1(9 - 1 downto 0);
    mul_ln37_3_fu_635_p1 <= sext_ln37_4_fu_632_p1(9 - 1 downto 0);
    mul_ln37_5_fu_644_p0 <= sext_ln37_6_fu_641_p1(9 - 1 downto 0);
    mul_ln37_5_fu_644_p1 <= sext_ln37_6_fu_641_p1(9 - 1 downto 0);
    mul_ln37_7_fu_653_p0 <= sext_ln37_8_fu_650_p1(9 - 1 downto 0);
    mul_ln37_7_fu_653_p1 <= sext_ln37_8_fu_650_p1(9 - 1 downto 0);
    mul_ln37_9_fu_662_p0 <= sext_ln37_10_fu_659_p1(9 - 1 downto 0);
    mul_ln37_9_fu_662_p1 <= sext_ln37_10_fu_659_p1(9 - 1 downto 0);
    mul_ln37_fu_617_p0 <= sext_ln37_1_fu_614_p1(9 - 1 downto 0);
    mul_ln37_fu_617_p1 <= sext_ln37_1_fu_614_p1(9 - 1 downto 0);
    result_2_fu_768_p2 <= std_logic_vector(signed(sext_ln37_29_fu_765_p1) + signed(sext_ln37_22_fu_762_p1));
        sext_ln37_10_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_10_reg_905),18));

        sext_ln37_11_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_11_fu_540_p2),18));

        sext_ln37_12_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_12_reg_916),18));

        sext_ln37_13_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_13_fu_572_p2),18));

        sext_ln37_14_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_14_reg_927),18));

        sext_ln37_15_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_15_fu_604_p2),18));

        sext_ln37_16_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_778_p3),19));

        sext_ln37_17_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_787_p3),19));

        sext_ln37_18_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_2_fu_692_p2),20));

        sext_ln37_19_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_796_p3),19));

        sext_ln37_1_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_1_reg_856),18));

        sext_ln37_20_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_805_p3),19));

        sext_ln37_21_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_5_fu_708_p2),20));

        sext_ln37_22_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_6_reg_978),21));

        sext_ln37_23_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_814_p3),19));

        sext_ln37_24_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_823_p3),19));

        sext_ln37_25_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_9_fu_730_p2),20));

        sext_ln37_26_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_832_p3),19));

        sext_ln37_27_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_841_p3),19));

        sext_ln37_28_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_12_fu_746_p2),20));

        sext_ln37_29_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_13_reg_983),21));

        sext_ln37_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_2_reg_861),18));

        sext_ln37_3_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_3_fu_412_p2),18));

        sext_ln37_4_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_4_reg_872),18));

        sext_ln37_5_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_5_fu_444_p2),18));

        sext_ln37_6_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_6_reg_883),18));

        sext_ln37_7_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_7_fu_476_p2),18));

        sext_ln37_8_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_8_reg_894),18));

        sext_ln37_9_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_9_fu_508_p2),18));

        sext_ln37_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln37_fu_366_p2),18));

    sub_ln37_10_fu_526_p2 <= std_logic_vector(unsigned(zext_ln37_20_fu_518_p1) - unsigned(zext_ln37_21_fu_522_p1));
    sub_ln37_11_fu_540_p2 <= std_logic_vector(unsigned(zext_ln37_22_fu_532_p1) - unsigned(zext_ln37_23_fu_536_p1));
    sub_ln37_12_fu_558_p2 <= std_logic_vector(unsigned(zext_ln37_24_fu_550_p1) - unsigned(zext_ln37_25_fu_554_p1));
    sub_ln37_13_fu_572_p2 <= std_logic_vector(unsigned(zext_ln37_26_fu_564_p1) - unsigned(zext_ln37_27_fu_568_p1));
    sub_ln37_14_fu_590_p2 <= std_logic_vector(unsigned(zext_ln37_28_fu_582_p1) - unsigned(zext_ln37_29_fu_586_p1));
    sub_ln37_15_fu_604_p2 <= std_logic_vector(unsigned(zext_ln37_30_fu_596_p1) - unsigned(zext_ln37_31_fu_600_p1));
    sub_ln37_1_fu_384_p2 <= std_logic_vector(unsigned(zext_ln37_2_fu_376_p1) - unsigned(zext_ln37_3_fu_380_p1));
    sub_ln37_2_fu_398_p2 <= std_logic_vector(unsigned(zext_ln37_4_fu_390_p1) - unsigned(zext_ln37_5_fu_394_p1));
    sub_ln37_3_fu_412_p2 <= std_logic_vector(unsigned(zext_ln37_6_fu_404_p1) - unsigned(zext_ln37_7_fu_408_p1));
    sub_ln37_4_fu_430_p2 <= std_logic_vector(unsigned(zext_ln37_8_fu_422_p1) - unsigned(zext_ln37_9_fu_426_p1));
    sub_ln37_5_fu_444_p2 <= std_logic_vector(unsigned(zext_ln37_10_fu_436_p1) - unsigned(zext_ln37_11_fu_440_p1));
    sub_ln37_6_fu_462_p2 <= std_logic_vector(unsigned(zext_ln37_12_fu_454_p1) - unsigned(zext_ln37_13_fu_458_p1));
    sub_ln37_7_fu_476_p2 <= std_logic_vector(unsigned(zext_ln37_14_fu_468_p1) - unsigned(zext_ln37_15_fu_472_p1));
    sub_ln37_8_fu_494_p2 <= std_logic_vector(unsigned(zext_ln37_16_fu_486_p1) - unsigned(zext_ln37_17_fu_490_p1));
    sub_ln37_9_fu_508_p2 <= std_logic_vector(unsigned(zext_ln37_18_fu_500_p1) - unsigned(zext_ln37_19_fu_504_p1));
    sub_ln37_fu_366_p2 <= std_logic_vector(unsigned(zext_ln37_fu_358_p1) - unsigned(zext_ln37_1_fu_362_p1));
    zext_ln37_10_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_5),9));
    zext_ln37_11_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_5),9));
    zext_ln37_12_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_6),9));
    zext_ln37_13_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_6),9));
    zext_ln37_14_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_7),9));
    zext_ln37_15_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_7),9));
    zext_ln37_16_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_8),9));
    zext_ln37_17_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_8),9));
    zext_ln37_18_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_9),9));
    zext_ln37_19_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_9),9));
    zext_ln37_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_0),9));
    zext_ln37_20_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_10),9));
    zext_ln37_21_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_10),9));
    zext_ln37_22_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_11),9));
    zext_ln37_23_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_11),9));
    zext_ln37_24_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_12),9));
    zext_ln37_25_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_12),9));
    zext_ln37_26_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_13),9));
    zext_ln37_27_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_13),9));
    zext_ln37_28_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_14),9));
    zext_ln37_29_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_14),9));
    zext_ln37_2_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_1),9));
    zext_ln37_30_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_15),9));
    zext_ln37_31_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_15),9));
    zext_ln37_3_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_1),9));
    zext_ln37_4_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_2),9));
    zext_ln37_5_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_2),9));
    zext_ln37_6_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_3),9));
    zext_ln37_7_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_3),9));
    zext_ln37_8_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_4),9));
    zext_ln37_9_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_4),9));
    zext_ln37_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_0),9));
end behav;
