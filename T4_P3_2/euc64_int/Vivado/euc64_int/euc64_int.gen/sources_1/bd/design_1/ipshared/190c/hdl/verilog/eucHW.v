// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eucHW_eucHW,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg400-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.154625,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=2054,HLS_SYN_LUT=3105,HLS_VERSION=2021_1}" *)

module eucHW (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_pp0_stage0 = 12'd2;
parameter    ap_ST_fsm_state8 = 12'd4;
parameter    ap_ST_fsm_state9 = 12'd8;
parameter    ap_ST_fsm_state10 = 12'd16;
parameter    ap_ST_fsm_state11 = 12'd32;
parameter    ap_ST_fsm_state12 = 12'd64;
parameter    ap_ST_fsm_state13 = 12'd128;
parameter    ap_ST_fsm_state14 = 12'd256;
parameter    ap_ST_fsm_state15 = 12'd512;
parameter    ap_ST_fsm_state16 = 12'd1024;
parameter    ap_ST_fsm_state17 = 12'd2048;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [2:0] A_0_address0;
reg    A_0_ce0;
wire   [7:0] A_0_q0;
wire   [2:0] A_1_address0;
reg    A_1_ce0;
wire   [7:0] A_1_q0;
wire   [2:0] A_2_address0;
reg    A_2_ce0;
wire   [7:0] A_2_q0;
wire   [2:0] A_3_address0;
reg    A_3_ce0;
wire   [7:0] A_3_q0;
wire   [2:0] A_4_address0;
reg    A_4_ce0;
wire   [7:0] A_4_q0;
wire   [2:0] A_5_address0;
reg    A_5_ce0;
wire   [7:0] A_5_q0;
wire   [2:0] A_6_address0;
reg    A_6_ce0;
wire   [7:0] A_6_q0;
wire   [2:0] A_7_address0;
reg    A_7_ce0;
wire   [7:0] A_7_q0;
wire   [2:0] B_0_address0;
reg    B_0_ce0;
wire   [7:0] B_0_q0;
wire   [2:0] B_1_address0;
reg    B_1_ce0;
wire   [7:0] B_1_q0;
wire   [2:0] B_2_address0;
reg    B_2_ce0;
wire   [7:0] B_2_q0;
wire   [2:0] B_3_address0;
reg    B_3_ce0;
wire   [7:0] B_3_q0;
wire   [2:0] B_4_address0;
reg    B_4_ce0;
wire   [7:0] B_4_q0;
wire   [2:0] B_5_address0;
reg    B_5_ce0;
wire   [7:0] B_5_q0;
wire   [2:0] B_6_address0;
reg    B_6_ce0;
wire   [7:0] B_6_q0;
wire   [2:0] B_7_address0;
reg    B_7_ce0;
wire   [7:0] B_7_q0;
wire   [31:0] C;
reg    C_ap_vld;
wire   [63:0] zext_ln38_fu_395_p1;
reg   [63:0] zext_ln38_reg_691;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_fu_377_p3;
wire  signed [17:0] sext_ln38_1_fu_432_p1;
wire  signed [17:0] sext_ln38_3_fu_450_p1;
wire  signed [17:0] sext_ln38_5_fu_468_p1;
wire  signed [17:0] sext_ln38_7_fu_486_p1;
wire   [8:0] sub_ln38_fu_498_p2;
reg   [8:0] sub_ln38_reg_807;
wire   [8:0] sub_ln38_2_fu_512_p2;
reg   [8:0] sub_ln38_2_reg_812;
wire   [8:0] sub_ln38_4_fu_526_p2;
reg   [8:0] sub_ln38_4_reg_817;
wire   [8:0] sub_ln38_6_fu_540_p2;
reg   [8:0] sub_ln38_6_reg_822;
wire  signed [17:0] mul_ln38_fu_549_p2;
wire  signed [17:0] mul_ln38_2_fu_558_p2;
wire  signed [17:0] mul_ln38_4_fu_567_p2;
wire  signed [17:0] mul_ln38_6_fu_576_p2;
wire   [19:0] add_ln38_6_fu_614_p2;
reg   [19:0] add_ln38_6_reg_847;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_355_ap_return;
reg   [15:0] p_Val2_s_reg_857;
wire    ap_CS_fsm_state16;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage0;
reg   [22:0] result_fu_132;
wire   [22:0] result_1_fu_623_p2;
reg   [6:0] i_fu_136;
wire   [6:0] add_ln34_fu_407_p2;
wire    ap_CS_fsm_state17;
wire   [2:0] lshr_ln_fu_385_p4;
wire   [8:0] zext_ln38_3_fu_418_p1;
wire   [8:0] zext_ln38_4_fu_422_p1;
wire   [8:0] sub_ln38_1_fu_426_p2;
wire   [8:0] zext_ln38_7_fu_436_p1;
wire   [8:0] zext_ln38_8_fu_440_p1;
wire   [8:0] sub_ln38_3_fu_444_p2;
wire   [8:0] zext_ln38_11_fu_454_p1;
wire   [8:0] zext_ln38_12_fu_458_p1;
wire   [8:0] sub_ln38_5_fu_462_p2;
wire   [8:0] zext_ln38_15_fu_472_p1;
wire   [8:0] zext_ln38_16_fu_476_p1;
wire   [8:0] sub_ln38_7_fu_480_p2;
wire   [8:0] zext_ln38_1_fu_490_p1;
wire   [8:0] zext_ln38_2_fu_494_p1;
wire   [8:0] zext_ln38_5_fu_504_p1;
wire   [8:0] zext_ln38_6_fu_508_p1;
wire   [8:0] zext_ln38_9_fu_518_p1;
wire   [8:0] zext_ln38_10_fu_522_p1;
wire   [8:0] zext_ln38_13_fu_532_p1;
wire   [8:0] zext_ln38_14_fu_536_p1;
wire  signed [8:0] mul_ln38_fu_549_p0;
wire  signed [17:0] sext_ln38_fu_546_p1;
wire  signed [8:0] mul_ln38_fu_549_p1;
wire  signed [8:0] mul_ln38_2_fu_558_p0;
wire  signed [17:0] sext_ln38_2_fu_555_p1;
wire  signed [8:0] mul_ln38_2_fu_558_p1;
wire  signed [8:0] mul_ln38_4_fu_567_p0;
wire  signed [17:0] sext_ln38_4_fu_564_p1;
wire  signed [8:0] mul_ln38_4_fu_567_p1;
wire  signed [8:0] mul_ln38_6_fu_576_p0;
wire  signed [17:0] sext_ln38_6_fu_573_p1;
wire  signed [8:0] mul_ln38_6_fu_576_p1;
wire  signed [17:0] grp_fu_638_p3;
wire  signed [17:0] grp_fu_647_p3;
wire  signed [18:0] sext_ln38_9_fu_585_p1;
wire  signed [18:0] sext_ln38_8_fu_582_p1;
wire   [18:0] add_ln38_2_fu_588_p2;
wire  signed [17:0] grp_fu_656_p3;
wire  signed [17:0] grp_fu_665_p3;
wire  signed [18:0] sext_ln38_12_fu_601_p1;
wire  signed [18:0] sext_ln38_11_fu_598_p1;
wire   [18:0] add_ln38_5_fu_604_p2;
wire  signed [19:0] sext_ln38_13_fu_610_p1;
wire  signed [19:0] sext_ln38_10_fu_594_p1;
wire  signed [22:0] sext_ln38_14_fu_620_p1;
wire  signed [8:0] grp_fu_638_p0;
wire  signed [8:0] grp_fu_638_p1;
wire  signed [8:0] grp_fu_647_p0;
wire  signed [8:0] grp_fu_647_p1;
wire  signed [8:0] grp_fu_656_p0;
wire  signed [8:0] grp_fu_656_p1;
wire  signed [8:0] grp_fu_665_p0;
wire  signed [8:0] grp_fu_665_p1;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

eucHW_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_355(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x(result_fu_132),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_355_ap_return)
);

eucHW_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A_0_address0(A_0_address0),
    .A_0_ce0(A_0_ce0),
    .A_0_q0(A_0_q0),
    .A_1_address0(A_1_address0),
    .A_1_ce0(A_1_ce0),
    .A_1_q0(A_1_q0),
    .A_2_address0(A_2_address0),
    .A_2_ce0(A_2_ce0),
    .A_2_q0(A_2_q0),
    .A_3_address0(A_3_address0),
    .A_3_ce0(A_3_ce0),
    .A_3_q0(A_3_q0),
    .A_4_address0(A_4_address0),
    .A_4_ce0(A_4_ce0),
    .A_4_q0(A_4_q0),
    .A_5_address0(A_5_address0),
    .A_5_ce0(A_5_ce0),
    .A_5_q0(A_5_q0),
    .A_6_address0(A_6_address0),
    .A_6_ce0(A_6_ce0),
    .A_6_q0(A_6_q0),
    .A_7_address0(A_7_address0),
    .A_7_ce0(A_7_ce0),
    .A_7_q0(A_7_q0),
    .B_0_address0(B_0_address0),
    .B_0_ce0(B_0_ce0),
    .B_0_q0(B_0_q0),
    .B_1_address0(B_1_address0),
    .B_1_ce0(B_1_ce0),
    .B_1_q0(B_1_q0),
    .B_2_address0(B_2_address0),
    .B_2_ce0(B_2_ce0),
    .B_2_q0(B_2_q0),
    .B_3_address0(B_3_address0),
    .B_3_ce0(B_3_ce0),
    .B_3_q0(B_3_q0),
    .B_4_address0(B_4_address0),
    .B_4_ce0(B_4_ce0),
    .B_4_q0(B_4_q0),
    .B_5_address0(B_5_address0),
    .B_5_ce0(B_5_ce0),
    .B_5_q0(B_5_q0),
    .B_6_address0(B_6_address0),
    .B_6_ce0(B_6_ce0),
    .B_6_q0(B_6_q0),
    .B_7_address0(B_7_address0),
    .B_7_ce0(B_7_ce0),
    .B_7_q0(B_7_q0),
    .C(C),
    .C_ap_vld(C_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

eucHW_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U2(
    .din0(mul_ln38_fu_549_p0),
    .din1(mul_ln38_fu_549_p1),
    .dout(mul_ln38_fu_549_p2)
);

eucHW_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U3(
    .din0(mul_ln38_2_fu_558_p0),
    .din1(mul_ln38_2_fu_558_p1),
    .dout(mul_ln38_2_fu_558_p2)
);

eucHW_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U4(
    .din0(mul_ln38_4_fu_567_p0),
    .din1(mul_ln38_4_fu_567_p1),
    .dout(mul_ln38_4_fu_567_p2)
);

eucHW_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U5(
    .din0(mul_ln38_6_fu_576_p0),
    .din1(mul_ln38_6_fu_576_p1),
    .dout(mul_ln38_6_fu_576_p2)
);

eucHW_mac_muladd_9s_9s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_9s_9s_18s_18_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_638_p0),
    .din1(grp_fu_638_p1),
    .din2(mul_ln38_fu_549_p2),
    .ce(1'b1),
    .dout(grp_fu_638_p3)
);

eucHW_mac_muladd_9s_9s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_9s_9s_18s_18_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_647_p0),
    .din1(grp_fu_647_p1),
    .din2(mul_ln38_2_fu_558_p2),
    .ce(1'b1),
    .dout(grp_fu_647_p3)
);

eucHW_mac_muladd_9s_9s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_9s_9s_18s_18_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_656_p0),
    .din1(grp_fu_656_p1),
    .din2(mul_ln38_4_fu_567_p2),
    .ce(1'b1),
    .dout(grp_fu_656_p3)
);

eucHW_mac_muladd_9s_9s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_9s_9s_18s_18_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_665_p0),
    .din1(grp_fu_665_p1),
    .din2(mul_ln38_6_fu_576_p2),
    .ce(1'b1),
    .dout(grp_fu_665_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_136 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_377_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_136 <= add_ln34_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        result_fu_132 <= 23'd0;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_fu_132 <= result_1_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln38_6_reg_847 <= add_ln38_6_fu_614_p2;
        sub_ln38_2_reg_812 <= sub_ln38_2_fu_512_p2;
        sub_ln38_4_reg_817 <= sub_ln38_4_fu_526_p2;
        sub_ln38_6_reg_822 <= sub_ln38_6_fu_540_p2;
        sub_ln38_reg_807 <= sub_ln38_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_Val2_s_reg_857 <= grp_sqrt_fixed_32_32_s_fu_355_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_377_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln38_reg_691[2 : 0] <= zext_ln38_fu_395_p1[2 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_2_ce0 = 1'b1;
    end else begin
        A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_3_ce0 = 1'b1;
    end else begin
        A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_4_ce0 = 1'b1;
    end else begin
        A_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_5_ce0 = 1'b1;
    end else begin
        A_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_6_ce0 = 1'b1;
    end else begin
        A_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_7_ce0 = 1'b1;
    end else begin
        A_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_2_ce0 = 1'b1;
    end else begin
        B_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_3_ce0 = 1'b1;
    end else begin
        B_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_4_ce0 = 1'b1;
    end else begin
        B_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_5_ce0 = 1'b1;
    end else begin
        B_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_6_ce0 = 1'b1;
    end else begin
        B_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_7_ce0 = 1'b1;
    end else begin
        B_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_ap_vld = 1'b1;
    end else begin
        C_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((tmp_fu_377_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_377_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_377_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_address0 = zext_ln38_reg_691;

assign A_1_address0 = zext_ln38_fu_395_p1;

assign A_2_address0 = zext_ln38_reg_691;

assign A_3_address0 = zext_ln38_fu_395_p1;

assign A_4_address0 = zext_ln38_reg_691;

assign A_5_address0 = zext_ln38_fu_395_p1;

assign A_6_address0 = zext_ln38_reg_691;

assign A_7_address0 = zext_ln38_fu_395_p1;

assign B_0_address0 = zext_ln38_reg_691;

assign B_1_address0 = zext_ln38_fu_395_p1;

assign B_2_address0 = zext_ln38_reg_691;

assign B_3_address0 = zext_ln38_fu_395_p1;

assign B_4_address0 = zext_ln38_reg_691;

assign B_5_address0 = zext_ln38_fu_395_p1;

assign B_6_address0 = zext_ln38_reg_691;

assign B_7_address0 = zext_ln38_fu_395_p1;

assign C = p_Val2_s_reg_857;

assign add_ln34_fu_407_p2 = (i_fu_136 + 7'd8);

assign add_ln38_2_fu_588_p2 = ($signed(sext_ln38_9_fu_585_p1) + $signed(sext_ln38_8_fu_582_p1));

assign add_ln38_5_fu_604_p2 = ($signed(sext_ln38_12_fu_601_p1) + $signed(sext_ln38_11_fu_598_p1));

assign add_ln38_6_fu_614_p2 = ($signed(sext_ln38_13_fu_610_p1) + $signed(sext_ln38_10_fu_594_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_638_p0 = sext_ln38_1_fu_432_p1;

assign grp_fu_638_p1 = sext_ln38_1_fu_432_p1;

assign grp_fu_647_p0 = sext_ln38_3_fu_450_p1;

assign grp_fu_647_p1 = sext_ln38_3_fu_450_p1;

assign grp_fu_656_p0 = sext_ln38_5_fu_468_p1;

assign grp_fu_656_p1 = sext_ln38_5_fu_468_p1;

assign grp_fu_665_p0 = sext_ln38_7_fu_486_p1;

assign grp_fu_665_p1 = sext_ln38_7_fu_486_p1;

assign lshr_ln_fu_385_p4 = {{i_fu_136[5:3]}};

assign mul_ln38_2_fu_558_p0 = sext_ln38_2_fu_555_p1;

assign mul_ln38_2_fu_558_p1 = sext_ln38_2_fu_555_p1;

assign mul_ln38_4_fu_567_p0 = sext_ln38_4_fu_564_p1;

assign mul_ln38_4_fu_567_p1 = sext_ln38_4_fu_564_p1;

assign mul_ln38_6_fu_576_p0 = sext_ln38_6_fu_573_p1;

assign mul_ln38_6_fu_576_p1 = sext_ln38_6_fu_573_p1;

assign mul_ln38_fu_549_p0 = sext_ln38_fu_546_p1;

assign mul_ln38_fu_549_p1 = sext_ln38_fu_546_p1;

assign result_1_fu_623_p2 = ($signed(result_fu_132) + $signed(sext_ln38_14_fu_620_p1));

assign sext_ln38_10_fu_594_p1 = $signed(add_ln38_2_fu_588_p2);

assign sext_ln38_11_fu_598_p1 = grp_fu_656_p3;

assign sext_ln38_12_fu_601_p1 = grp_fu_665_p3;

assign sext_ln38_13_fu_610_p1 = $signed(add_ln38_5_fu_604_p2);

assign sext_ln38_14_fu_620_p1 = $signed(add_ln38_6_reg_847);

assign sext_ln38_1_fu_432_p1 = $signed(sub_ln38_1_fu_426_p2);

assign sext_ln38_2_fu_555_p1 = $signed(sub_ln38_2_reg_812);

assign sext_ln38_3_fu_450_p1 = $signed(sub_ln38_3_fu_444_p2);

assign sext_ln38_4_fu_564_p1 = $signed(sub_ln38_4_reg_817);

assign sext_ln38_5_fu_468_p1 = $signed(sub_ln38_5_fu_462_p2);

assign sext_ln38_6_fu_573_p1 = $signed(sub_ln38_6_reg_822);

assign sext_ln38_7_fu_486_p1 = $signed(sub_ln38_7_fu_480_p2);

assign sext_ln38_8_fu_582_p1 = grp_fu_638_p3;

assign sext_ln38_9_fu_585_p1 = grp_fu_647_p3;

assign sext_ln38_fu_546_p1 = $signed(sub_ln38_reg_807);

assign sub_ln38_1_fu_426_p2 = (zext_ln38_3_fu_418_p1 - zext_ln38_4_fu_422_p1);

assign sub_ln38_2_fu_512_p2 = (zext_ln38_5_fu_504_p1 - zext_ln38_6_fu_508_p1);

assign sub_ln38_3_fu_444_p2 = (zext_ln38_7_fu_436_p1 - zext_ln38_8_fu_440_p1);

assign sub_ln38_4_fu_526_p2 = (zext_ln38_9_fu_518_p1 - zext_ln38_10_fu_522_p1);

assign sub_ln38_5_fu_462_p2 = (zext_ln38_11_fu_454_p1 - zext_ln38_12_fu_458_p1);

assign sub_ln38_6_fu_540_p2 = (zext_ln38_13_fu_532_p1 - zext_ln38_14_fu_536_p1);

assign sub_ln38_7_fu_480_p2 = (zext_ln38_15_fu_472_p1 - zext_ln38_16_fu_476_p1);

assign sub_ln38_fu_498_p2 = (zext_ln38_1_fu_490_p1 - zext_ln38_2_fu_494_p1);

assign tmp_fu_377_p3 = i_fu_136[32'd6];

assign zext_ln38_10_fu_522_p1 = B_4_q0;

assign zext_ln38_11_fu_454_p1 = A_5_q0;

assign zext_ln38_12_fu_458_p1 = B_5_q0;

assign zext_ln38_13_fu_532_p1 = A_6_q0;

assign zext_ln38_14_fu_536_p1 = B_6_q0;

assign zext_ln38_15_fu_472_p1 = A_7_q0;

assign zext_ln38_16_fu_476_p1 = B_7_q0;

assign zext_ln38_1_fu_490_p1 = A_0_q0;

assign zext_ln38_2_fu_494_p1 = B_0_q0;

assign zext_ln38_3_fu_418_p1 = A_1_q0;

assign zext_ln38_4_fu_422_p1 = B_1_q0;

assign zext_ln38_5_fu_504_p1 = A_2_q0;

assign zext_ln38_6_fu_508_p1 = B_2_q0;

assign zext_ln38_7_fu_436_p1 = A_3_q0;

assign zext_ln38_8_fu_440_p1 = B_3_q0;

assign zext_ln38_9_fu_518_p1 = A_4_q0;

assign zext_ln38_fu_395_p1 = lshr_ln_fu_385_p4;

always @ (posedge ap_clk) begin
    zext_ln38_reg_691[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //eucHW
