-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eucDistHW_log_99_33_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (98 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (71 downto 0) );
end;


architecture behav of eucDistHW_log_99_33_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv72_0 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv99_1 : STD_LOGIC_VECTOR (98 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv107_0 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv109_1800000000000000000000000000 : STD_LOGIC_VECTOR (108 downto 0) := "1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv109_1 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv88_2C5C85FDF473DE6AF278E : STD_LOGIC_VECTOR (87 downto 0) := "0000001011000101110010000101111111011111010001110011110111100110101011110010011110001110";
    constant ap_const_lv23_400000 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv44_0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal log_apfixed_reduce_log_inverse_lut_table_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_inverse_lut_table_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_inverse_lut_table_array_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_q0 : STD_LOGIC_VECTOR (81 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_q0 : STD_LOGIC_VECTOR (77 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_q0 : STD_LOGIC_VECTOR (74 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_q0 : STD_LOGIC_VECTOR (69 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_q0 : STD_LOGIC_VECTOR (64 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_ce0 : STD_LOGIC;
    signal log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln1504_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1504_reg_1290 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_100_fu_400_p4 : STD_LOGIC_VECTOR (109 downto 0);
    signal icmp_ln731_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln731_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_exp_V_3_fu_473_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln527_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln527_reg_1325 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln731_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_frac_tilde_inverse_V_reg_1335 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_reg_1345 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_15_reg_1351 : STD_LOGIC_VECTOR (80 downto 0);
    signal tmp_43_reg_1357 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1362 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_18_reg_1367 : STD_LOGIC_VECTOR (76 downto 0);
    signal select_ln1340_fu_652_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal select_ln1340_reg_1372 : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_665_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal r_V_14_reg_1387 : STD_LOGIC_VECTOR (84 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_19_reg_1392 : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_20_reg_1398 : STD_LOGIC_VECTOR (68 downto 0);
    signal tmp_21_reg_1403 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_732_p2 : STD_LOGIC_VECTOR (80 downto 0);
    signal r_V_15_reg_1419 : STD_LOGIC_VECTOR (80 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_22_reg_1424 : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_23_reg_1430 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1435 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_819_p2 : STD_LOGIC_VECTOR (75 downto 0);
    signal r_V_16_reg_1451 : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_25_reg_1456 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_26_reg_1462 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_27_reg_1467 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_906_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal r_V_17_reg_1483 : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_28_reg_1488 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_29_reg_1494 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_30_reg_1499 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_993_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal r_V_18_reg_1520 : STD_LOGIC_VECTOR (65 downto 0);
    signal tmp_31_reg_1525 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_32_reg_1530 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln1122_fu_1078_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal log_sum_V_reg_1551 : STD_LOGIC_VECTOR (81 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal logn_V_1_reg_1561 : STD_LOGIC_VECTOR (74 downto 0);
    signal rhs_s_reg_1581 : STD_LOGIC_VECTOR (56 downto 0);
    signal logn_V_reg_1586 : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal logn_V_2_reg_1591 : STD_LOGIC_VECTOR (69 downto 0);
    signal trunc_ln1_reg_1596 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_33_reg_1602 : STD_LOGIC_VECTOR (81 downto 0);
    signal add_ln666_fu_1164_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln666_reg_1607 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln666_3_fu_1170_p2 : STD_LOGIC_VECTOR (81 downto 0);
    signal add_ln666_3_reg_1612 : STD_LOGIC_VECTOR (81 downto 0);
    signal add_ln666_2_fu_1200_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal add_ln666_2_reg_1618 : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal add_ln666_4_fu_1209_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln666_4_reg_1624 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln666_7_fu_1224_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal add_ln666_7_reg_1629 : STD_LOGIC_VECTOR (87 downto 0);
    signal p_Result_101_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal r_V_11_reg_1639 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_phi_mux_r_V_2_phi_fu_350_p4 : STD_LOGIC_VECTOR (109 downto 0);
    signal r_V_2_reg_347 : STD_LOGIC_VECTOR (109 downto 0);
    signal r_V_13_fu_458_p3 : STD_LOGIC_VECTOR (109 downto 0);
    signal ap_phi_mux_bit_select_i292_lcssa_phi_fu_361_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_select_i292_lcssa_reg_357 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_exp_013_lcssa_reg_368 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_r_V_12_phi_fu_383_p4 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_12_reg_379 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal zext_ln527_2_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln527_1_fu_1087_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln527_3_fu_1091_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln527_4_fu_1095_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln527_5_fu_1099_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_34_fu_242 : STD_LOGIC_VECTOR (108 downto 0);
    signal shl_ln1305_fu_467_p2 : STD_LOGIC_VECTOR (108 downto 0);
    signal p_Result_121_cast_fu_410_p3 : STD_LOGIC_VECTOR (108 downto 0);
    signal b_exp_V_fu_246 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln594_fu_396_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_fu_418_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln_fu_428_p3 : STD_LOGIC_VECTOR (108 downto 0);
    signal tmp_s_fu_488_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln731_1_fu_498_p3 : STD_LOGIC_VECTOR (108 downto 0);
    signal tmp_39_fu_512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln731_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln731_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_102_fu_544_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_44_fu_554_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal index0_V_fu_564_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_580_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_580_p2 : STD_LOGIC_VECTOR (109 downto 0);
    signal sf_fu_634_p3 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_17_fu_641_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal zext_ln1340_fu_648_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_665_p0 : STD_LOGIC_VECTOR (80 downto 0);
    signal grp_fu_665_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_fu_671_p3 : STD_LOGIC_VECTOR (84 downto 0);
    signal zext_ln1199_fu_678_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal ret_V_11_fu_682_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal zext_ln1200_fu_687_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal ret_V_2_fu_690_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_732_p0 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_732_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_2_fu_745_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal eZ_fu_738_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal zext_ln1199_1_fu_752_p1 : STD_LOGIC_VECTOR (83 downto 0);
    signal zext_ln666_fu_756_p1 : STD_LOGIC_VECTOR (83 downto 0);
    signal rhs_3_fu_766_p3 : STD_LOGIC_VECTOR (81 downto 0);
    signal ret_V_12_fu_760_p2 : STD_LOGIC_VECTOR (83 downto 0);
    signal zext_ln1200_1_fu_773_p1 : STD_LOGIC_VECTOR (83 downto 0);
    signal ret_V_4_fu_777_p2 : STD_LOGIC_VECTOR (83 downto 0);
    signal grp_fu_819_p0 : STD_LOGIC_VECTOR (69 downto 0);
    signal grp_fu_819_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_4_fu_832_p3 : STD_LOGIC_VECTOR (87 downto 0);
    signal eZ_1_fu_825_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal zext_ln1199_2_fu_839_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln666_1_fu_843_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal rhs_6_fu_853_p3 : STD_LOGIC_VECTOR (81 downto 0);
    signal ret_V_13_fu_847_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln1200_2_fu_860_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal ret_V_6_fu_864_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal grp_fu_906_p0 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_906_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_6_fu_919_p3 : STD_LOGIC_VECTOR (92 downto 0);
    signal eZ_2_fu_912_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal zext_ln1199_3_fu_926_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal zext_ln666_2_fu_930_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal rhs_9_fu_940_p3 : STD_LOGIC_VECTOR (81 downto 0);
    signal ret_V_14_fu_934_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal zext_ln1200_3_fu_947_p1 : STD_LOGIC_VECTOR (93 downto 0);
    signal ret_V_8_fu_951_p2 : STD_LOGIC_VECTOR (93 downto 0);
    signal grp_fu_993_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_993_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1003_p1 : STD_LOGIC_VECTOR (82 downto 0);
    signal lhs_8_fu_1016_p3 : STD_LOGIC_VECTOR (97 downto 0);
    signal eZ_3_fu_1009_p3 : STD_LOGIC_VECTOR (82 downto 0);
    signal zext_ln1199_4_fu_1023_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal zext_ln666_3_fu_1027_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal rhs_12_fu_1037_p3 : STD_LOGIC_VECTOR (81 downto 0);
    signal ret_V_15_fu_1031_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal zext_ln1200_4_fu_1044_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal ret_V_10_fu_1048_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal grp_fu_1081_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1081_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1081_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal lhs_V_fu_1124_p3 : STD_LOGIC_VECTOR (84 downto 0);
    signal zext_ln1200_5_fu_1131_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal zext_ln1200_6_fu_1135_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal ret_V_fu_1138_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_1003_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal zext_ln387_3_fu_1120_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln387_2_fu_1116_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal zext_ln387_fu_1113_p1 : STD_LOGIC_VECTOR (81 downto 0);
    signal shl_ln_fu_1181_p3 : STD_LOGIC_VECTOR (87 downto 0);
    signal zext_ln387_1_fu_1175_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal add_ln666_1_fu_1195_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal zext_ln666_4_fu_1192_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal sext_ln666_fu_1188_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal sext_ln671_fu_1178_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal sext_ln666_2_fu_1206_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal add_ln666_5_fu_1218_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal sext_ln666_3_fu_1215_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal sext_ln666_1_fu_1233_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal add_ln666_6_fu_1236_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln666_5_fu_1230_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal log_base_V_2_fu_1241_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal zext_ln666_6_fu_1255_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal shl_ln666_1_fu_1263_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln778_fu_1258_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal sext_ln666_4_fu_1270_p1 : STD_LOGIC_VECTOR (87 downto 0);
    signal log_base_V_fu_1274_p2 : STD_LOGIC_VECTOR (87 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal grp_fu_580_p10 : STD_LOGIC_VECTOR (109 downto 0);
    signal grp_fu_665_p00 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_665_p10 : STD_LOGIC_VECTOR (84 downto 0);
    signal grp_fu_732_p00 : STD_LOGIC_VECTOR (80 downto 0);
    signal grp_fu_732_p10 : STD_LOGIC_VECTOR (80 downto 0);
    signal grp_fu_819_p00 : STD_LOGIC_VECTOR (75 downto 0);
    signal grp_fu_819_p10 : STD_LOGIC_VECTOR (75 downto 0);
    signal grp_fu_906_p00 : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_fu_906_p10 : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_fu_993_p00 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_993_p10 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component eucDistHW_mul_110s_6ns_110_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (109 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (109 downto 0) );
    end component;


    component eucDistHW_mul_81ns_4ns_85_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (80 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (84 downto 0) );
    end component;


    component eucDistHW_mul_75ns_6ns_81_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (74 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (80 downto 0) );
    end component;


    component eucDistHW_mul_70ns_6ns_76_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (69 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (75 downto 0) );
    end component;


    component eucDistHW_mul_65ns_6ns_71_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (64 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (70 downto 0) );
    end component;


    component eucDistHW_mul_60ns_6ns_66_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (59 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (65 downto 0) );
    end component;


    component eucDistHW_mul_7s_83ns_88_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (82 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (87 downto 0) );
    end component;


    component eucDistHW_mul_29ns_29ns_58_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component eucDistHW_log_99_33_s_log_apfixed_reduce_log_inverse_lut_table_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component eucDistHW_log_99_33_s_log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (81 downto 0) );
    end component;


    component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (77 downto 0) );
    end component;


    component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_meOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (69 downto 0) );
    end component;


    component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;



begin
    log_apfixed_reduce_log_inverse_lut_table_array_V_U : component eucDistHW_log_99_33_s_log_apfixed_reduce_log_inverse_lut_table_array_V
    generic map (
        DataWidth => 6,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_inverse_lut_table_array_V_address0,
        ce0 => log_apfixed_reduce_log_inverse_lut_table_array_V_ce0,
        q0 => log_apfixed_reduce_log_inverse_lut_table_array_V_q0);

    log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_U : component eucDistHW_log_99_33_s_log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_bkb
    generic map (
        DataWidth => 82,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_address0,
        ce0 => log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_ce0,
        q0 => log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_U : component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mcud
    generic map (
        DataWidth => 78,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_U : component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mdEe
    generic map (
        DataWidth => 75,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_U : component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_meOg
    generic map (
        DataWidth => 70,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_U : component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mfYi
    generic map (
        DataWidth => 65,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_q0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_U : component eucDistHW_log_99_33_s_log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mg8j
    generic map (
        DataWidth => 60,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_address0,
        ce0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_ce0,
        q0 => log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_q0);

    mul_110s_6ns_110_5_1_U1 : component eucDistHW_mul_110s_6ns_110_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 110,
        din1_WIDTH => 6,
        dout_WIDTH => 110)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_2_reg_347,
        din1 => grp_fu_580_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_580_p2);

    mul_81ns_4ns_85_5_1_U2 : component eucDistHW_mul_81ns_4ns_85_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 81,
        din1_WIDTH => 4,
        dout_WIDTH => 85)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_665_p0,
        din1 => grp_fu_665_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_665_p2);

    mul_75ns_6ns_81_5_1_U3 : component eucDistHW_mul_75ns_6ns_81_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 75,
        din1_WIDTH => 6,
        dout_WIDTH => 81)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_732_p0,
        din1 => grp_fu_732_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_732_p2);

    mul_70ns_6ns_76_5_1_U4 : component eucDistHW_mul_70ns_6ns_76_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 70,
        din1_WIDTH => 6,
        dout_WIDTH => 76)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_819_p0,
        din1 => grp_fu_819_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_819_p2);

    mul_65ns_6ns_71_5_1_U5 : component eucDistHW_mul_65ns_6ns_71_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 65,
        din1_WIDTH => 6,
        dout_WIDTH => 71)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_906_p0,
        din1 => grp_fu_906_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_906_p2);

    mul_60ns_6ns_66_5_1_U6 : component eucDistHW_mul_60ns_6ns_66_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 60,
        din1_WIDTH => 6,
        dout_WIDTH => 66)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_993_p0,
        din1 => grp_fu_993_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_993_p2);

    mul_7s_83ns_88_5_1_U7 : component eucDistHW_mul_7s_83ns_88_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 7,
        din1_WIDTH => 83,
        dout_WIDTH => 88)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_exp_013_lcssa_reg_368,
        din1 => grp_fu_1003_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1003_p2);

    mul_29ns_29ns_58_2_1_U8 : component eucDistHW_mul_29ns_29ns_58_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 29,
        din1_WIDTH => 29,
        dout_WIDTH => 58)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1081_p0,
        din1 => grp_fu_1081_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1081_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv72_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_return_preg <= ap_phi_mux_r_V_12_phi_fu_383_p4;
                end if; 
            end if;
        end if;
    end process;


    b_exp_013_lcssa_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln731_fu_526_p3 = ap_const_lv1_1) and (icmp_ln731_reg_1299 = ap_const_lv1_0))) then 
                b_exp_013_lcssa_reg_368 <= b_exp_V_3_fu_473_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_436_p2 = ap_const_lv1_1) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_0))) then 
                b_exp_013_lcssa_reg_368 <= ap_const_lv7_20;
            end if; 
        end if;
    end process;

    b_exp_V_fu_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_436_p2 = ap_const_lv1_0) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_0))) then 
                b_exp_V_fu_246 <= ap_const_lv7_20;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln731_fu_526_p3 = ap_const_lv1_0) and (icmp_ln731_reg_1299 = ap_const_lv1_0))) then 
                b_exp_V_fu_246 <= b_exp_V_3_fu_473_p2;
            end if; 
        end if;
    end process;

    bit_select_i292_lcssa_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln731_fu_526_p3 = ap_const_lv1_1) and (icmp_ln731_reg_1299 = ap_const_lv1_0))) then 
                bit_select_i292_lcssa_reg_357 <= p_Val2_34_fu_242(108 downto 108);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_436_p2 = ap_const_lv1_1) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_0))) then 
                bit_select_i292_lcssa_reg_357 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    p_Val2_34_fu_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_436_p2 = ap_const_lv1_0) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_0))) then 
                                p_Val2_34_fu_242(108 downto 11) <= p_Result_121_cast_fu_410_p3(108 downto 11);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln731_fu_526_p3 = ap_const_lv1_0) and (icmp_ln731_reg_1299 = ap_const_lv1_0))) then 
                                p_Val2_34_fu_242(108 downto 11) <= shl_ln1305_fu_467_p2(108 downto 11);
            end if; 
        end if;
    end process;

    r_V_12_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_1))) then 
                r_V_12_reg_379 <= ap_const_lv72_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln1504_reg_1290 = ap_const_lv1_0))) then 
                r_V_12_reg_379 <= r_V_11_reg_1639;
            end if; 
        end if;
    end process;

    r_V_2_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln731_fu_526_p3 = ap_const_lv1_1) and (icmp_ln731_reg_1299 = ap_const_lv1_0))) then 
                                r_V_2_reg_347(109 downto 11) <= r_V_13_fu_458_p3(109 downto 11);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln731_fu_436_p2 = ap_const_lv1_1) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_0))) then 
                                r_V_2_reg_347(109 downto 11) <= p_Result_100_fu_400_p4(109 downto 11);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                a_reg_1345 <= grp_fu_580_p2(109 downto 106);
                tmp_15_reg_1351 <= grp_fu_580_p2(109 downto 29);
                tmp_16_reg_1362 <= grp_fu_580_p2(109 downto 30);
                tmp_18_reg_1367 <= grp_fu_580_p2(105 downto 29);
                tmp_43_reg_1357 <= grp_fu_580_p2(109 downto 109);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                add_ln666_2_reg_1618 <= add_ln666_2_fu_1200_p2;
                add_ln666_4_reg_1624 <= add_ln666_4_fu_1209_p2;
                add_ln666_7_reg_1629 <= add_ln666_7_fu_1224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln666_3_reg_1612 <= add_ln666_3_fu_1170_p2;
                add_ln666_reg_1607 <= add_ln666_fu_1164_p2;
                logn_V_2_reg_1591 <= log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_q0;
                logn_V_reg_1586 <= log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_q0;
                tmp_33_reg_1602 <= grp_fu_1003_p2(87 downto 6);
                trunc_ln1_reg_1596 <= ret_V_fu_1138_p2(85 downto 30);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                b_frac_tilde_inverse_V_reg_1335 <= log_apfixed_reduce_log_inverse_lut_table_array_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1504_reg_1290 <= icmp_ln1504_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_0))) then
                icmp_ln731_reg_1299 <= icmp_ln731_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                log_sum_V_reg_1551 <= log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_q0;
                logn_V_1_reg_1561 <= log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_q0;
                rhs_s_reg_1581 <= grp_fu_1081_p2(57 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                p_Result_101_reg_1634 <= log_base_V_2_fu_1241_p2(88 downto 88);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                r_V_11_reg_1639 <= log_base_V_fu_1274_p2(87 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                r_V_14_reg_1387 <= grp_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                r_V_15_reg_1419 <= grp_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                r_V_16_reg_1451 <= grp_fu_819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                r_V_17_reg_1483 <= grp_fu_906_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                r_V_18_reg_1520 <= grp_fu_993_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    select_ln1340_reg_1372(80 downto 0) <= select_ln1340_fu_652_p3(80 downto 0);    select_ln1340_reg_1372(85 downto 84) <= select_ln1340_fu_652_p3(85 downto 84);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_19_reg_1392 <= ret_V_2_fu_690_p2(85 downto 11);
                tmp_20_reg_1398 <= ret_V_2_fu_690_p2(79 downto 11);
                tmp_21_reg_1403 <= ret_V_2_fu_690_p2(85 downto 80);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_22_reg_1424 <= ret_V_4_fu_777_p2(83 downto 14);
                tmp_23_reg_1430 <= ret_V_4_fu_777_p2(77 downto 14);
                tmp_24_reg_1435 <= ret_V_4_fu_777_p2(83 downto 78);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_25_reg_1456 <= ret_V_6_fu_864_p2(88 downto 24);
                tmp_26_reg_1462 <= ret_V_6_fu_864_p2(82 downto 24);
                tmp_27_reg_1467 <= ret_V_6_fu_864_p2(88 downto 83);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_28_reg_1488 <= ret_V_8_fu_951_p2(93 downto 34);
                tmp_29_reg_1494 <= ret_V_8_fu_951_p2(87 downto 34);
                tmp_30_reg_1499 <= ret_V_8_fu_951_p2(93 downto 88);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_31_reg_1525 <= ret_V_10_fu_1048_p2(98 downto 44);
                tmp_32_reg_1530 <= ret_V_10_fu_1048_p2(98 downto 70);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((select_ln731_fu_526_p3 = ap_const_lv1_1) or (icmp_ln731_reg_1299 = ap_const_lv1_1)))) then
                    zext_ln527_reg_1325(5 downto 0) <= zext_ln527_fu_572_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln527_reg_1325(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    select_ln1340_reg_1372(83 downto 81) <= "000";
    r_V_2_reg_347(10 downto 0) <= "00000000000";
    p_Val2_34_fu_242(10 downto 0) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1504_fu_390_p2, icmp_ln731_reg_1299, ap_CS_fsm_state2, select_ln731_fu_526_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1504_fu_390_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((select_ln731_fu_526_p3 = ap_const_lv1_1) or (icmp_ln731_reg_1299 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln666_1_fu_1195_p2 <= std_logic_vector(unsigned(zext_ln387_1_fu_1175_p1) + unsigned(logn_V_reg_1586));
    add_ln666_2_fu_1200_p2 <= std_logic_vector(unsigned(add_ln666_1_fu_1195_p2) + unsigned(zext_ln666_4_fu_1192_p1));
    add_ln666_3_fu_1170_p2 <= std_logic_vector(unsigned(zext_ln387_fu_1113_p1) + unsigned(log_sum_V_reg_1551));
    add_ln666_4_fu_1209_p2 <= std_logic_vector(signed(sext_ln666_fu_1188_p1) + signed(sext_ln671_fu_1178_p1));
    add_ln666_5_fu_1218_p2 <= std_logic_vector(signed(shl_ln_fu_1181_p3) + signed(sext_ln666_2_fu_1206_p1));
    add_ln666_6_fu_1236_p2 <= std_logic_vector(unsigned(add_ln666_4_reg_1624) + unsigned(sext_ln666_1_fu_1233_p1));
    add_ln666_7_fu_1224_p2 <= std_logic_vector(unsigned(add_ln666_5_fu_1218_p2) + unsigned(sext_ln666_3_fu_1215_p1));
    add_ln666_fu_1164_p2 <= std_logic_vector(unsigned(zext_ln387_3_fu_1120_p1) + unsigned(zext_ln387_2_fu_1116_p1));
    add_ln778_fu_1258_p2 <= std_logic_vector(unsigned(add_ln666_7_reg_1629) + unsigned(zext_ln666_6_fu_1255_p1));
    and_ln731_1_fu_498_p3 <= (tmp_s_fu_488_p4 & ap_const_lv107_0);
    and_ln_fu_428_p3 <= (tmp_fu_418_p4 & ap_const_lv107_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_bit_select_i292_lcssa_phi_fu_361_p4_assign_proc : process(icmp_ln731_reg_1299, ap_CS_fsm_state2, select_ln731_fu_526_p3, bit_select_i292_lcssa_reg_357, p_Val2_34_fu_242)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln731_fu_526_p3 = ap_const_lv1_1) and (icmp_ln731_reg_1299 = ap_const_lv1_0))) then 
            ap_phi_mux_bit_select_i292_lcssa_phi_fu_361_p4 <= p_Val2_34_fu_242(108 downto 108);
        else 
            ap_phi_mux_bit_select_i292_lcssa_phi_fu_361_p4 <= bit_select_i292_lcssa_reg_357;
        end if; 
    end process;


    ap_phi_mux_r_V_12_phi_fu_383_p4_assign_proc : process(icmp_ln1504_reg_1290, r_V_11_reg_1639, r_V_12_reg_379, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln1504_reg_1290 = ap_const_lv1_0))) then 
            ap_phi_mux_r_V_12_phi_fu_383_p4 <= r_V_11_reg_1639;
        else 
            ap_phi_mux_r_V_12_phi_fu_383_p4 <= r_V_12_reg_379;
        end if; 
    end process;


    ap_phi_mux_r_V_2_phi_fu_350_p4_assign_proc : process(icmp_ln731_reg_1299, ap_CS_fsm_state2, select_ln731_fu_526_p3, r_V_2_reg_347, r_V_13_fu_458_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (select_ln731_fu_526_p3 = ap_const_lv1_1) and (icmp_ln731_reg_1299 = ap_const_lv1_0))) then 
            ap_phi_mux_r_V_2_phi_fu_350_p4 <= r_V_13_fu_458_p3;
        else 
            ap_phi_mux_r_V_2_phi_fu_350_p4 <= r_V_2_reg_347;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_r_V_12_phi_fu_383_p4, ap_CS_fsm_state45, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_return <= ap_phi_mux_r_V_12_phi_fu_383_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    b_exp_V_3_fu_473_p2 <= std_logic_vector(unsigned(b_exp_V_fu_246) + unsigned(ap_const_lv7_7F));
    eZ_1_fu_825_p3 <= (ap_const_lv13_1000 & tmp_22_reg_1424);
    eZ_2_fu_912_p3 <= (ap_const_lv18_20000 & tmp_25_reg_1456);
    eZ_3_fu_1009_p3 <= (ap_const_lv23_400000 & tmp_28_reg_1488);
    eZ_fu_738_p3 <= (ap_const_lv8_80 & tmp_19_reg_1392);
    grp_fu_1003_p1 <= ap_const_lv88_2C5C85FDF473DE6AF278E(83 - 1 downto 0);
    grp_fu_1081_p0 <= zext_ln1122_fu_1078_p1(29 - 1 downto 0);
    grp_fu_1081_p1 <= zext_ln1122_fu_1078_p1(29 - 1 downto 0);
    grp_fu_580_p1 <= grp_fu_580_p10(6 - 1 downto 0);
    grp_fu_580_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_frac_tilde_inverse_V_reg_1335),110));
    grp_fu_665_p0 <= grp_fu_665_p00(81 - 1 downto 0);
    grp_fu_665_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_1351),85));
    grp_fu_665_p1 <= grp_fu_665_p10(4 - 1 downto 0);
    grp_fu_665_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_1345),85));
    grp_fu_732_p0 <= grp_fu_732_p00(75 - 1 downto 0);
    grp_fu_732_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_reg_1392),81));
    grp_fu_732_p1 <= grp_fu_732_p10(6 - 1 downto 0);
    grp_fu_732_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_1403),81));
    grp_fu_819_p0 <= grp_fu_819_p00(70 - 1 downto 0);
    grp_fu_819_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_1424),76));
    grp_fu_819_p1 <= grp_fu_819_p10(6 - 1 downto 0);
    grp_fu_819_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1435),76));
    grp_fu_906_p0 <= grp_fu_906_p00(65 - 1 downto 0);
    grp_fu_906_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_1456),71));
    grp_fu_906_p1 <= grp_fu_906_p10(6 - 1 downto 0);
    grp_fu_906_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_reg_1467),71));
    grp_fu_993_p0 <= grp_fu_993_p00(60 - 1 downto 0);
    grp_fu_993_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_reg_1488),66));
    grp_fu_993_p1 <= grp_fu_993_p10(6 - 1 downto 0);
    grp_fu_993_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_1499),66));
    icmp_ln1504_fu_390_p2 <= "1" when (signed(x) < signed(ap_const_lv99_1)) else "0";
    icmp_ln731_1_fu_506_p2 <= "1" when (and_ln731_1_fu_498_p3 = ap_const_lv109_1800000000000000000000000000) else "0";
    icmp_ln731_fu_436_p2 <= "1" when (and_ln_fu_428_p3 = ap_const_lv109_1800000000000000000000000000) else "0";
    index0_V_fu_564_p3 <= 
        p_Result_s_102_fu_544_p4 when (ap_phi_mux_bit_select_i292_lcssa_phi_fu_361_p4(0) = '1') else 
        p_Result_44_fu_554_p4;
    lhs_2_fu_745_p3 <= (tmp_20_reg_1398 & ap_const_lv14_0);
    lhs_4_fu_832_p3 <= (tmp_23_reg_1430 & ap_const_lv24_0);
    lhs_6_fu_919_p3 <= (tmp_26_reg_1462 & ap_const_lv34_0);
    lhs_8_fu_1016_p3 <= (tmp_29_reg_1494 & ap_const_lv44_0);
    lhs_V_fu_1124_p3 <= (tmp_31_reg_1525 & ap_const_lv30_0);
    lhs_fu_671_p3 <= (tmp_18_reg_1367 & ap_const_lv8_0);
    log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_address0 <= zext_ln527_reg_1325(6 - 1 downto 0);

    log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log0_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_0_5_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_inverse_lut_table_array_V_address0 <= zext_ln527_fu_572_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_inverse_lut_table_array_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            log_apfixed_reduce_log_inverse_lut_table_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_inverse_lut_table_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_address0 <= zext_ln527_3_fu_1091_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_12_6_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_address0 <= zext_ln527_4_fu_1095_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_address0 <= zext_ln527_5_fu_1099_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_address0 <= zext_ln527_1_fu_1087_p1(4 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_4_4_16_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_address0 <= zext_ln527_2_fu_1074_p1(6 - 1 downto 0);

    log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_ce0 <= ap_const_logic_1;
        else 
            log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_7_6_64_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_base_V_2_fu_1241_p2 <= std_logic_vector(unsigned(add_ln666_6_fu_1236_p2) + unsigned(zext_ln666_5_fu_1230_p1));
    log_base_V_fu_1274_p2 <= std_logic_vector(unsigned(add_ln778_fu_1258_p2) + unsigned(sext_ln666_4_fu_1270_p1));
    p_Result_100_fu_400_p4 <= ((ap_const_lv1_0 & trunc_ln594_fu_396_p1) & ap_const_lv11_0);
    p_Result_121_cast_fu_410_p3 <= (trunc_ln594_fu_396_p1 & ap_const_lv11_0);
    p_Result_44_fu_554_p4 <= ap_phi_mux_r_V_2_phi_fu_350_p4(107 downto 102);
    p_Result_s_102_fu_544_p4 <= ap_phi_mux_r_V_2_phi_fu_350_p4(108 downto 103);
    p_Result_s_fu_479_p3 <= p_Val2_34_fu_242(108 downto 108);
    r_V_13_fu_458_p3 <= (p_Val2_34_fu_242 & ap_const_lv1_0);
    ret_V_10_fu_1048_p2 <= std_logic_vector(unsigned(ret_V_15_fu_1031_p2) - unsigned(zext_ln1200_4_fu_1044_p1));
    ret_V_11_fu_682_p2 <= std_logic_vector(unsigned(zext_ln1199_fu_678_p1) + unsigned(select_ln1340_reg_1372));
    ret_V_12_fu_760_p2 <= std_logic_vector(unsigned(zext_ln1199_1_fu_752_p1) + unsigned(zext_ln666_fu_756_p1));
    ret_V_13_fu_847_p2 <= std_logic_vector(unsigned(zext_ln1199_2_fu_839_p1) + unsigned(zext_ln666_1_fu_843_p1));
    ret_V_14_fu_934_p2 <= std_logic_vector(unsigned(zext_ln1199_3_fu_926_p1) + unsigned(zext_ln666_2_fu_930_p1));
    ret_V_15_fu_1031_p2 <= std_logic_vector(unsigned(zext_ln1199_4_fu_1023_p1) + unsigned(zext_ln666_3_fu_1027_p1));
    ret_V_2_fu_690_p2 <= std_logic_vector(unsigned(ret_V_11_fu_682_p2) - unsigned(zext_ln1200_fu_687_p1));
    ret_V_4_fu_777_p2 <= std_logic_vector(unsigned(ret_V_12_fu_760_p2) - unsigned(zext_ln1200_1_fu_773_p1));
    ret_V_6_fu_864_p2 <= std_logic_vector(unsigned(ret_V_13_fu_847_p2) - unsigned(zext_ln1200_2_fu_860_p1));
    ret_V_8_fu_951_p2 <= std_logic_vector(unsigned(ret_V_14_fu_934_p2) - unsigned(zext_ln1200_3_fu_947_p1));
    ret_V_fu_1138_p2 <= std_logic_vector(unsigned(zext_ln1200_5_fu_1131_p1) - unsigned(zext_ln1200_6_fu_1135_p1));
    rhs_12_fu_1037_p3 <= (r_V_18_reg_1520 & ap_const_lv16_0);
    rhs_3_fu_766_p3 <= (r_V_15_reg_1419 & ap_const_lv1_0);
    rhs_6_fu_853_p3 <= (r_V_16_reg_1451 & ap_const_lv6_0);
    rhs_9_fu_940_p3 <= (r_V_17_reg_1483 & ap_const_lv11_0);
    select_ln1340_fu_652_p3 <= 
        tmp_17_fu_641_p3 when (tmp_43_reg_1357(0) = '1') else 
        zext_ln1340_fu_648_p1;
    select_ln731_fu_526_p3 <= 
        xor_ln731_fu_520_p2 when (p_Result_s_fu_479_p3(0) = '1') else 
        icmp_ln731_1_fu_506_p2;
        sext_ln666_1_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln666_3_reg_1612),89));

        sext_ln666_2_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1596),88));

        sext_ln666_3_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln666_3_reg_1612),88));

        sext_ln666_4_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln666_1_fu_1263_p3),88));

        sext_ln666_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1181_p3),89));

        sext_ln671_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1596),89));

    sf_fu_634_p3 <= (ap_const_lv5_10 & tmp_16_reg_1362);
    shl_ln1305_fu_467_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_34_fu_242),to_integer(unsigned('0' & ap_const_lv109_1(31-1 downto 0)))));
    shl_ln666_1_fu_1263_p3 <= (p_Result_101_reg_1634 & ap_const_lv16_8000);
    shl_ln_fu_1181_p3 <= (tmp_33_reg_1602 & ap_const_lv6_0);
    tmp_17_fu_641_p3 <= (ap_const_lv5_10 & tmp_15_reg_1351);
    tmp_39_fu_512_p3 <= p_Val2_34_fu_242(107 downto 107);
    tmp_fu_418_p4 <= x(97 downto 96);
    tmp_s_fu_488_p4 <= p_Val2_34_fu_242(107 downto 106);
    trunc_ln594_fu_396_p1 <= x(98 - 1 downto 0);
    xor_ln731_fu_520_p2 <= (tmp_39_fu_512_p3 xor ap_const_lv1_1);
    zext_ln1122_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_reg_1530),58));
    zext_ln1199_1_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_2_fu_745_p3),84));
    zext_ln1199_2_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_4_fu_832_p3),89));
    zext_ln1199_3_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_6_fu_919_p3),94));
    zext_ln1199_4_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_8_fu_1016_p3),99));
    zext_ln1199_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_671_p3),86));
    zext_ln1200_1_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_3_fu_766_p3),84));
    zext_ln1200_2_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_6_fu_853_p3),89));
    zext_ln1200_3_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_9_fu_940_p3),94));
    zext_ln1200_4_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_12_fu_1037_p3),99));
    zext_ln1200_5_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_1124_p3),86));
    zext_ln1200_6_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_s_reg_1581),86));
    zext_ln1200_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_14_reg_1387),86));
    zext_ln1340_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_fu_634_p3),86));
    zext_ln387_1_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn_V_2_reg_1591),78));
    zext_ln387_2_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_17_6_64_array_V_q0),66));
    zext_ln387_3_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(log_apfixed_reduce_log_lut_table_ap_fixed_89_7_ap_q_mode_5_ap_o_mode_3_0_22_6_64_array_V_q0),66));
    zext_ln387_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logn_V_1_reg_1561),82));
    zext_ln527_1_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_1345),64));
    zext_ln527_2_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_1403),64));
    zext_ln527_3_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1435),64));
    zext_ln527_4_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_reg_1467),64));
    zext_ln527_5_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_1499),64));
    zext_ln527_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index0_V_fu_564_p3),64));
    zext_ln666_1_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_1_fu_825_p3),89));
    zext_ln666_2_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_2_fu_912_p3),94));
    zext_ln666_3_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_3_fu_1009_p3),99));
    zext_ln666_4_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln666_reg_1607),78));
    zext_ln666_5_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln666_2_reg_1618),89));
    zext_ln666_6_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln666_2_reg_1618),88));
    zext_ln666_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_fu_738_p3),84));
end behav;
