// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module eucHW_eucHW_Pipeline_VITIS_LOOP_34_25 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_array_15_8_reload,
        out_array_14_8_reload,
        out_array_13_8_reload,
        out_array_12_8_reload,
        out_array_11_8_reload,
        out_array_10_8_reload,
        out_array_9_8_reload,
        out_array_8_8_reload,
        out_array_7_8_reload,
        out_array_6_8_reload,
        out_array_5_8_reload,
        out_array_4_8_reload,
        out_array_3_8_reload,
        out_array_2_8_reload,
        out_array_1_8_reload,
        out_array_0_8_reload,
        out_array_30_8_reload,
        out_array_29_8_reload,
        out_array_28_8_reload,
        out_array_27_8_reload,
        out_array_26_8_reload,
        out_array_25_8_reload,
        out_array_24_8_reload,
        out_array_23_8_reload,
        out_array_22_8_reload,
        out_array_21_8_reload,
        out_array_20_8_reload,
        out_array_19_8_reload,
        out_array_18_8_reload,
        out_array_17_8_reload,
        out_array_16_8_reload,
        out_array_31_8_reload,
        out_array_15_10_out,
        out_array_15_10_out_ap_vld,
        out_array_14_10_out,
        out_array_14_10_out_ap_vld,
        out_array_13_10_out,
        out_array_13_10_out_ap_vld,
        out_array_12_10_out,
        out_array_12_10_out_ap_vld,
        out_array_11_10_out,
        out_array_11_10_out_ap_vld,
        out_array_10_10_out,
        out_array_10_10_out_ap_vld,
        out_array_9_10_out,
        out_array_9_10_out_ap_vld,
        out_array_8_10_out,
        out_array_8_10_out_ap_vld,
        out_array_7_10_out,
        out_array_7_10_out_ap_vld,
        out_array_6_10_out,
        out_array_6_10_out_ap_vld,
        out_array_5_10_out,
        out_array_5_10_out_ap_vld,
        out_array_4_10_out,
        out_array_4_10_out_ap_vld,
        out_array_3_10_out,
        out_array_3_10_out_ap_vld,
        out_array_2_10_out,
        out_array_2_10_out_ap_vld,
        out_array_1_10_out,
        out_array_1_10_out_ap_vld,
        out_array_0_10_out,
        out_array_0_10_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] out_array_15_8_reload;
input  [31:0] out_array_14_8_reload;
input  [31:0] out_array_13_8_reload;
input  [31:0] out_array_12_8_reload;
input  [31:0] out_array_11_8_reload;
input  [31:0] out_array_10_8_reload;
input  [31:0] out_array_9_8_reload;
input  [31:0] out_array_8_8_reload;
input  [31:0] out_array_7_8_reload;
input  [31:0] out_array_6_8_reload;
input  [31:0] out_array_5_8_reload;
input  [31:0] out_array_4_8_reload;
input  [31:0] out_array_3_8_reload;
input  [31:0] out_array_2_8_reload;
input  [31:0] out_array_1_8_reload;
input  [31:0] out_array_0_8_reload;
input  [31:0] out_array_30_8_reload;
input  [31:0] out_array_29_8_reload;
input  [31:0] out_array_28_8_reload;
input  [31:0] out_array_27_8_reload;
input  [31:0] out_array_26_8_reload;
input  [31:0] out_array_25_8_reload;
input  [31:0] out_array_24_8_reload;
input  [31:0] out_array_23_8_reload;
input  [31:0] out_array_22_8_reload;
input  [31:0] out_array_21_8_reload;
input  [31:0] out_array_20_8_reload;
input  [31:0] out_array_19_8_reload;
input  [31:0] out_array_18_8_reload;
input  [31:0] out_array_17_8_reload;
input  [31:0] out_array_16_8_reload;
input  [31:0] out_array_31_8_reload;
output  [31:0] out_array_15_10_out;
output   out_array_15_10_out_ap_vld;
output  [31:0] out_array_14_10_out;
output   out_array_14_10_out_ap_vld;
output  [31:0] out_array_13_10_out;
output   out_array_13_10_out_ap_vld;
output  [31:0] out_array_12_10_out;
output   out_array_12_10_out_ap_vld;
output  [31:0] out_array_11_10_out;
output   out_array_11_10_out_ap_vld;
output  [31:0] out_array_10_10_out;
output   out_array_10_10_out_ap_vld;
output  [31:0] out_array_9_10_out;
output   out_array_9_10_out_ap_vld;
output  [31:0] out_array_8_10_out;
output   out_array_8_10_out_ap_vld;
output  [31:0] out_array_7_10_out;
output   out_array_7_10_out_ap_vld;
output  [31:0] out_array_6_10_out;
output   out_array_6_10_out_ap_vld;
output  [31:0] out_array_5_10_out;
output   out_array_5_10_out_ap_vld;
output  [31:0] out_array_4_10_out;
output   out_array_4_10_out_ap_vld;
output  [31:0] out_array_3_10_out;
output   out_array_3_10_out_ap_vld;
output  [31:0] out_array_2_10_out;
output   out_array_2_10_out_ap_vld;
output  [31:0] out_array_1_10_out;
output   out_array_1_10_out_ap_vld;
output  [31:0] out_array_0_10_out;
output   out_array_0_10_out_ap_vld;

reg ap_idle;
reg out_array_15_10_out_ap_vld;
reg out_array_14_10_out_ap_vld;
reg out_array_13_10_out_ap_vld;
reg out_array_12_10_out_ap_vld;
reg out_array_11_10_out_ap_vld;
reg out_array_10_10_out_ap_vld;
reg out_array_9_10_out_ap_vld;
reg out_array_8_10_out_ap_vld;
reg out_array_7_10_out_ap_vld;
reg out_array_6_10_out_ap_vld;
reg out_array_5_10_out_ap_vld;
reg out_array_4_10_out_ap_vld;
reg out_array_3_10_out_ap_vld;
reg out_array_2_10_out_ap_vld;
reg out_array_1_10_out_ap_vld;
reg out_array_0_10_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln34_fu_616_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] trunc_ln38_fu_628_p1;
reg   [3:0] trunc_ln38_reg_1285;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] tem2_fu_900_p3;
reg   [31:0] tem2_reg_1290;
reg   [4:0] i_fu_156;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_4;
wire    ap_block_pp0_stage0;
wire   [4:0] add_ln34_fu_622_p2;
reg   [31:0] out_array_1_fu_160;
wire   [31:0] out_array_1_35_fu_998_p2;
reg   [31:0] out_array_1_19_fu_164;
reg   [31:0] out_array_1_20_fu_168;
reg   [31:0] out_array_1_21_fu_172;
reg   [31:0] out_array_1_22_fu_176;
reg   [31:0] out_array_1_23_fu_180;
reg   [31:0] out_array_1_24_fu_184;
reg   [31:0] out_array_1_25_fu_188;
reg   [31:0] out_array_1_26_fu_192;
reg   [31:0] out_array_1_27_fu_196;
reg   [31:0] out_array_1_28_fu_200;
reg   [31:0] out_array_1_29_fu_204;
reg   [31:0] out_array_1_30_fu_208;
reg   [31:0] out_array_1_31_fu_212;
reg   [31:0] out_array_1_32_fu_216;
reg   [31:0] out_array_1_33_fu_220;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln39_22_fu_716_p2;
wire   [0:0] icmp_ln39_21_fu_710_p2;
wire   [0:0] icmp_ln39_20_fu_704_p2;
wire   [0:0] icmp_ln39_19_fu_698_p2;
wire   [0:0] icmp_ln39_18_fu_692_p2;
wire   [0:0] icmp_ln39_17_fu_686_p2;
wire   [0:0] icmp_ln39_16_fu_680_p2;
wire   [0:0] icmp_ln39_15_fu_674_p2;
wire   [0:0] icmp_ln39_14_fu_668_p2;
wire   [0:0] icmp_ln39_13_fu_662_p2;
wire   [0:0] icmp_ln39_12_fu_656_p2;
wire   [0:0] icmp_ln39_11_fu_650_p2;
wire   [0:0] icmp_ln39_10_fu_644_p2;
wire   [0:0] icmp_ln39_9_fu_638_p2;
wire   [0:0] icmp_ln39_fu_632_p2;
wire   [0:0] or_ln39_fu_730_p2;
wire   [31:0] select_ln39_fu_722_p3;
wire   [31:0] select_ln39_9_fu_736_p3;
wire   [0:0] or_ln39_4_fu_744_p2;
wire   [0:0] or_ln39_5_fu_758_p2;
wire   [31:0] select_ln39_10_fu_750_p3;
wire   [31:0] select_ln39_11_fu_764_p3;
wire   [0:0] or_ln39_6_fu_772_p2;
wire   [0:0] or_ln39_7_fu_786_p2;
wire   [31:0] select_ln39_12_fu_778_p3;
wire   [31:0] select_ln39_13_fu_792_p3;
wire   [0:0] or_ln39_8_fu_800_p2;
wire   [0:0] or_ln39_9_fu_814_p2;
wire   [31:0] select_ln39_14_fu_806_p3;
wire   [31:0] select_ln39_15_fu_820_p3;
wire   [0:0] or_ln39_10_fu_836_p2;
wire   [31:0] select_ln39_16_fu_828_p3;
wire   [31:0] select_ln39_17_fu_842_p3;
wire   [0:0] or_ln39_11_fu_850_p2;
wire   [0:0] or_ln39_12_fu_864_p2;
wire   [31:0] select_ln39_18_fu_856_p3;
wire   [31:0] select_ln39_19_fu_870_p3;
wire   [0:0] or_ln39_13_fu_886_p2;
wire   [31:0] select_ln39_20_fu_878_p3;
wire   [31:0] select_ln39_21_fu_892_p3;
wire   [31:0] tem1_fu_961_p18;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

eucHW_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U2985(
    .din0(out_array_1_fu_160),
    .din1(out_array_1_19_fu_164),
    .din2(out_array_1_20_fu_168),
    .din3(out_array_1_21_fu_172),
    .din4(out_array_1_22_fu_176),
    .din5(out_array_1_23_fu_180),
    .din6(out_array_1_24_fu_184),
    .din7(out_array_1_25_fu_188),
    .din8(out_array_1_26_fu_192),
    .din9(out_array_1_27_fu_196),
    .din10(out_array_1_28_fu_200),
    .din11(out_array_1_29_fu_204),
    .din12(out_array_1_30_fu_208),
    .din13(out_array_1_31_fu_212),
    .din14(out_array_1_32_fu_216),
    .din15(out_array_1_33_fu_220),
    .din16(trunc_ln38_reg_1285),
    .dout(tem1_fu_961_p18)
);

eucHW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln34_fu_616_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_156 <= add_ln34_fu_622_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_156 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_19_fu_164 <= out_array_1_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd1))) begin
            out_array_1_19_fu_164 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_20_fu_168 <= out_array_2_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd2))) begin
            out_array_1_20_fu_168 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_21_fu_172 <= out_array_3_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd3))) begin
            out_array_1_21_fu_172 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_22_fu_176 <= out_array_4_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd4))) begin
            out_array_1_22_fu_176 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_23_fu_180 <= out_array_5_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd5))) begin
            out_array_1_23_fu_180 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_24_fu_184 <= out_array_6_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd6))) begin
            out_array_1_24_fu_184 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_25_fu_188 <= out_array_7_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd7))) begin
            out_array_1_25_fu_188 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_26_fu_192 <= out_array_8_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd8))) begin
            out_array_1_26_fu_192 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_27_fu_196 <= out_array_9_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd9))) begin
            out_array_1_27_fu_196 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_28_fu_200 <= out_array_10_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd10))) begin
            out_array_1_28_fu_200 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_29_fu_204 <= out_array_11_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd11))) begin
            out_array_1_29_fu_204 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_30_fu_208 <= out_array_12_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd12))) begin
            out_array_1_30_fu_208 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_31_fu_212 <= out_array_13_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd13))) begin
            out_array_1_31_fu_212 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_32_fu_216 <= out_array_14_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd14))) begin
            out_array_1_32_fu_216 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_33_fu_220 <= out_array_15_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd15))) begin
            out_array_1_33_fu_220 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_fu_160 <= out_array_0_8_reload;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_reg_1285 == 4'd0))) begin
            out_array_1_fu_160 <= out_array_1_35_fu_998_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_616_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tem2_reg_1290 <= tem2_fu_900_p3;
        trunc_ln38_reg_1285 <= trunc_ln38_fu_628_p1;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_156;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_0_10_out_ap_vld = 1'b1;
    end else begin
        out_array_0_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_10_10_out_ap_vld = 1'b1;
    end else begin
        out_array_10_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_11_10_out_ap_vld = 1'b1;
    end else begin
        out_array_11_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_12_10_out_ap_vld = 1'b1;
    end else begin
        out_array_12_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_13_10_out_ap_vld = 1'b1;
    end else begin
        out_array_13_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_14_10_out_ap_vld = 1'b1;
    end else begin
        out_array_14_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_15_10_out_ap_vld = 1'b1;
    end else begin
        out_array_15_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_1_10_out_ap_vld = 1'b1;
    end else begin
        out_array_1_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_2_10_out_ap_vld = 1'b1;
    end else begin
        out_array_2_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_3_10_out_ap_vld = 1'b1;
    end else begin
        out_array_3_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_4_10_out_ap_vld = 1'b1;
    end else begin
        out_array_4_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_5_10_out_ap_vld = 1'b1;
    end else begin
        out_array_5_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_6_10_out_ap_vld = 1'b1;
    end else begin
        out_array_6_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_7_10_out_ap_vld = 1'b1;
    end else begin
        out_array_7_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_8_10_out_ap_vld = 1'b1;
    end else begin
        out_array_8_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_616_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_9_10_out_ap_vld = 1'b1;
    end else begin
        out_array_9_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_fu_622_p2 = (ap_sig_allocacmp_i_4 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln34_fu_616_p2 = ((ap_sig_allocacmp_i_4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln39_10_fu_644_p2 = ((trunc_ln38_fu_628_p1 == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln39_11_fu_650_p2 = ((trunc_ln38_fu_628_p1 == 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln39_12_fu_656_p2 = ((trunc_ln38_fu_628_p1 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln39_13_fu_662_p2 = ((trunc_ln38_fu_628_p1 == 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln39_14_fu_668_p2 = ((trunc_ln38_fu_628_p1 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln39_15_fu_674_p2 = ((trunc_ln38_fu_628_p1 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln39_16_fu_680_p2 = ((trunc_ln38_fu_628_p1 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln39_17_fu_686_p2 = ((trunc_ln38_fu_628_p1 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln39_18_fu_692_p2 = ((trunc_ln38_fu_628_p1 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln39_19_fu_698_p2 = ((trunc_ln38_fu_628_p1 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln39_20_fu_704_p2 = ((trunc_ln38_fu_628_p1 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln39_21_fu_710_p2 = ((trunc_ln38_fu_628_p1 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln39_22_fu_716_p2 = ((trunc_ln38_fu_628_p1 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln39_9_fu_638_p2 = ((trunc_ln38_fu_628_p1 == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_632_p2 = ((trunc_ln38_fu_628_p1 == 4'd0) ? 1'b1 : 1'b0);

assign or_ln39_10_fu_836_p2 = (or_ln39_fu_730_p2 | or_ln39_4_fu_744_p2);

assign or_ln39_11_fu_850_p2 = (or_ln39_6_fu_772_p2 | or_ln39_5_fu_758_p2);

assign or_ln39_12_fu_864_p2 = (or_ln39_8_fu_800_p2 | or_ln39_7_fu_786_p2);

assign or_ln39_13_fu_886_p2 = (or_ln39_11_fu_850_p2 | or_ln39_10_fu_836_p2);

assign or_ln39_4_fu_744_p2 = (icmp_ln39_20_fu_704_p2 | icmp_ln39_19_fu_698_p2);

assign or_ln39_5_fu_758_p2 = (icmp_ln39_18_fu_692_p2 | icmp_ln39_17_fu_686_p2);

assign or_ln39_6_fu_772_p2 = (icmp_ln39_16_fu_680_p2 | icmp_ln39_15_fu_674_p2);

assign or_ln39_7_fu_786_p2 = (icmp_ln39_14_fu_668_p2 | icmp_ln39_13_fu_662_p2);

assign or_ln39_8_fu_800_p2 = (icmp_ln39_12_fu_656_p2 | icmp_ln39_11_fu_650_p2);

assign or_ln39_9_fu_814_p2 = (icmp_ln39_9_fu_638_p2 | icmp_ln39_10_fu_644_p2);

assign or_ln39_fu_730_p2 = (icmp_ln39_22_fu_716_p2 | icmp_ln39_21_fu_710_p2);

assign out_array_0_10_out = out_array_1_fu_160;

assign out_array_10_10_out = out_array_1_28_fu_200;

assign out_array_11_10_out = out_array_1_29_fu_204;

assign out_array_12_10_out = out_array_1_30_fu_208;

assign out_array_13_10_out = out_array_1_31_fu_212;

assign out_array_14_10_out = out_array_1_32_fu_216;

assign out_array_15_10_out = out_array_1_33_fu_220;

assign out_array_1_10_out = out_array_1_19_fu_164;

assign out_array_1_35_fu_998_p2 = (tem2_reg_1290 + tem1_fu_961_p18);

assign out_array_2_10_out = out_array_1_20_fu_168;

assign out_array_3_10_out = out_array_1_21_fu_172;

assign out_array_4_10_out = out_array_1_22_fu_176;

assign out_array_5_10_out = out_array_1_23_fu_180;

assign out_array_6_10_out = out_array_1_24_fu_184;

assign out_array_7_10_out = out_array_1_25_fu_188;

assign out_array_8_10_out = out_array_1_26_fu_192;

assign out_array_9_10_out = out_array_1_27_fu_196;

assign select_ln39_10_fu_750_p3 = ((icmp_ln39_18_fu_692_p2[0:0] == 1'b1) ? out_array_26_8_reload : out_array_25_8_reload);

assign select_ln39_11_fu_764_p3 = ((icmp_ln39_16_fu_680_p2[0:0] == 1'b1) ? out_array_24_8_reload : out_array_23_8_reload);

assign select_ln39_12_fu_778_p3 = ((icmp_ln39_14_fu_668_p2[0:0] == 1'b1) ? out_array_22_8_reload : out_array_21_8_reload);

assign select_ln39_13_fu_792_p3 = ((icmp_ln39_12_fu_656_p2[0:0] == 1'b1) ? out_array_20_8_reload : out_array_19_8_reload);

assign select_ln39_14_fu_806_p3 = ((icmp_ln39_10_fu_644_p2[0:0] == 1'b1) ? out_array_18_8_reload : out_array_17_8_reload);

assign select_ln39_15_fu_820_p3 = ((icmp_ln39_fu_632_p2[0:0] == 1'b1) ? out_array_16_8_reload : out_array_31_8_reload);

assign select_ln39_16_fu_828_p3 = ((or_ln39_fu_730_p2[0:0] == 1'b1) ? select_ln39_fu_722_p3 : select_ln39_9_fu_736_p3);

assign select_ln39_17_fu_842_p3 = ((or_ln39_5_fu_758_p2[0:0] == 1'b1) ? select_ln39_10_fu_750_p3 : select_ln39_11_fu_764_p3);

assign select_ln39_18_fu_856_p3 = ((or_ln39_7_fu_786_p2[0:0] == 1'b1) ? select_ln39_12_fu_778_p3 : select_ln39_13_fu_792_p3);

assign select_ln39_19_fu_870_p3 = ((or_ln39_9_fu_814_p2[0:0] == 1'b1) ? select_ln39_14_fu_806_p3 : select_ln39_15_fu_820_p3);

assign select_ln39_20_fu_878_p3 = ((or_ln39_10_fu_836_p2[0:0] == 1'b1) ? select_ln39_16_fu_828_p3 : select_ln39_17_fu_842_p3);

assign select_ln39_21_fu_892_p3 = ((or_ln39_12_fu_864_p2[0:0] == 1'b1) ? select_ln39_18_fu_856_p3 : select_ln39_19_fu_870_p3);

assign select_ln39_9_fu_736_p3 = ((icmp_ln39_20_fu_704_p2[0:0] == 1'b1) ? out_array_28_8_reload : out_array_27_8_reload);

assign select_ln39_fu_722_p3 = ((icmp_ln39_22_fu_716_p2[0:0] == 1'b1) ? out_array_30_8_reload : out_array_29_8_reload);

assign tem2_fu_900_p3 = ((or_ln39_13_fu_886_p2[0:0] == 1'b1) ? select_ln39_20_fu_878_p3 : select_ln39_21_fu_892_p3);

assign trunc_ln38_fu_628_p1 = ap_sig_allocacmp_i_4[3:0];

endmodule //eucHW_eucHW_Pipeline_VITIS_LOOP_34_25
