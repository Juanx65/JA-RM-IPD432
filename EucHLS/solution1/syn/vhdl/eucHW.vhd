-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eucHW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A : IN STD_LOGIC_VECTOR (63 downto 0);
    B : IN STD_LOGIC_VECTOR (63 downto 0);
    C : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_ap_vld : OUT STD_LOGIC );
end;


architecture behav of eucHW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eucHW_eucHW,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a12ti-csg325-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.006625,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=699,HLS_SYN_LUT=1840,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln19_2_fu_104_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln19_1_fu_136_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_1_reg_479 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_2_fu_170_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_2_reg_484 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_11_fu_210_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln19_4_fu_242_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_4_reg_495 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_17_fu_282_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln19_6_fu_314_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_6_reg_506 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_23_fu_354_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln19_fu_361_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln19_1_fu_370_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln19_3_fu_379_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln19_5_fu_388_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_2_fu_426_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal result_2_reg_537 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sqrt_fixed_32_32_s_fu_77_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln19_fu_82_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_1_fu_90_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_fu_86_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_1_fu_94_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_fu_98_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_2_fu_108_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_3_fu_122_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_3_fu_118_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_4_fu_132_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_4_fu_142_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_5_fu_156_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_6_fu_152_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_7_fu_166_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_6_fu_176_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_7_fu_190_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_9_fu_186_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_10_fu_200_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_3_fu_204_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_8_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_9_fu_228_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_12_fu_224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_13_fu_238_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_s_fu_248_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_10_fu_262_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_15_fu_258_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_16_fu_272_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_5_fu_276_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_11_fu_286_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_12_fu_300_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_18_fu_296_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_19_fu_310_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln19_13_fu_320_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_14_fu_334_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln19_21_fu_330_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_22_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_7_fu_348_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln19_fu_361_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_5_fu_358_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln19_fu_361_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln19_1_fu_370_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_8_fu_367_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln19_1_fu_370_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln19_3_fu_379_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_14_fu_376_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln19_3_fu_379_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln19_5_fu_388_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_20_fu_385_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln19_5_fu_388_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_437_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_446_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln19_25_fu_397_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln19_24_fu_394_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln19_2_fu_400_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_455_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_464_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln19_28_fu_413_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln19_27_fu_410_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln19_5_fu_416_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln19_29_fu_422_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln19_26_fu_406_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_446_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_446_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_455_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_455_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_464_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_464_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component eucHW_sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component eucHW_mul_9s_9s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component eucHW_mac_muladd_9s_9s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    grp_sqrt_fixed_32_32_s_fu_77 : component eucHW_sqrt_fixed_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => result_2_reg_537,
        ap_return => grp_sqrt_fixed_32_32_s_fu_77_ap_return);

    mul_9s_9s_18_1_1_U2 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln19_fu_361_p0,
        din1 => mul_ln19_fu_361_p1,
        dout => mul_ln19_fu_361_p2);

    mul_9s_9s_18_1_1_U3 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln19_1_fu_370_p0,
        din1 => mul_ln19_1_fu_370_p1,
        dout => mul_ln19_1_fu_370_p2);

    mul_9s_9s_18_1_1_U4 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln19_3_fu_379_p0,
        din1 => mul_ln19_3_fu_379_p1,
        dout => mul_ln19_3_fu_379_p2);

    mul_9s_9s_18_1_1_U5 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln19_5_fu_388_p0,
        din1 => mul_ln19_5_fu_388_p1,
        dout => mul_ln19_5_fu_388_p2);

    mac_muladd_9s_9s_18s_18_4_1_U6 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_437_p0,
        din1 => grp_fu_437_p1,
        din2 => mul_ln19_fu_361_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p3);

    mac_muladd_9s_9s_18s_18_4_1_U7 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_446_p0,
        din1 => grp_fu_446_p1,
        din2 => mul_ln19_1_fu_370_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p3);

    mac_muladd_9s_9s_18s_18_4_1_U8 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_455_p0,
        din1 => grp_fu_455_p1,
        din2 => mul_ln19_3_fu_379_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_455_p3);

    mac_muladd_9s_9s_18s_18_4_1_U9 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_464_p0,
        din1 => grp_fu_464_p1,
        din2 => mul_ln19_5_fu_388_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_464_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                result_2_reg_537 <= result_2_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sub_ln19_1_reg_479 <= sub_ln19_1_fu_136_p2;
                sub_ln19_2_reg_484 <= sub_ln19_2_fu_170_p2;
                sub_ln19_4_reg_495 <= sub_ln19_4_fu_242_p2;
                sub_ln19_6_reg_506 <= sub_ln19_6_fu_314_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    C <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_sqrt_fixed_32_32_s_fu_77_ap_return),32));

    C_ap_vld_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            C_ap_vld <= ap_const_logic_1;
        else 
            C_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln19_2_fu_400_p2 <= std_logic_vector(signed(sext_ln19_25_fu_397_p1) + signed(sext_ln19_24_fu_394_p1));
    add_ln19_5_fu_416_p2 <= std_logic_vector(signed(sext_ln19_28_fu_413_p1) + signed(sext_ln19_27_fu_410_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_437_p0 <= sext_ln19_2_fu_104_p1(9 - 1 downto 0);
    grp_fu_437_p1 <= sext_ln19_2_fu_104_p1(9 - 1 downto 0);
    grp_fu_446_p0 <= sext_ln19_11_fu_210_p1(9 - 1 downto 0);
    grp_fu_446_p1 <= sext_ln19_11_fu_210_p1(9 - 1 downto 0);
    grp_fu_455_p0 <= sext_ln19_17_fu_282_p1(9 - 1 downto 0);
    grp_fu_455_p1 <= sext_ln19_17_fu_282_p1(9 - 1 downto 0);
    grp_fu_464_p0 <= sext_ln19_23_fu_354_p1(9 - 1 downto 0);
    grp_fu_464_p1 <= sext_ln19_23_fu_354_p1(9 - 1 downto 0);
    mul_ln19_1_fu_370_p0 <= sext_ln19_8_fu_367_p1(9 - 1 downto 0);
    mul_ln19_1_fu_370_p1 <= sext_ln19_8_fu_367_p1(9 - 1 downto 0);
    mul_ln19_3_fu_379_p0 <= sext_ln19_14_fu_376_p1(9 - 1 downto 0);
    mul_ln19_3_fu_379_p1 <= sext_ln19_14_fu_376_p1(9 - 1 downto 0);
    mul_ln19_5_fu_388_p0 <= sext_ln19_20_fu_385_p1(9 - 1 downto 0);
    mul_ln19_5_fu_388_p1 <= sext_ln19_20_fu_385_p1(9 - 1 downto 0);
    mul_ln19_fu_361_p0 <= sext_ln19_5_fu_358_p1(9 - 1 downto 0);
    mul_ln19_fu_361_p1 <= sext_ln19_5_fu_358_p1(9 - 1 downto 0);
    result_2_fu_426_p2 <= std_logic_vector(signed(sext_ln19_29_fu_422_p1) + signed(sext_ln19_26_fu_406_p1));
        sext_ln19_10_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_7_fu_190_p4),9));

        sext_ln19_11_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_3_fu_204_p2),18));

        sext_ln19_12_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_8_fu_214_p4),9));

        sext_ln19_13_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_9_fu_228_p4),9));

        sext_ln19_14_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_4_reg_495),18));

        sext_ln19_15_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_s_fu_248_p4),9));

        sext_ln19_16_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_10_fu_262_p4),9));

        sext_ln19_17_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_5_fu_276_p2),18));

        sext_ln19_18_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_11_fu_286_p4),9));

        sext_ln19_19_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_12_fu_300_p4),9));

        sext_ln19_1_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_1_fu_90_p1),9));

        sext_ln19_20_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_6_reg_506),18));

        sext_ln19_21_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_13_fu_320_p4),9));

        sext_ln19_22_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_14_fu_334_p4),9));

        sext_ln19_23_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_7_fu_348_p2),18));

        sext_ln19_24_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_437_p3),19));

        sext_ln19_25_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_446_p3),19));

        sext_ln19_26_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln19_2_fu_400_p2),20));

        sext_ln19_27_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_455_p3),19));

        sext_ln19_28_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_464_p3),19));

        sext_ln19_29_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln19_5_fu_416_p2),20));

        sext_ln19_2_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_fu_98_p2),18));

        sext_ln19_3_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_2_fu_108_p4),9));

        sext_ln19_4_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_3_fu_122_p4),9));

        sext_ln19_5_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_1_reg_479),18));

        sext_ln19_6_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_4_fu_142_p4),9));

        sext_ln19_7_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_5_fu_156_p4),9));

        sext_ln19_8_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_2_reg_484),18));

        sext_ln19_9_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_6_fu_176_p4),9));

        sext_ln19_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_fu_82_p1),9));

    sub_ln19_1_fu_136_p2 <= std_logic_vector(signed(sext_ln19_3_fu_118_p1) - signed(sext_ln19_4_fu_132_p1));
    sub_ln19_2_fu_170_p2 <= std_logic_vector(signed(sext_ln19_6_fu_152_p1) - signed(sext_ln19_7_fu_166_p1));
    sub_ln19_3_fu_204_p2 <= std_logic_vector(signed(sext_ln19_9_fu_186_p1) - signed(sext_ln19_10_fu_200_p1));
    sub_ln19_4_fu_242_p2 <= std_logic_vector(signed(sext_ln19_12_fu_224_p1) - signed(sext_ln19_13_fu_238_p1));
    sub_ln19_5_fu_276_p2 <= std_logic_vector(signed(sext_ln19_15_fu_258_p1) - signed(sext_ln19_16_fu_272_p1));
    sub_ln19_6_fu_314_p2 <= std_logic_vector(signed(sext_ln19_18_fu_296_p1) - signed(sext_ln19_19_fu_310_p1));
    sub_ln19_7_fu_348_p2 <= std_logic_vector(signed(sext_ln19_21_fu_330_p1) - signed(sext_ln19_22_fu_344_p1));
    sub_ln19_fu_98_p2 <= std_logic_vector(signed(sext_ln19_fu_86_p1) - signed(sext_ln19_1_fu_94_p1));
    trunc_ln19_10_fu_262_p4 <= B(47 downto 40);
    trunc_ln19_11_fu_286_p4 <= A(55 downto 48);
    trunc_ln19_12_fu_300_p4 <= B(55 downto 48);
    trunc_ln19_13_fu_320_p4 <= A(63 downto 56);
    trunc_ln19_14_fu_334_p4 <= B(63 downto 56);
    trunc_ln19_1_fu_90_p1 <= B(8 - 1 downto 0);
    trunc_ln19_2_fu_108_p4 <= A(15 downto 8);
    trunc_ln19_3_fu_122_p4 <= B(15 downto 8);
    trunc_ln19_4_fu_142_p4 <= A(23 downto 16);
    trunc_ln19_5_fu_156_p4 <= B(23 downto 16);
    trunc_ln19_6_fu_176_p4 <= A(31 downto 24);
    trunc_ln19_7_fu_190_p4 <= B(31 downto 24);
    trunc_ln19_8_fu_214_p4 <= A(39 downto 32);
    trunc_ln19_9_fu_228_p4 <= B(39 downto 32);
    trunc_ln19_fu_82_p1 <= A(8 - 1 downto 0);
    trunc_ln19_s_fu_248_p4 <= A(47 downto 40);
end behav;
