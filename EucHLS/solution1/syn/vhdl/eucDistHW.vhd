-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eucDistHW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_i : IN STD_LOGIC_VECTOR (31 downto 0);
    C_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of eucDistHW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eucDistHW_eucDistHW,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a12ti-csg325-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.207000,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4526,HLS_SYN_LUT=3436,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sub_ln14_13_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_13_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_14_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_14_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_15_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_15_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_11_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_11_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln14_12_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_12_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln14_1_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_1_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_2_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_2_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_3_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_3_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_4_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_4_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_5_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_5_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_6_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_6_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_7_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_7_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_8_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_8_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_9_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_9_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_10_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln14_10_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_13_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_14_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_15_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_11_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_12_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_12_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_12_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_1_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_2_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_3_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_5_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_6_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_7_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_8_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_9_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_10_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_13_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_13_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_2_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_2_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln14_5_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_5_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_14_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_14_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_V_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_V_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_sqrt_fixed_32_32_s_fu_293_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln14_11_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_10_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_1_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_4_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_3_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_8_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_7_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_9_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_6_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component eucDistHW_sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component eucDistHW_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_sqrt_fixed_32_32_s_fu_293 : component eucDistHW_sqrt_fixed_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => xf_V_reg_739,
        ap_return => grp_sqrt_fixed_32_32_s_fu_293_ap_return);

    mul_32s_32s_32_2_1_U2 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_13_reg_538,
        din1 => sub_ln14_13_reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    mul_32s_32s_32_2_1_U3 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_14_reg_544,
        din1 => sub_ln14_14_reg_544,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    mul_32s_32s_32_2_1_U4 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_15_reg_550,
        din1 => sub_ln14_15_reg_550,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    mul_32s_32s_32_2_1_U5 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_11_reg_556,
        din1 => sub_ln14_11_reg_556,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);

    mul_32s_32s_32_2_1_U6 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_12_reg_562,
        din1 => sub_ln14_12_reg_562,
        ce => ap_const_logic_1,
        dout => grp_fu_410_p2);

    mul_32s_32s_32_2_1_U7 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_reg_568,
        din1 => sub_ln14_reg_568,
        ce => ap_const_logic_1,
        dout => grp_fu_414_p2);

    mul_32s_32s_32_2_1_U8 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_1_reg_574,
        din1 => sub_ln14_1_reg_574,
        ce => ap_const_logic_1,
        dout => grp_fu_418_p2);

    mul_32s_32s_32_2_1_U9 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_2_reg_580,
        din1 => sub_ln14_2_reg_580,
        ce => ap_const_logic_1,
        dout => grp_fu_422_p2);

    mul_32s_32s_32_2_1_U10 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_3_reg_586,
        din1 => sub_ln14_3_reg_586,
        ce => ap_const_logic_1,
        dout => grp_fu_426_p2);

    mul_32s_32s_32_2_1_U11 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_4_reg_592,
        din1 => sub_ln14_4_reg_592,
        ce => ap_const_logic_1,
        dout => grp_fu_430_p2);

    mul_32s_32s_32_2_1_U12 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_5_reg_598,
        din1 => sub_ln14_5_reg_598,
        ce => ap_const_logic_1,
        dout => grp_fu_434_p2);

    mul_32s_32s_32_2_1_U13 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_6_reg_604,
        din1 => sub_ln14_6_reg_604,
        ce => ap_const_logic_1,
        dout => grp_fu_438_p2);

    mul_32s_32s_32_2_1_U14 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_7_reg_610,
        din1 => sub_ln14_7_reg_610,
        ce => ap_const_logic_1,
        dout => grp_fu_442_p2);

    mul_32s_32s_32_2_1_U15 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_8_reg_616,
        din1 => sub_ln14_8_reg_616,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    mul_32s_32s_32_2_1_U16 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_9_reg_622,
        din1 => sub_ln14_9_reg_622,
        ce => ap_const_logic_1,
        dout => grp_fu_450_p2);

    mul_32s_32s_32_2_1_U17 : component eucDistHW_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln14_10_reg_628,
        din1 => sub_ln14_10_reg_628,
        ce => ap_const_logic_1,
        dout => grp_fu_454_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln14_12_reg_659 <= add_ln14_12_fu_462_p2;
                mul_ln14_11_reg_649 <= grp_fu_406_p2;
                mul_ln14_12_reg_654 <= grp_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln14_13_reg_719 <= add_ln14_13_fu_471_p2;
                mul_ln14_10_reg_714 <= grp_fu_454_p2;
                mul_ln14_1_reg_669 <= grp_fu_418_p2;
                mul_ln14_2_reg_674 <= grp_fu_422_p2;
                mul_ln14_3_reg_679 <= grp_fu_426_p2;
                mul_ln14_4_reg_684 <= grp_fu_430_p2;
                mul_ln14_5_reg_689 <= grp_fu_434_p2;
                mul_ln14_6_reg_694 <= grp_fu_438_p2;
                mul_ln14_7_reg_699 <= grp_fu_442_p2;
                mul_ln14_8_reg_704 <= grp_fu_446_p2;
                mul_ln14_9_reg_709 <= grp_fu_450_p2;
                mul_ln14_reg_664 <= grp_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln14_14_reg_734 <= add_ln14_14_fu_519_p2;
                add_ln14_2_reg_724 <= add_ln14_2_fu_485_p2;
                add_ln14_5_reg_729 <= add_ln14_5_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln14_13_reg_634 <= grp_fu_328_p2;
                mul_ln14_14_reg_639 <= grp_fu_332_p2;
                mul_ln14_15_reg_644 <= grp_fu_336_p2;
                sub_ln14_10_reg_628 <= sub_ln14_10_fu_400_p2;
                sub_ln14_1_reg_574 <= sub_ln14_1_fu_346_p2;
                sub_ln14_2_reg_580 <= sub_ln14_2_fu_352_p2;
                sub_ln14_3_reg_586 <= sub_ln14_3_fu_358_p2;
                sub_ln14_4_reg_592 <= sub_ln14_4_fu_364_p2;
                sub_ln14_5_reg_598 <= sub_ln14_5_fu_370_p2;
                sub_ln14_6_reg_604 <= sub_ln14_6_fu_376_p2;
                sub_ln14_7_reg_610 <= sub_ln14_7_fu_382_p2;
                sub_ln14_8_reg_616 <= sub_ln14_8_fu_388_p2;
                sub_ln14_9_reg_622 <= sub_ln14_9_fu_394_p2;
                sub_ln14_reg_568 <= sub_ln14_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sub_ln14_11_reg_556 <= sub_ln14_11_fu_316_p2;
                sub_ln14_12_reg_562 <= sub_ln14_12_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sub_ln14_13_reg_538 <= sub_ln14_13_fu_298_p2;
                sub_ln14_14_reg_544 <= sub_ln14_14_fu_304_p2;
                sub_ln14_15_reg_550 <= sub_ln14_15_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xf_V_reg_739 <= xf_V_fu_528_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_o <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_sqrt_fixed_32_32_s_fu_293_ap_return),32));

    C_o_ap_vld_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_o_ap_vld <= ap_const_logic_1;
        else 
            C_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln14_10_fu_467_p2 <= std_logic_vector(unsigned(mul_ln14_11_reg_649) + unsigned(mul_ln14_12_reg_654));
    add_ln14_11_fu_458_p2 <= std_logic_vector(unsigned(mul_ln14_14_reg_639) + unsigned(mul_ln14_15_reg_644));
    add_ln14_12_fu_462_p2 <= std_logic_vector(unsigned(add_ln14_11_fu_458_p2) + unsigned(mul_ln14_13_reg_634));
    add_ln14_13_fu_471_p2 <= std_logic_vector(unsigned(add_ln14_12_reg_659) + unsigned(add_ln14_10_fu_467_p2));
    add_ln14_14_fu_519_p2 <= std_logic_vector(unsigned(add_ln14_13_reg_719) + unsigned(add_ln14_9_fu_513_p2));
    add_ln14_1_fu_481_p2 <= std_logic_vector(unsigned(mul_ln14_1_reg_669) + unsigned(mul_ln14_2_reg_674));
    add_ln14_2_fu_485_p2 <= std_logic_vector(unsigned(add_ln14_1_fu_481_p2) + unsigned(add_ln14_fu_476_p2));
    add_ln14_3_fu_491_p2 <= std_logic_vector(unsigned(mul_ln14_3_reg_679) + unsigned(mul_ln14_4_reg_684));
    add_ln14_4_fu_495_p2 <= std_logic_vector(unsigned(mul_ln14_5_reg_689) + unsigned(mul_ln14_6_reg_694));
    add_ln14_5_fu_499_p2 <= std_logic_vector(unsigned(add_ln14_4_fu_495_p2) + unsigned(add_ln14_3_fu_491_p2));
    add_ln14_6_fu_524_p2 <= std_logic_vector(unsigned(add_ln14_5_reg_729) + unsigned(add_ln14_2_reg_724));
    add_ln14_7_fu_505_p2 <= std_logic_vector(unsigned(mul_ln14_7_reg_699) + unsigned(mul_ln14_8_reg_704));
    add_ln14_8_fu_509_p2 <= std_logic_vector(unsigned(mul_ln14_9_reg_709) + unsigned(mul_ln14_10_reg_714));
    add_ln14_9_fu_513_p2 <= std_logic_vector(unsigned(add_ln14_8_fu_509_p2) + unsigned(add_ln14_7_fu_505_p2));
    add_ln14_fu_476_p2 <= std_logic_vector(unsigned(C_i) + unsigned(mul_ln14_reg_664));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln14_10_fu_400_p2 <= std_logic_vector(unsigned(A_10) - unsigned(B_10));
    sub_ln14_11_fu_316_p2 <= std_logic_vector(unsigned(A_11) - unsigned(B_11));
    sub_ln14_12_fu_322_p2 <= std_logic_vector(unsigned(A_12) - unsigned(B_12));
    sub_ln14_13_fu_298_p2 <= std_logic_vector(unsigned(A_13) - unsigned(B_13));
    sub_ln14_14_fu_304_p2 <= std_logic_vector(unsigned(A_14) - unsigned(B_14));
    sub_ln14_15_fu_310_p2 <= std_logic_vector(unsigned(A_15) - unsigned(B_15));
    sub_ln14_1_fu_346_p2 <= std_logic_vector(unsigned(A_1) - unsigned(B_1));
    sub_ln14_2_fu_352_p2 <= std_logic_vector(unsigned(A_2) - unsigned(B_2));
    sub_ln14_3_fu_358_p2 <= std_logic_vector(unsigned(A_3) - unsigned(B_3));
    sub_ln14_4_fu_364_p2 <= std_logic_vector(unsigned(A_4) - unsigned(B_4));
    sub_ln14_5_fu_370_p2 <= std_logic_vector(unsigned(A_5) - unsigned(B_5));
    sub_ln14_6_fu_376_p2 <= std_logic_vector(unsigned(A_6) - unsigned(B_6));
    sub_ln14_7_fu_382_p2 <= std_logic_vector(unsigned(A_7) - unsigned(B_7));
    sub_ln14_8_fu_388_p2 <= std_logic_vector(unsigned(A_8) - unsigned(B_8));
    sub_ln14_9_fu_394_p2 <= std_logic_vector(unsigned(A_9) - unsigned(B_9));
    sub_ln14_fu_340_p2 <= std_logic_vector(unsigned(A_0) - unsigned(B_0));
    xf_V_fu_528_p2 <= std_logic_vector(unsigned(add_ln14_14_reg_734) + unsigned(add_ln14_6_fu_524_p2));
end behav;
