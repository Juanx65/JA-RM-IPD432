// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eucDistHW_eucDistHW,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a12ti-csg325-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.207000,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4526,HLS_SYN_LUT=3436,HLS_VERSION=2021_1}" *)

module eucDistHW (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0,
        A_1,
        A_2,
        A_3,
        A_4,
        A_5,
        A_6,
        A_7,
        A_8,
        A_9,
        A_10,
        A_11,
        A_12,
        A_13,
        A_14,
        A_15,
        B_0,
        B_1,
        B_2,
        B_3,
        B_4,
        B_5,
        B_6,
        B_7,
        B_8,
        B_9,
        B_10,
        B_11,
        B_12,
        B_13,
        B_14,
        B_15,
        C_i,
        C_o,
        C_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] A_0;
input  [31:0] A_1;
input  [31:0] A_2;
input  [31:0] A_3;
input  [31:0] A_4;
input  [31:0] A_5;
input  [31:0] A_6;
input  [31:0] A_7;
input  [31:0] A_8;
input  [31:0] A_9;
input  [31:0] A_10;
input  [31:0] A_11;
input  [31:0] A_12;
input  [31:0] A_13;
input  [31:0] A_14;
input  [31:0] A_15;
input  [31:0] B_0;
input  [31:0] B_1;
input  [31:0] B_2;
input  [31:0] B_3;
input  [31:0] B_4;
input  [31:0] B_5;
input  [31:0] B_6;
input  [31:0] B_7;
input  [31:0] B_8;
input  [31:0] B_9;
input  [31:0] B_10;
input  [31:0] B_11;
input  [31:0] B_12;
input  [31:0] B_13;
input  [31:0] B_14;
input  [31:0] B_15;
input  [31:0] C_i;
output  [31:0] C_o;
output   C_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg C_o_ap_vld;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] sub_ln14_13_fu_298_p2;
reg  signed [31:0] sub_ln14_13_reg_538;
wire  signed [31:0] sub_ln14_14_fu_304_p2;
reg  signed [31:0] sub_ln14_14_reg_544;
wire  signed [31:0] sub_ln14_15_fu_310_p2;
reg  signed [31:0] sub_ln14_15_reg_550;
wire  signed [31:0] sub_ln14_11_fu_316_p2;
reg  signed [31:0] sub_ln14_11_reg_556;
wire    ap_CS_fsm_state2;
wire  signed [31:0] sub_ln14_12_fu_322_p2;
reg  signed [31:0] sub_ln14_12_reg_562;
wire  signed [31:0] sub_ln14_fu_340_p2;
reg  signed [31:0] sub_ln14_reg_568;
wire    ap_CS_fsm_state3;
wire  signed [31:0] sub_ln14_1_fu_346_p2;
reg  signed [31:0] sub_ln14_1_reg_574;
wire  signed [31:0] sub_ln14_2_fu_352_p2;
reg  signed [31:0] sub_ln14_2_reg_580;
wire  signed [31:0] sub_ln14_3_fu_358_p2;
reg  signed [31:0] sub_ln14_3_reg_586;
wire  signed [31:0] sub_ln14_4_fu_364_p2;
reg  signed [31:0] sub_ln14_4_reg_592;
wire  signed [31:0] sub_ln14_5_fu_370_p2;
reg  signed [31:0] sub_ln14_5_reg_598;
wire  signed [31:0] sub_ln14_6_fu_376_p2;
reg  signed [31:0] sub_ln14_6_reg_604;
wire  signed [31:0] sub_ln14_7_fu_382_p2;
reg  signed [31:0] sub_ln14_7_reg_610;
wire  signed [31:0] sub_ln14_8_fu_388_p2;
reg  signed [31:0] sub_ln14_8_reg_616;
wire  signed [31:0] sub_ln14_9_fu_394_p2;
reg  signed [31:0] sub_ln14_9_reg_622;
wire  signed [31:0] sub_ln14_10_fu_400_p2;
reg  signed [31:0] sub_ln14_10_reg_628;
wire   [31:0] grp_fu_328_p2;
reg   [31:0] mul_ln14_13_reg_634;
wire   [31:0] grp_fu_332_p2;
reg   [31:0] mul_ln14_14_reg_639;
wire   [31:0] grp_fu_336_p2;
reg   [31:0] mul_ln14_15_reg_644;
wire   [31:0] grp_fu_406_p2;
reg   [31:0] mul_ln14_11_reg_649;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_410_p2;
reg   [31:0] mul_ln14_12_reg_654;
wire   [31:0] add_ln14_12_fu_462_p2;
reg   [31:0] add_ln14_12_reg_659;
wire   [31:0] grp_fu_414_p2;
reg   [31:0] mul_ln14_reg_664;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_418_p2;
reg   [31:0] mul_ln14_1_reg_669;
wire   [31:0] grp_fu_422_p2;
reg   [31:0] mul_ln14_2_reg_674;
wire   [31:0] grp_fu_426_p2;
reg   [31:0] mul_ln14_3_reg_679;
wire   [31:0] grp_fu_430_p2;
reg   [31:0] mul_ln14_4_reg_684;
wire   [31:0] grp_fu_434_p2;
reg   [31:0] mul_ln14_5_reg_689;
wire   [31:0] grp_fu_438_p2;
reg   [31:0] mul_ln14_6_reg_694;
wire   [31:0] grp_fu_442_p2;
reg   [31:0] mul_ln14_7_reg_699;
wire   [31:0] grp_fu_446_p2;
reg   [31:0] mul_ln14_8_reg_704;
wire   [31:0] grp_fu_450_p2;
reg   [31:0] mul_ln14_9_reg_709;
wire   [31:0] grp_fu_454_p2;
reg   [31:0] mul_ln14_10_reg_714;
wire   [31:0] add_ln14_13_fu_471_p2;
reg   [31:0] add_ln14_13_reg_719;
wire   [31:0] add_ln14_2_fu_485_p2;
reg   [31:0] add_ln14_2_reg_724;
wire    ap_CS_fsm_state6;
wire   [31:0] add_ln14_5_fu_499_p2;
reg   [31:0] add_ln14_5_reg_729;
wire   [31:0] add_ln14_14_fu_519_p2;
reg   [31:0] add_ln14_14_reg_734;
wire   [31:0] xf_V_fu_528_p2;
reg   [31:0] xf_V_reg_739;
wire    ap_CS_fsm_state7;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_293_ap_return;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state17;
wire   [31:0] add_ln14_11_fu_458_p2;
wire   [31:0] add_ln14_10_fu_467_p2;
wire   [31:0] add_ln14_1_fu_481_p2;
wire   [31:0] add_ln14_fu_476_p2;
wire   [31:0] add_ln14_4_fu_495_p2;
wire   [31:0] add_ln14_3_fu_491_p2;
wire   [31:0] add_ln14_8_fu_509_p2;
wire   [31:0] add_ln14_7_fu_505_p2;
wire   [31:0] add_ln14_9_fu_513_p2;
wire   [31:0] add_ln14_6_fu_524_p2;
reg   [16:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

eucDistHW_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_293(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_reg_739),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_293_ap_return)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_13_reg_538),
    .din1(sub_ln14_13_reg_538),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_14_reg_544),
    .din1(sub_ln14_14_reg_544),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_15_reg_550),
    .din1(sub_ln14_15_reg_550),
    .ce(1'b1),
    .dout(grp_fu_336_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_11_reg_556),
    .din1(sub_ln14_11_reg_556),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_12_reg_562),
    .din1(sub_ln14_12_reg_562),
    .ce(1'b1),
    .dout(grp_fu_410_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_reg_568),
    .din1(sub_ln14_reg_568),
    .ce(1'b1),
    .dout(grp_fu_414_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_1_reg_574),
    .din1(sub_ln14_1_reg_574),
    .ce(1'b1),
    .dout(grp_fu_418_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_2_reg_580),
    .din1(sub_ln14_2_reg_580),
    .ce(1'b1),
    .dout(grp_fu_422_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_3_reg_586),
    .din1(sub_ln14_3_reg_586),
    .ce(1'b1),
    .dout(grp_fu_426_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_4_reg_592),
    .din1(sub_ln14_4_reg_592),
    .ce(1'b1),
    .dout(grp_fu_430_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_5_reg_598),
    .din1(sub_ln14_5_reg_598),
    .ce(1'b1),
    .dout(grp_fu_434_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_6_reg_604),
    .din1(sub_ln14_6_reg_604),
    .ce(1'b1),
    .dout(grp_fu_438_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_7_reg_610),
    .din1(sub_ln14_7_reg_610),
    .ce(1'b1),
    .dout(grp_fu_442_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_8_reg_616),
    .din1(sub_ln14_8_reg_616),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_9_reg_622),
    .din1(sub_ln14_9_reg_622),
    .ce(1'b1),
    .dout(grp_fu_450_p2)
);

eucDistHW_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln14_10_reg_628),
    .din1(sub_ln14_10_reg_628),
    .ce(1'b1),
    .dout(grp_fu_454_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln14_12_reg_659 <= add_ln14_12_fu_462_p2;
        mul_ln14_11_reg_649 <= grp_fu_406_p2;
        mul_ln14_12_reg_654 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln14_13_reg_719 <= add_ln14_13_fu_471_p2;
        mul_ln14_10_reg_714 <= grp_fu_454_p2;
        mul_ln14_1_reg_669 <= grp_fu_418_p2;
        mul_ln14_2_reg_674 <= grp_fu_422_p2;
        mul_ln14_3_reg_679 <= grp_fu_426_p2;
        mul_ln14_4_reg_684 <= grp_fu_430_p2;
        mul_ln14_5_reg_689 <= grp_fu_434_p2;
        mul_ln14_6_reg_694 <= grp_fu_438_p2;
        mul_ln14_7_reg_699 <= grp_fu_442_p2;
        mul_ln14_8_reg_704 <= grp_fu_446_p2;
        mul_ln14_9_reg_709 <= grp_fu_450_p2;
        mul_ln14_reg_664 <= grp_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln14_14_reg_734 <= add_ln14_14_fu_519_p2;
        add_ln14_2_reg_724 <= add_ln14_2_fu_485_p2;
        add_ln14_5_reg_729 <= add_ln14_5_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln14_13_reg_634 <= grp_fu_328_p2;
        mul_ln14_14_reg_639 <= grp_fu_332_p2;
        mul_ln14_15_reg_644 <= grp_fu_336_p2;
        sub_ln14_10_reg_628 <= sub_ln14_10_fu_400_p2;
        sub_ln14_1_reg_574 <= sub_ln14_1_fu_346_p2;
        sub_ln14_2_reg_580 <= sub_ln14_2_fu_352_p2;
        sub_ln14_3_reg_586 <= sub_ln14_3_fu_358_p2;
        sub_ln14_4_reg_592 <= sub_ln14_4_fu_364_p2;
        sub_ln14_5_reg_598 <= sub_ln14_5_fu_370_p2;
        sub_ln14_6_reg_604 <= sub_ln14_6_fu_376_p2;
        sub_ln14_7_reg_610 <= sub_ln14_7_fu_382_p2;
        sub_ln14_8_reg_616 <= sub_ln14_8_fu_388_p2;
        sub_ln14_9_reg_622 <= sub_ln14_9_fu_394_p2;
        sub_ln14_reg_568 <= sub_ln14_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ln14_11_reg_556 <= sub_ln14_11_fu_316_p2;
        sub_ln14_12_reg_562 <= sub_ln14_12_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_ln14_13_reg_538 <= sub_ln14_13_fu_298_p2;
        sub_ln14_14_reg_544 <= sub_ln14_14_fu_304_p2;
        sub_ln14_15_reg_550 <= sub_ln14_15_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xf_V_reg_739 <= xf_V_fu_528_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_o_ap_vld = 1'b1;
    end else begin
        C_o_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_o = grp_sqrt_fixed_32_32_s_fu_293_ap_return;

assign add_ln14_10_fu_467_p2 = (mul_ln14_11_reg_649 + mul_ln14_12_reg_654);

assign add_ln14_11_fu_458_p2 = (mul_ln14_14_reg_639 + mul_ln14_15_reg_644);

assign add_ln14_12_fu_462_p2 = (add_ln14_11_fu_458_p2 + mul_ln14_13_reg_634);

assign add_ln14_13_fu_471_p2 = (add_ln14_12_reg_659 + add_ln14_10_fu_467_p2);

assign add_ln14_14_fu_519_p2 = (add_ln14_13_reg_719 + add_ln14_9_fu_513_p2);

assign add_ln14_1_fu_481_p2 = (mul_ln14_1_reg_669 + mul_ln14_2_reg_674);

assign add_ln14_2_fu_485_p2 = (add_ln14_1_fu_481_p2 + add_ln14_fu_476_p2);

assign add_ln14_3_fu_491_p2 = (mul_ln14_3_reg_679 + mul_ln14_4_reg_684);

assign add_ln14_4_fu_495_p2 = (mul_ln14_5_reg_689 + mul_ln14_6_reg_694);

assign add_ln14_5_fu_499_p2 = (add_ln14_4_fu_495_p2 + add_ln14_3_fu_491_p2);

assign add_ln14_6_fu_524_p2 = (add_ln14_5_reg_729 + add_ln14_2_reg_724);

assign add_ln14_7_fu_505_p2 = (mul_ln14_7_reg_699 + mul_ln14_8_reg_704);

assign add_ln14_8_fu_509_p2 = (mul_ln14_9_reg_709 + mul_ln14_10_reg_714);

assign add_ln14_9_fu_513_p2 = (add_ln14_8_fu_509_p2 + add_ln14_7_fu_505_p2);

assign add_ln14_fu_476_p2 = (C_i + mul_ln14_reg_664);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign sub_ln14_10_fu_400_p2 = (A_10 - B_10);

assign sub_ln14_11_fu_316_p2 = (A_11 - B_11);

assign sub_ln14_12_fu_322_p2 = (A_12 - B_12);

assign sub_ln14_13_fu_298_p2 = (A_13 - B_13);

assign sub_ln14_14_fu_304_p2 = (A_14 - B_14);

assign sub_ln14_15_fu_310_p2 = (A_15 - B_15);

assign sub_ln14_1_fu_346_p2 = (A_1 - B_1);

assign sub_ln14_2_fu_352_p2 = (A_2 - B_2);

assign sub_ln14_3_fu_358_p2 = (A_3 - B_3);

assign sub_ln14_4_fu_364_p2 = (A_4 - B_4);

assign sub_ln14_5_fu_370_p2 = (A_5 - B_5);

assign sub_ln14_6_fu_376_p2 = (A_6 - B_6);

assign sub_ln14_7_fu_382_p2 = (A_7 - B_7);

assign sub_ln14_8_fu_388_p2 = (A_8 - B_8);

assign sub_ln14_9_fu_394_p2 = (A_9 - B_9);

assign sub_ln14_fu_340_p2 = (A_0 - B_0);

assign xf_V_fu_528_p2 = (add_ln14_14_reg_734 + add_ln14_6_fu_524_p2);

endmodule //eucDistHW
