-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eucHW is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of eucHW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eucHW_eucHW,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg400-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.154625,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1297,HLS_SYN_LUT=2900,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal y_add : STD_LOGIC_VECTOR (31 downto 0);
    signal y_add_ap_vld : STD_LOGIC;
    signal y_sqrt : STD_LOGIC_VECTOR (31 downto 0);
    signal y_sqrt_ap_vld : STD_LOGIC;
    signal x_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_16 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_17 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_18 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_19 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_20 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_21 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_22 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_23 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_24 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_25 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_26 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_27 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_28 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_29 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_30 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_31 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln16_fu_377_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_reg_865 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_1_fu_391_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_1_reg_870 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_2_fu_411_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln16_3_fu_423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_3_reg_881 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_4_fu_443_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln16_5_fu_455_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_5_reg_892 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_6_fu_475_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln16_7_fu_493_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln16_8_fu_505_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_8_reg_909 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_9_fu_525_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln16_10_fu_537_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_10_reg_920 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_11_fu_557_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln16_12_fu_569_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_12_reg_931 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_13_fu_583_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_13_reg_936 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_14_fu_603_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln16_15_fu_621_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal res_fu_628_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln16_fu_637_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_2_fu_646_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_4_fu_655_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_7_fu_664_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_9_fu_673_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_11_fu_682_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_12_fu_691_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln16_6_fu_729_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln16_6_reg_993 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln16_13_fu_767_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln16_13_reg_998 : STD_LOGIC_VECTOR (19 downto 0);
    signal res_2_fu_779_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal res_2_reg_1003 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sqrt_fixed_32_32_s_fu_364_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_1009 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln16_fu_369_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_1_fu_373_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_2_fu_383_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_3_fu_387_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_4_fu_397_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_5_fu_401_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_2_fu_405_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_6_fu_415_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_7_fu_419_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_8_fu_429_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_9_fu_433_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_4_fu_437_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_10_fu_447_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_11_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_12_fu_461_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_13_fu_465_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_6_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_14_fu_479_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_15_fu_483_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_7_fu_487_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_16_fu_497_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_17_fu_501_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_18_fu_511_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_19_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_9_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_20_fu_529_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_21_fu_533_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_22_fu_543_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_23_fu_547_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_11_fu_551_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_24_fu_561_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_25_fu_565_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_26_fu_575_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_27_fu_579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_28_fu_589_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_29_fu_593_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_14_fu_597_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_30_fu_607_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln16_31_fu_611_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln16_15_fu_615_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal res_fu_628_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_fu_625_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal res_fu_628_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln16_fu_637_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_1_fu_634_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_fu_637_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln16_2_fu_646_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_3_fu_643_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_2_fu_646_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln16_4_fu_655_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_5_fu_652_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_4_fu_655_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln16_7_fu_664_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_8_fu_661_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_7_fu_664_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln16_9_fu_673_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_10_fu_670_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_9_fu_673_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln16_11_fu_682_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_12_fu_679_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_11_fu_682_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln16_12_fu_691_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln16_13_fu_688_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln16_12_fu_691_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_847_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_838_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln16_17_fu_700_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln16_16_fu_697_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln16_2_fu_703_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_820_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_829_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln16_20_fu_716_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln16_19_fu_713_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln16_5_fu_719_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln16_21_fu_725_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln16_18_fu_709_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_793_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_802_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln16_24_fu_738_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln16_23_fu_735_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln16_9_fu_741_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_811_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_856_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln16_27_fu_754_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln16_26_fu_751_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln16_12_fu_757_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln16_28_fu_763_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln16_25_fu_747_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln16_29_fu_776_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln16_22_fu_773_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_793_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_793_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_802_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_802_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_811_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_811_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_820_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_820_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_829_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_829_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_838_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_838_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_847_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_847_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_856_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_856_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component eucHW_sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (20 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component eucHW_mul_9s_9s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component eucHW_mac_muladd_9s_9s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component eucHW_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        y_add : IN STD_LOGIC_VECTOR (31 downto 0);
        y_add_ap_vld : IN STD_LOGIC;
        y_sqrt : IN STD_LOGIC_VECTOR (31 downto 0);
        y_sqrt_ap_vld : IN STD_LOGIC;
        x_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_16 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_17 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_18 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_19 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_20 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_21 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_22 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_23 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_24 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_25 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_26 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_27 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_28 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_29 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_30 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_31 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_sqrt_fixed_32_32_s_fu_364 : component eucHW_sqrt_fixed_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x => res_2_reg_1003,
        ap_return => grp_sqrt_fixed_32_32_s_fu_364_ap_return);

    control_s_axi_U : component eucHW_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        y_add => y_add,
        y_add_ap_vld => y_add_ap_vld,
        y_sqrt => y_sqrt,
        y_sqrt_ap_vld => y_sqrt_ap_vld,
        x_0 => x_0,
        x_1 => x_1,
        x_2 => x_2,
        x_3 => x_3,
        x_4 => x_4,
        x_5 => x_5,
        x_6 => x_6,
        x_7 => x_7,
        x_8 => x_8,
        x_9 => x_9,
        x_10 => x_10,
        x_11 => x_11,
        x_12 => x_12,
        x_13 => x_13,
        x_14 => x_14,
        x_15 => x_15,
        x_16 => x_16,
        x_17 => x_17,
        x_18 => x_18,
        x_19 => x_19,
        x_20 => x_20,
        x_21 => x_21,
        x_22 => x_22,
        x_23 => x_23,
        x_24 => x_24,
        x_25 => x_25,
        x_26 => x_26,
        x_27 => x_27,
        x_28 => x_28,
        x_29 => x_29,
        x_30 => x_30,
        x_31 => x_31,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_9s_9s_18_1_1_U2 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => res_fu_628_p0,
        din1 => res_fu_628_p1,
        dout => res_fu_628_p2);

    mul_9s_9s_18_1_1_U3 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln16_fu_637_p0,
        din1 => mul_ln16_fu_637_p1,
        dout => mul_ln16_fu_637_p2);

    mul_9s_9s_18_1_1_U4 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln16_2_fu_646_p0,
        din1 => mul_ln16_2_fu_646_p1,
        dout => mul_ln16_2_fu_646_p2);

    mul_9s_9s_18_1_1_U5 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln16_4_fu_655_p0,
        din1 => mul_ln16_4_fu_655_p1,
        dout => mul_ln16_4_fu_655_p2);

    mul_9s_9s_18_1_1_U6 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln16_7_fu_664_p0,
        din1 => mul_ln16_7_fu_664_p1,
        dout => mul_ln16_7_fu_664_p2);

    mul_9s_9s_18_1_1_U7 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln16_9_fu_673_p0,
        din1 => mul_ln16_9_fu_673_p1,
        dout => mul_ln16_9_fu_673_p2);

    mul_9s_9s_18_1_1_U8 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln16_11_fu_682_p0,
        din1 => mul_ln16_11_fu_682_p1,
        dout => mul_ln16_11_fu_682_p2);

    mul_9s_9s_18_1_1_U9 : component eucHW_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln16_12_fu_691_p0,
        din1 => mul_ln16_12_fu_691_p1,
        dout => mul_ln16_12_fu_691_p2);

    mac_muladd_9s_9s_18s_18_4_1_U10 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_793_p0,
        din1 => grp_fu_793_p1,
        din2 => mul_ln16_fu_637_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_793_p3);

    mac_muladd_9s_9s_18s_18_4_1_U11 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_802_p0,
        din1 => grp_fu_802_p1,
        din2 => res_fu_628_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_802_p3);

    mac_muladd_9s_9s_18s_18_4_1_U12 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_811_p0,
        din1 => grp_fu_811_p1,
        din2 => mul_ln16_2_fu_646_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_811_p3);

    mac_muladd_9s_9s_18s_18_4_1_U13 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_820_p0,
        din1 => grp_fu_820_p1,
        din2 => mul_ln16_7_fu_664_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_820_p3);

    mac_muladd_9s_9s_18s_18_4_1_U14 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_829_p0,
        din1 => grp_fu_829_p1,
        din2 => mul_ln16_9_fu_673_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_829_p3);

    mac_muladd_9s_9s_18s_18_4_1_U15 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_838_p0,
        din1 => grp_fu_838_p1,
        din2 => mul_ln16_11_fu_682_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_838_p3);

    mac_muladd_9s_9s_18s_18_4_1_U16 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_847_p0,
        din1 => grp_fu_847_p1,
        din2 => mul_ln16_12_fu_691_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_847_p3);

    mac_muladd_9s_9s_18s_18_4_1_U17 : component eucHW_mac_muladd_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_856_p0,
        din1 => grp_fu_856_p1,
        din2 => mul_ln16_4_fu_655_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_856_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln16_13_reg_998 <= add_ln16_13_fu_767_p2;
                add_ln16_6_reg_993 <= add_ln16_6_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_Val2_s_reg_1009 <= grp_sqrt_fixed_32_32_s_fu_364_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                res_2_reg_1003 <= res_2_fu_779_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sub_ln16_10_reg_920 <= sub_ln16_10_fu_537_p2;
                sub_ln16_12_reg_931 <= sub_ln16_12_fu_569_p2;
                sub_ln16_13_reg_936 <= sub_ln16_13_fu_583_p2;
                sub_ln16_1_reg_870 <= sub_ln16_1_fu_391_p2;
                sub_ln16_3_reg_881 <= sub_ln16_3_fu_423_p2;
                sub_ln16_5_reg_892 <= sub_ln16_5_fu_455_p2;
                sub_ln16_8_reg_909 <= sub_ln16_8_fu_505_p2;
                sub_ln16_reg_865 <= sub_ln16_fu_377_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln16_12_fu_757_p2 <= std_logic_vector(signed(sext_ln16_27_fu_754_p1) + signed(sext_ln16_26_fu_751_p1));
    add_ln16_13_fu_767_p2 <= std_logic_vector(signed(sext_ln16_28_fu_763_p1) + signed(sext_ln16_25_fu_747_p1));
    add_ln16_2_fu_703_p2 <= std_logic_vector(signed(sext_ln16_17_fu_700_p1) + signed(sext_ln16_16_fu_697_p1));
    add_ln16_5_fu_719_p2 <= std_logic_vector(signed(sext_ln16_20_fu_716_p1) + signed(sext_ln16_19_fu_713_p1));
    add_ln16_6_fu_729_p2 <= std_logic_vector(signed(sext_ln16_21_fu_725_p1) + signed(sext_ln16_18_fu_709_p1));
    add_ln16_9_fu_741_p2 <= std_logic_vector(signed(sext_ln16_24_fu_738_p1) + signed(sext_ln16_23_fu_735_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_793_p0 <= sext_ln16_2_fu_411_p1(9 - 1 downto 0);
    grp_fu_793_p1 <= sext_ln16_2_fu_411_p1(9 - 1 downto 0);
    grp_fu_802_p0 <= sext_ln16_4_fu_443_p1(9 - 1 downto 0);
    grp_fu_802_p1 <= sext_ln16_4_fu_443_p1(9 - 1 downto 0);
    grp_fu_811_p0 <= sext_ln16_6_fu_475_p1(9 - 1 downto 0);
    grp_fu_811_p1 <= sext_ln16_6_fu_475_p1(9 - 1 downto 0);
    grp_fu_820_p0 <= sext_ln16_7_fu_493_p1(9 - 1 downto 0);
    grp_fu_820_p1 <= sext_ln16_7_fu_493_p1(9 - 1 downto 0);
    grp_fu_829_p0 <= sext_ln16_9_fu_525_p1(9 - 1 downto 0);
    grp_fu_829_p1 <= sext_ln16_9_fu_525_p1(9 - 1 downto 0);
    grp_fu_838_p0 <= sext_ln16_11_fu_557_p1(9 - 1 downto 0);
    grp_fu_838_p1 <= sext_ln16_11_fu_557_p1(9 - 1 downto 0);
    grp_fu_847_p0 <= sext_ln16_14_fu_603_p1(9 - 1 downto 0);
    grp_fu_847_p1 <= sext_ln16_14_fu_603_p1(9 - 1 downto 0);
    grp_fu_856_p0 <= sext_ln16_15_fu_621_p1(9 - 1 downto 0);
    grp_fu_856_p1 <= sext_ln16_15_fu_621_p1(9 - 1 downto 0);
    mul_ln16_11_fu_682_p0 <= sext_ln16_12_fu_679_p1(9 - 1 downto 0);
    mul_ln16_11_fu_682_p1 <= sext_ln16_12_fu_679_p1(9 - 1 downto 0);
    mul_ln16_12_fu_691_p0 <= sext_ln16_13_fu_688_p1(9 - 1 downto 0);
    mul_ln16_12_fu_691_p1 <= sext_ln16_13_fu_688_p1(9 - 1 downto 0);
    mul_ln16_2_fu_646_p0 <= sext_ln16_3_fu_643_p1(9 - 1 downto 0);
    mul_ln16_2_fu_646_p1 <= sext_ln16_3_fu_643_p1(9 - 1 downto 0);
    mul_ln16_4_fu_655_p0 <= sext_ln16_5_fu_652_p1(9 - 1 downto 0);
    mul_ln16_4_fu_655_p1 <= sext_ln16_5_fu_652_p1(9 - 1 downto 0);
    mul_ln16_7_fu_664_p0 <= sext_ln16_8_fu_661_p1(9 - 1 downto 0);
    mul_ln16_7_fu_664_p1 <= sext_ln16_8_fu_661_p1(9 - 1 downto 0);
    mul_ln16_9_fu_673_p0 <= sext_ln16_10_fu_670_p1(9 - 1 downto 0);
    mul_ln16_9_fu_673_p1 <= sext_ln16_10_fu_670_p1(9 - 1 downto 0);
    mul_ln16_fu_637_p0 <= sext_ln16_1_fu_634_p1(9 - 1 downto 0);
    mul_ln16_fu_637_p1 <= sext_ln16_1_fu_634_p1(9 - 1 downto 0);
    res_2_fu_779_p2 <= std_logic_vector(signed(sext_ln16_29_fu_776_p1) + signed(sext_ln16_22_fu_773_p1));
    res_fu_628_p0 <= sext_ln16_fu_625_p1(9 - 1 downto 0);
    res_fu_628_p1 <= sext_ln16_fu_625_p1(9 - 1 downto 0);
        sext_ln16_10_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_10_reg_920),18));

        sext_ln16_11_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_11_fu_551_p2),18));

        sext_ln16_12_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_12_reg_931),18));

        sext_ln16_13_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_13_reg_936),18));

        sext_ln16_14_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_14_fu_597_p2),18));

        sext_ln16_15_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_15_fu_615_p2),18));

        sext_ln16_16_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_847_p3),19));

        sext_ln16_17_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_838_p3),19));

        sext_ln16_18_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_2_fu_703_p2),20));

        sext_ln16_19_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_820_p3),19));

        sext_ln16_1_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_1_reg_870),18));

        sext_ln16_20_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_829_p3),19));

        sext_ln16_21_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_5_fu_719_p2),20));

        sext_ln16_22_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_6_reg_993),21));

        sext_ln16_23_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_793_p3),19));

        sext_ln16_24_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_802_p3),19));

        sext_ln16_25_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_9_fu_741_p2),20));

        sext_ln16_26_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_811_p3),19));

        sext_ln16_27_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_856_p3),19));

        sext_ln16_28_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_12_fu_757_p2),20));

        sext_ln16_29_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_13_reg_998),21));

        sext_ln16_2_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_2_fu_405_p2),18));

        sext_ln16_3_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_3_reg_881),18));

        sext_ln16_4_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_4_fu_437_p2),18));

        sext_ln16_5_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_5_reg_892),18));

        sext_ln16_6_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_6_fu_469_p2),18));

        sext_ln16_7_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_7_fu_487_p2),18));

        sext_ln16_8_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_8_reg_909),18));

        sext_ln16_9_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_9_fu_519_p2),18));

        sext_ln16_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln16_reg_865),18));

    sub_ln16_10_fu_537_p2 <= std_logic_vector(unsigned(zext_ln16_20_fu_529_p1) - unsigned(zext_ln16_21_fu_533_p1));
    sub_ln16_11_fu_551_p2 <= std_logic_vector(unsigned(zext_ln16_22_fu_543_p1) - unsigned(zext_ln16_23_fu_547_p1));
    sub_ln16_12_fu_569_p2 <= std_logic_vector(unsigned(zext_ln16_24_fu_561_p1) - unsigned(zext_ln16_25_fu_565_p1));
    sub_ln16_13_fu_583_p2 <= std_logic_vector(unsigned(zext_ln16_26_fu_575_p1) - unsigned(zext_ln16_27_fu_579_p1));
    sub_ln16_14_fu_597_p2 <= std_logic_vector(unsigned(zext_ln16_28_fu_589_p1) - unsigned(zext_ln16_29_fu_593_p1));
    sub_ln16_15_fu_615_p2 <= std_logic_vector(unsigned(zext_ln16_30_fu_607_p1) - unsigned(zext_ln16_31_fu_611_p1));
    sub_ln16_1_fu_391_p2 <= std_logic_vector(unsigned(zext_ln16_2_fu_383_p1) - unsigned(zext_ln16_3_fu_387_p1));
    sub_ln16_2_fu_405_p2 <= std_logic_vector(unsigned(zext_ln16_4_fu_397_p1) - unsigned(zext_ln16_5_fu_401_p1));
    sub_ln16_3_fu_423_p2 <= std_logic_vector(unsigned(zext_ln16_6_fu_415_p1) - unsigned(zext_ln16_7_fu_419_p1));
    sub_ln16_4_fu_437_p2 <= std_logic_vector(unsigned(zext_ln16_8_fu_429_p1) - unsigned(zext_ln16_9_fu_433_p1));
    sub_ln16_5_fu_455_p2 <= std_logic_vector(unsigned(zext_ln16_10_fu_447_p1) - unsigned(zext_ln16_11_fu_451_p1));
    sub_ln16_6_fu_469_p2 <= std_logic_vector(unsigned(zext_ln16_12_fu_461_p1) - unsigned(zext_ln16_13_fu_465_p1));
    sub_ln16_7_fu_487_p2 <= std_logic_vector(unsigned(zext_ln16_14_fu_479_p1) - unsigned(zext_ln16_15_fu_483_p1));
    sub_ln16_8_fu_505_p2 <= std_logic_vector(unsigned(zext_ln16_16_fu_497_p1) - unsigned(zext_ln16_17_fu_501_p1));
    sub_ln16_9_fu_519_p2 <= std_logic_vector(unsigned(zext_ln16_18_fu_511_p1) - unsigned(zext_ln16_19_fu_515_p1));
    sub_ln16_fu_377_p2 <= std_logic_vector(unsigned(zext_ln16_fu_369_p1) - unsigned(zext_ln16_1_fu_373_p1));
        y_add <= std_logic_vector(IEEE.numeric_std.resize(signed(res_2_reg_1003),32));


    y_add_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            y_add_ap_vld <= ap_const_logic_1;
        else 
            y_add_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_sqrt <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_1009),32));

    y_sqrt_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            y_sqrt_ap_vld <= ap_const_logic_1;
        else 
            y_sqrt_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln16_10_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_21),9));
    zext_ln16_11_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_5),9));
    zext_ln16_12_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_22),9));
    zext_ln16_13_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_6),9));
    zext_ln16_14_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_23),9));
    zext_ln16_15_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_7),9));
    zext_ln16_16_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_24),9));
    zext_ln16_17_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_8),9));
    zext_ln16_18_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_25),9));
    zext_ln16_19_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_9),9));
    zext_ln16_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0),9));
    zext_ln16_20_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_26),9));
    zext_ln16_21_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_10),9));
    zext_ln16_22_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_27),9));
    zext_ln16_23_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_11),9));
    zext_ln16_24_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_28),9));
    zext_ln16_25_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_12),9));
    zext_ln16_26_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_29),9));
    zext_ln16_27_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_13),9));
    zext_ln16_28_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_30),9));
    zext_ln16_29_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_14),9));
    zext_ln16_2_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_17),9));
    zext_ln16_30_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_31),9));
    zext_ln16_31_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_15),9));
    zext_ln16_3_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1),9));
    zext_ln16_4_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_18),9));
    zext_ln16_5_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_2),9));
    zext_ln16_6_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_19),9));
    zext_ln16_7_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_3),9));
    zext_ln16_8_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_20),9));
    zext_ln16_9_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_4),9));
    zext_ln16_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_16),9));
end behav;
