// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module eucHW_eucHW_Pipeline_VITIS_LOOP_34_26 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_array_7_10_reload,
        out_array_6_10_reload,
        out_array_5_10_reload,
        out_array_4_10_reload,
        out_array_3_10_reload,
        out_array_2_10_reload,
        out_array_1_10_reload,
        out_array_0_10_reload,
        out_array_14_10_reload,
        out_array_13_10_reload,
        out_array_12_10_reload,
        out_array_11_10_reload,
        out_array_10_10_reload,
        out_array_9_10_reload,
        out_array_8_10_reload,
        out_array_15_10_reload,
        out_array_7_12_out,
        out_array_7_12_out_ap_vld,
        out_array_6_12_out,
        out_array_6_12_out_ap_vld,
        out_array_5_12_out,
        out_array_5_12_out_ap_vld,
        out_array_4_12_out,
        out_array_4_12_out_ap_vld,
        out_array_3_12_out,
        out_array_3_12_out_ap_vld,
        out_array_2_12_out,
        out_array_2_12_out_ap_vld,
        out_array_1_12_out,
        out_array_1_12_out_ap_vld,
        out_array_0_12_out,
        out_array_0_12_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] out_array_7_10_reload;
input  [31:0] out_array_6_10_reload;
input  [31:0] out_array_5_10_reload;
input  [31:0] out_array_4_10_reload;
input  [31:0] out_array_3_10_reload;
input  [31:0] out_array_2_10_reload;
input  [31:0] out_array_1_10_reload;
input  [31:0] out_array_0_10_reload;
input  [31:0] out_array_14_10_reload;
input  [31:0] out_array_13_10_reload;
input  [31:0] out_array_12_10_reload;
input  [31:0] out_array_11_10_reload;
input  [31:0] out_array_10_10_reload;
input  [31:0] out_array_9_10_reload;
input  [31:0] out_array_8_10_reload;
input  [31:0] out_array_15_10_reload;
output  [31:0] out_array_7_12_out;
output   out_array_7_12_out_ap_vld;
output  [31:0] out_array_6_12_out;
output   out_array_6_12_out_ap_vld;
output  [31:0] out_array_5_12_out;
output   out_array_5_12_out_ap_vld;
output  [31:0] out_array_4_12_out;
output   out_array_4_12_out_ap_vld;
output  [31:0] out_array_3_12_out;
output   out_array_3_12_out_ap_vld;
output  [31:0] out_array_2_12_out;
output   out_array_2_12_out_ap_vld;
output  [31:0] out_array_1_12_out;
output   out_array_1_12_out_ap_vld;
output  [31:0] out_array_0_12_out;
output   out_array_0_12_out_ap_vld;

reg ap_idle;
reg out_array_7_12_out_ap_vld;
reg out_array_6_12_out_ap_vld;
reg out_array_5_12_out_ap_vld;
reg out_array_4_12_out_ap_vld;
reg out_array_3_12_out_ap_vld;
reg out_array_2_12_out_ap_vld;
reg out_array_1_12_out_ap_vld;
reg out_array_0_12_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln34_fu_328_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_fu_92;
wire   [3:0] add_ln34_fu_334_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] out_array_1_fu_96;
wire   [31:0] out_array_1_18_fu_504_p2;
wire   [2:0] trunc_ln38_fu_364_p1;
reg   [31:0] out_array_1_10_fu_100;
reg   [31:0] out_array_1_11_fu_104;
reg   [31:0] out_array_1_12_fu_108;
reg   [31:0] out_array_1_13_fu_112;
reg   [31:0] out_array_1_14_fu_116;
reg   [31:0] out_array_1_15_fu_120;
reg   [31:0] out_array_1_16_fu_124;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln39_8_fu_426_p2;
wire   [0:0] icmp_ln39_7_fu_420_p2;
wire   [0:0] icmp_ln39_6_fu_414_p2;
wire   [0:0] icmp_ln39_5_fu_408_p2;
wire   [0:0] icmp_ln39_4_fu_402_p2;
wire   [0:0] icmp_ln39_3_fu_396_p2;
wire   [0:0] icmp_ln39_fu_390_p2;
wire   [0:0] or_ln39_fu_438_p2;
wire   [31:0] select_ln39_fu_432_p3;
wire   [31:0] select_ln39_3_fu_444_p3;
wire   [0:0] or_ln39_1_fu_450_p2;
wire   [0:0] or_ln39_2_fu_462_p2;
wire   [31:0] select_ln39_4_fu_456_p3;
wire   [31:0] select_ln39_5_fu_468_p3;
wire   [0:0] or_ln39_3_fu_482_p2;
wire   [31:0] select_ln39_6_fu_474_p3;
wire   [31:0] select_ln39_7_fu_488_p3;
wire   [31:0] tem2_fu_496_p3;
wire   [31:0] tem1_fu_368_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_356;
reg    ap_condition_359;
reg    ap_condition_362;
reg    ap_condition_365;
reg    ap_condition_368;
reg    ap_condition_371;
reg    ap_condition_374;
reg    ap_condition_377;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

eucHW_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U3035(
    .din0(out_array_1_fu_96),
    .din1(out_array_1_10_fu_100),
    .din2(out_array_1_11_fu_104),
    .din3(out_array_1_12_fu_108),
    .din4(out_array_1_13_fu_112),
    .din5(out_array_1_14_fu_116),
    .din6(out_array_1_15_fu_120),
    .din7(out_array_1_16_fu_124),
    .din8(trunc_ln38_fu_364_p1),
    .dout(tem1_fu_368_p10)
);

eucHW_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 4'd0;
        end else if (((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_92 <= add_ln34_fu_334_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_10_fu_100 <= out_array_1_10_reload;
        end else if ((1'b1 == ap_condition_356)) begin
            out_array_1_10_fu_100 <= out_array_1_18_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_11_fu_104 <= out_array_2_10_reload;
        end else if ((1'b1 == ap_condition_359)) begin
            out_array_1_11_fu_104 <= out_array_1_18_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_12_fu_108 <= out_array_3_10_reload;
        end else if ((1'b1 == ap_condition_362)) begin
            out_array_1_12_fu_108 <= out_array_1_18_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_13_fu_112 <= out_array_4_10_reload;
        end else if ((1'b1 == ap_condition_365)) begin
            out_array_1_13_fu_112 <= out_array_1_18_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_14_fu_116 <= out_array_5_10_reload;
        end else if ((1'b1 == ap_condition_368)) begin
            out_array_1_14_fu_116 <= out_array_1_18_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_15_fu_120 <= out_array_6_10_reload;
        end else if ((1'b1 == ap_condition_371)) begin
            out_array_1_15_fu_120 <= out_array_1_18_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_16_fu_124 <= out_array_7_10_reload;
        end else if ((1'b1 == ap_condition_374)) begin
            out_array_1_16_fu_124 <= out_array_1_18_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            out_array_1_fu_96 <= out_array_0_10_reload;
        end else if ((1'b1 == ap_condition_377)) begin
            out_array_1_fu_96 <= out_array_1_18_fu_504_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_0_12_out_ap_vld = 1'b1;
    end else begin
        out_array_0_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_1_12_out_ap_vld = 1'b1;
    end else begin
        out_array_1_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_2_12_out_ap_vld = 1'b1;
    end else begin
        out_array_2_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_3_12_out_ap_vld = 1'b1;
    end else begin
        out_array_3_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_4_12_out_ap_vld = 1'b1;
    end else begin
        out_array_4_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_5_12_out_ap_vld = 1'b1;
    end else begin
        out_array_5_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_6_12_out_ap_vld = 1'b1;
    end else begin
        out_array_6_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_array_7_12_out_ap_vld = 1'b1;
    end else begin
        out_array_7_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_fu_334_p2 = (i_fu_92 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_356 = ((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_fu_364_p1 == 3'd1));
end

always @ (*) begin
    ap_condition_359 = ((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_fu_364_p1 == 3'd2));
end

always @ (*) begin
    ap_condition_362 = ((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_fu_364_p1 == 3'd3));
end

always @ (*) begin
    ap_condition_365 = ((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_fu_364_p1 == 3'd4));
end

always @ (*) begin
    ap_condition_368 = ((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_fu_364_p1 == 3'd5));
end

always @ (*) begin
    ap_condition_371 = ((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_fu_364_p1 == 3'd6));
end

always @ (*) begin
    ap_condition_374 = ((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_fu_364_p1 == 3'd7));
end

always @ (*) begin
    ap_condition_377 = ((icmp_ln34_fu_328_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln38_fu_364_p1 == 3'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln34_fu_328_p2 = ((i_fu_92 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln39_3_fu_396_p2 = ((trunc_ln38_fu_364_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln39_4_fu_402_p2 = ((trunc_ln38_fu_364_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln39_5_fu_408_p2 = ((trunc_ln38_fu_364_p1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln39_6_fu_414_p2 = ((trunc_ln38_fu_364_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln39_7_fu_420_p2 = ((trunc_ln38_fu_364_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln39_8_fu_426_p2 = ((trunc_ln38_fu_364_p1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_390_p2 = ((trunc_ln38_fu_364_p1 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln39_1_fu_450_p2 = (icmp_ln39_6_fu_414_p2 | icmp_ln39_5_fu_408_p2);

assign or_ln39_2_fu_462_p2 = (icmp_ln39_4_fu_402_p2 | icmp_ln39_3_fu_396_p2);

assign or_ln39_3_fu_482_p2 = (or_ln39_fu_438_p2 | or_ln39_1_fu_450_p2);

assign or_ln39_fu_438_p2 = (icmp_ln39_8_fu_426_p2 | icmp_ln39_7_fu_420_p2);

assign out_array_0_12_out = out_array_1_fu_96;

assign out_array_1_12_out = out_array_1_10_fu_100;

assign out_array_1_18_fu_504_p2 = (tem2_fu_496_p3 + tem1_fu_368_p10);

assign out_array_2_12_out = out_array_1_11_fu_104;

assign out_array_3_12_out = out_array_1_12_fu_108;

assign out_array_4_12_out = out_array_1_13_fu_112;

assign out_array_5_12_out = out_array_1_14_fu_116;

assign out_array_6_12_out = out_array_1_15_fu_120;

assign out_array_7_12_out = out_array_1_16_fu_124;

assign select_ln39_3_fu_444_p3 = ((icmp_ln39_6_fu_414_p2[0:0] == 1'b1) ? out_array_12_10_reload : out_array_11_10_reload);

assign select_ln39_4_fu_456_p3 = ((icmp_ln39_4_fu_402_p2[0:0] == 1'b1) ? out_array_10_10_reload : out_array_9_10_reload);

assign select_ln39_5_fu_468_p3 = ((icmp_ln39_fu_390_p2[0:0] == 1'b1) ? out_array_8_10_reload : out_array_15_10_reload);

assign select_ln39_6_fu_474_p3 = ((or_ln39_fu_438_p2[0:0] == 1'b1) ? select_ln39_fu_432_p3 : select_ln39_3_fu_444_p3);

assign select_ln39_7_fu_488_p3 = ((or_ln39_2_fu_462_p2[0:0] == 1'b1) ? select_ln39_4_fu_456_p3 : select_ln39_5_fu_468_p3);

assign select_ln39_fu_432_p3 = ((icmp_ln39_8_fu_426_p2[0:0] == 1'b1) ? out_array_14_10_reload : out_array_13_10_reload);

assign tem2_fu_496_p3 = ((or_ln39_3_fu_482_p2[0:0] == 1'b1) ? select_ln39_6_fu_474_p3 : select_ln39_7_fu_488_p3);

assign trunc_ln38_fu_364_p1 = i_fu_92[2:0];

endmodule //eucHW_eucHW_Pipeline_VITIS_LOOP_34_26
