// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module AESL_automem_A (
    clk,
    rst,
    ce0,
    we0,
    address0,
    din0,
    dout0,
    ce1,
    we1,
    address1,
    din1,
    dout1,
    ready,
    done
);

//------------------------Parameter----------------------
localparam
    TV_IN  = "../tv/cdatafile/c.eucHW.autotvin_A.dat", 
    TV_OUT = "../tv/rtldatafile/rtl.eucHW.autotvout_A.dat"; 
//------------------------Local signal-------------------
parameter DATA_WIDTH = 32'd 4096;
parameter ADDR_WIDTH = 32'd 1;
parameter DEPTH = 32'd 2;
parameter DLY = 0.1;

// Input and Output
input clk;
input rst;
input ce0, ce1;
//KF: byte width will be 512
input [512 -1 : 0] we0, we1;
input [ADDR_WIDTH - 1 : 0] address0, address1;
input [DATA_WIDTH - 1 : 0] din0, din1;
output reg [DATA_WIDTH - 1 : 0] dout0, dout1;
input ready;
input done;

// Inner signals
event initialed;
event dut2tb_ap_ready;
event dut2tb_ap_done;
event finished;
reg [DATA_WIDTH - 1 : 0] mem [0 : DEPTH - 1];
initial begin : initialize_mem
    integer i;
    for (i = 0; i < DEPTH; i = i + 1) begin
        mem[i] = 0;
    end
end
reg writed_flag;
event write_process_done;
//------------------------Task and function--------------
task read_token;
    input integer fp;
    output reg [8215 :0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

//------------------------Read array-------------------

// Read data form file to array
initial begin : read_file_process
    integer fp;
    integer err;
    integer ret;
    reg [8215 : 0] token;
    reg [ 8*5 : 1] str;
    reg [ DATA_WIDTH - 1 : 0 ] mem_tmp;
    integer transaction_idx;
    integer i;
    transaction_idx = 0;

    wait(rst === 0);
    @(write_process_done);
    fp = $fopen(TV_IN,"r");
    if (fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", TV_IN);
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin             // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
		  $finish;
        end
        read_token(fp, token);              // skip transaction number
        while(ready == 0) begin
            @(write_process_done);
        end
        for(i = 0; i < DEPTH; i = i + 1) begin
            read_token(fp, token);
            ret = $sscanf(token, "0x%x", mem_tmp);
            mem[i] = mem_tmp;
            if (ret != 1) begin
                $display("Failed to parse token!");
                $finish;
            end
        end
        @(write_process_done);
        read_token(fp, token);
        if (token != "[[/transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp, token);
        transaction_idx = transaction_idx + 1;
    end
    $fclose(fp);
end

// Read data from array to RTL
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[0] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[0] == 1) && (address0 == address1))
	      dout0[0*8+7:0*8] <= #DLY din1[0*8+7:0*8];
	  else if (ce0 == 1)
	      dout0[0*8+7:0*8] <= #DLY mem[address0][0*8+7:0*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[0] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[0] == 0) && (address0 == address1))
            dout1[0*8+7:0*8] <= #DLY din0[0*8+7:0*8];
	  else if (ce1 == 1)
            dout1[0*8+7:0*8] <= #DLY mem[address1][0*8+7:0*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[1] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[1] == 1) && (address0 == address1))
	      dout0[1*8+7:1*8] <= #DLY din1[1*8+7:1*8];
	  else if (ce0 == 1)
	      dout0[1*8+7:1*8] <= #DLY mem[address0][1*8+7:1*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[1] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[1] == 0) && (address0 == address1))
            dout1[1*8+7:1*8] <= #DLY din0[1*8+7:1*8];
	  else if (ce1 == 1)
            dout1[1*8+7:1*8] <= #DLY mem[address1][1*8+7:1*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[2] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[2] == 1) && (address0 == address1))
	      dout0[2*8+7:2*8] <= #DLY din1[2*8+7:2*8];
	  else if (ce0 == 1)
	      dout0[2*8+7:2*8] <= #DLY mem[address0][2*8+7:2*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[2] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[2] == 0) && (address0 == address1))
            dout1[2*8+7:2*8] <= #DLY din0[2*8+7:2*8];
	  else if (ce1 == 1)
            dout1[2*8+7:2*8] <= #DLY mem[address1][2*8+7:2*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[3] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[3] == 1) && (address0 == address1))
	      dout0[3*8+7:3*8] <= #DLY din1[3*8+7:3*8];
	  else if (ce0 == 1)
	      dout0[3*8+7:3*8] <= #DLY mem[address0][3*8+7:3*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[3] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[3] == 0) && (address0 == address1))
            dout1[3*8+7:3*8] <= #DLY din0[3*8+7:3*8];
	  else if (ce1 == 1)
            dout1[3*8+7:3*8] <= #DLY mem[address1][3*8+7:3*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[4] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[4] == 1) && (address0 == address1))
	      dout0[4*8+7:4*8] <= #DLY din1[4*8+7:4*8];
	  else if (ce0 == 1)
	      dout0[4*8+7:4*8] <= #DLY mem[address0][4*8+7:4*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[4] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[4] == 0) && (address0 == address1))
            dout1[4*8+7:4*8] <= #DLY din0[4*8+7:4*8];
	  else if (ce1 == 1)
            dout1[4*8+7:4*8] <= #DLY mem[address1][4*8+7:4*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[5] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[5] == 1) && (address0 == address1))
	      dout0[5*8+7:5*8] <= #DLY din1[5*8+7:5*8];
	  else if (ce0 == 1)
	      dout0[5*8+7:5*8] <= #DLY mem[address0][5*8+7:5*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[5] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[5] == 0) && (address0 == address1))
            dout1[5*8+7:5*8] <= #DLY din0[5*8+7:5*8];
	  else if (ce1 == 1)
            dout1[5*8+7:5*8] <= #DLY mem[address1][5*8+7:5*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[6] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[6] == 1) && (address0 == address1))
	      dout0[6*8+7:6*8] <= #DLY din1[6*8+7:6*8];
	  else if (ce0 == 1)
	      dout0[6*8+7:6*8] <= #DLY mem[address0][6*8+7:6*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[6] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[6] == 0) && (address0 == address1))
            dout1[6*8+7:6*8] <= #DLY din0[6*8+7:6*8];
	  else if (ce1 == 1)
            dout1[6*8+7:6*8] <= #DLY mem[address1][6*8+7:6*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[7] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[7] == 1) && (address0 == address1))
	      dout0[7*8+7:7*8] <= #DLY din1[7*8+7:7*8];
	  else if (ce0 == 1)
	      dout0[7*8+7:7*8] <= #DLY mem[address0][7*8+7:7*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[7] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[7] == 0) && (address0 == address1))
            dout1[7*8+7:7*8] <= #DLY din0[7*8+7:7*8];
	  else if (ce1 == 1)
            dout1[7*8+7:7*8] <= #DLY mem[address1][7*8+7:7*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[8] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[8] == 1) && (address0 == address1))
	      dout0[8*8+7:8*8] <= #DLY din1[8*8+7:8*8];
	  else if (ce0 == 1)
	      dout0[8*8+7:8*8] <= #DLY mem[address0][8*8+7:8*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[8] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[8] == 0) && (address0 == address1))
            dout1[8*8+7:8*8] <= #DLY din0[8*8+7:8*8];
	  else if (ce1 == 1)
            dout1[8*8+7:8*8] <= #DLY mem[address1][8*8+7:8*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[9] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[9] == 1) && (address0 == address1))
	      dout0[9*8+7:9*8] <= #DLY din1[9*8+7:9*8];
	  else if (ce0 == 1)
	      dout0[9*8+7:9*8] <= #DLY mem[address0][9*8+7:9*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[9] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[9] == 0) && (address0 == address1))
            dout1[9*8+7:9*8] <= #DLY din0[9*8+7:9*8];
	  else if (ce1 == 1)
            dout1[9*8+7:9*8] <= #DLY mem[address1][9*8+7:9*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[10] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[10] == 1) && (address0 == address1))
	      dout0[10*8+7:10*8] <= #DLY din1[10*8+7:10*8];
	  else if (ce0 == 1)
	      dout0[10*8+7:10*8] <= #DLY mem[address0][10*8+7:10*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[10] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[10] == 0) && (address0 == address1))
            dout1[10*8+7:10*8] <= #DLY din0[10*8+7:10*8];
	  else if (ce1 == 1)
            dout1[10*8+7:10*8] <= #DLY mem[address1][10*8+7:10*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[11] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[11] == 1) && (address0 == address1))
	      dout0[11*8+7:11*8] <= #DLY din1[11*8+7:11*8];
	  else if (ce0 == 1)
	      dout0[11*8+7:11*8] <= #DLY mem[address0][11*8+7:11*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[11] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[11] == 0) && (address0 == address1))
            dout1[11*8+7:11*8] <= #DLY din0[11*8+7:11*8];
	  else if (ce1 == 1)
            dout1[11*8+7:11*8] <= #DLY mem[address1][11*8+7:11*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[12] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[12] == 1) && (address0 == address1))
	      dout0[12*8+7:12*8] <= #DLY din1[12*8+7:12*8];
	  else if (ce0 == 1)
	      dout0[12*8+7:12*8] <= #DLY mem[address0][12*8+7:12*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[12] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[12] == 0) && (address0 == address1))
            dout1[12*8+7:12*8] <= #DLY din0[12*8+7:12*8];
	  else if (ce1 == 1)
            dout1[12*8+7:12*8] <= #DLY mem[address1][12*8+7:12*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[13] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[13] == 1) && (address0 == address1))
	      dout0[13*8+7:13*8] <= #DLY din1[13*8+7:13*8];
	  else if (ce0 == 1)
	      dout0[13*8+7:13*8] <= #DLY mem[address0][13*8+7:13*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[13] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[13] == 0) && (address0 == address1))
            dout1[13*8+7:13*8] <= #DLY din0[13*8+7:13*8];
	  else if (ce1 == 1)
            dout1[13*8+7:13*8] <= #DLY mem[address1][13*8+7:13*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[14] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[14] == 1) && (address0 == address1))
	      dout0[14*8+7:14*8] <= #DLY din1[14*8+7:14*8];
	  else if (ce0 == 1)
	      dout0[14*8+7:14*8] <= #DLY mem[address0][14*8+7:14*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[14] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[14] == 0) && (address0 == address1))
            dout1[14*8+7:14*8] <= #DLY din0[14*8+7:14*8];
	  else if (ce1 == 1)
            dout1[14*8+7:14*8] <= #DLY mem[address1][14*8+7:14*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[15] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[15] == 1) && (address0 == address1))
	      dout0[15*8+7:15*8] <= #DLY din1[15*8+7:15*8];
	  else if (ce0 == 1)
	      dout0[15*8+7:15*8] <= #DLY mem[address0][15*8+7:15*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[15] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[15] == 0) && (address0 == address1))
            dout1[15*8+7:15*8] <= #DLY din0[15*8+7:15*8];
	  else if (ce1 == 1)
            dout1[15*8+7:15*8] <= #DLY mem[address1][15*8+7:15*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[16] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[16] == 1) && (address0 == address1))
	      dout0[16*8+7:16*8] <= #DLY din1[16*8+7:16*8];
	  else if (ce0 == 1)
	      dout0[16*8+7:16*8] <= #DLY mem[address0][16*8+7:16*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[16] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[16] == 0) && (address0 == address1))
            dout1[16*8+7:16*8] <= #DLY din0[16*8+7:16*8];
	  else if (ce1 == 1)
            dout1[16*8+7:16*8] <= #DLY mem[address1][16*8+7:16*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[17] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[17] == 1) && (address0 == address1))
	      dout0[17*8+7:17*8] <= #DLY din1[17*8+7:17*8];
	  else if (ce0 == 1)
	      dout0[17*8+7:17*8] <= #DLY mem[address0][17*8+7:17*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[17] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[17] == 0) && (address0 == address1))
            dout1[17*8+7:17*8] <= #DLY din0[17*8+7:17*8];
	  else if (ce1 == 1)
            dout1[17*8+7:17*8] <= #DLY mem[address1][17*8+7:17*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[18] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[18] == 1) && (address0 == address1))
	      dout0[18*8+7:18*8] <= #DLY din1[18*8+7:18*8];
	  else if (ce0 == 1)
	      dout0[18*8+7:18*8] <= #DLY mem[address0][18*8+7:18*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[18] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[18] == 0) && (address0 == address1))
            dout1[18*8+7:18*8] <= #DLY din0[18*8+7:18*8];
	  else if (ce1 == 1)
            dout1[18*8+7:18*8] <= #DLY mem[address1][18*8+7:18*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[19] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[19] == 1) && (address0 == address1))
	      dout0[19*8+7:19*8] <= #DLY din1[19*8+7:19*8];
	  else if (ce0 == 1)
	      dout0[19*8+7:19*8] <= #DLY mem[address0][19*8+7:19*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[19] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[19] == 0) && (address0 == address1))
            dout1[19*8+7:19*8] <= #DLY din0[19*8+7:19*8];
	  else if (ce1 == 1)
            dout1[19*8+7:19*8] <= #DLY mem[address1][19*8+7:19*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[20] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[20] == 1) && (address0 == address1))
	      dout0[20*8+7:20*8] <= #DLY din1[20*8+7:20*8];
	  else if (ce0 == 1)
	      dout0[20*8+7:20*8] <= #DLY mem[address0][20*8+7:20*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[20] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[20] == 0) && (address0 == address1))
            dout1[20*8+7:20*8] <= #DLY din0[20*8+7:20*8];
	  else if (ce1 == 1)
            dout1[20*8+7:20*8] <= #DLY mem[address1][20*8+7:20*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[21] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[21] == 1) && (address0 == address1))
	      dout0[21*8+7:21*8] <= #DLY din1[21*8+7:21*8];
	  else if (ce0 == 1)
	      dout0[21*8+7:21*8] <= #DLY mem[address0][21*8+7:21*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[21] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[21] == 0) && (address0 == address1))
            dout1[21*8+7:21*8] <= #DLY din0[21*8+7:21*8];
	  else if (ce1 == 1)
            dout1[21*8+7:21*8] <= #DLY mem[address1][21*8+7:21*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[22] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[22] == 1) && (address0 == address1))
	      dout0[22*8+7:22*8] <= #DLY din1[22*8+7:22*8];
	  else if (ce0 == 1)
	      dout0[22*8+7:22*8] <= #DLY mem[address0][22*8+7:22*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[22] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[22] == 0) && (address0 == address1))
            dout1[22*8+7:22*8] <= #DLY din0[22*8+7:22*8];
	  else if (ce1 == 1)
            dout1[22*8+7:22*8] <= #DLY mem[address1][22*8+7:22*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[23] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[23] == 1) && (address0 == address1))
	      dout0[23*8+7:23*8] <= #DLY din1[23*8+7:23*8];
	  else if (ce0 == 1)
	      dout0[23*8+7:23*8] <= #DLY mem[address0][23*8+7:23*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[23] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[23] == 0) && (address0 == address1))
            dout1[23*8+7:23*8] <= #DLY din0[23*8+7:23*8];
	  else if (ce1 == 1)
            dout1[23*8+7:23*8] <= #DLY mem[address1][23*8+7:23*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[24] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[24] == 1) && (address0 == address1))
	      dout0[24*8+7:24*8] <= #DLY din1[24*8+7:24*8];
	  else if (ce0 == 1)
	      dout0[24*8+7:24*8] <= #DLY mem[address0][24*8+7:24*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[24] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[24] == 0) && (address0 == address1))
            dout1[24*8+7:24*8] <= #DLY din0[24*8+7:24*8];
	  else if (ce1 == 1)
            dout1[24*8+7:24*8] <= #DLY mem[address1][24*8+7:24*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[25] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[25] == 1) && (address0 == address1))
	      dout0[25*8+7:25*8] <= #DLY din1[25*8+7:25*8];
	  else if (ce0 == 1)
	      dout0[25*8+7:25*8] <= #DLY mem[address0][25*8+7:25*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[25] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[25] == 0) && (address0 == address1))
            dout1[25*8+7:25*8] <= #DLY din0[25*8+7:25*8];
	  else if (ce1 == 1)
            dout1[25*8+7:25*8] <= #DLY mem[address1][25*8+7:25*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[26] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[26] == 1) && (address0 == address1))
	      dout0[26*8+7:26*8] <= #DLY din1[26*8+7:26*8];
	  else if (ce0 == 1)
	      dout0[26*8+7:26*8] <= #DLY mem[address0][26*8+7:26*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[26] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[26] == 0) && (address0 == address1))
            dout1[26*8+7:26*8] <= #DLY din0[26*8+7:26*8];
	  else if (ce1 == 1)
            dout1[26*8+7:26*8] <= #DLY mem[address1][26*8+7:26*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[27] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[27] == 1) && (address0 == address1))
	      dout0[27*8+7:27*8] <= #DLY din1[27*8+7:27*8];
	  else if (ce0 == 1)
	      dout0[27*8+7:27*8] <= #DLY mem[address0][27*8+7:27*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[27] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[27] == 0) && (address0 == address1))
            dout1[27*8+7:27*8] <= #DLY din0[27*8+7:27*8];
	  else if (ce1 == 1)
            dout1[27*8+7:27*8] <= #DLY mem[address1][27*8+7:27*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[28] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[28] == 1) && (address0 == address1))
	      dout0[28*8+7:28*8] <= #DLY din1[28*8+7:28*8];
	  else if (ce0 == 1)
	      dout0[28*8+7:28*8] <= #DLY mem[address0][28*8+7:28*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[28] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[28] == 0) && (address0 == address1))
            dout1[28*8+7:28*8] <= #DLY din0[28*8+7:28*8];
	  else if (ce1 == 1)
            dout1[28*8+7:28*8] <= #DLY mem[address1][28*8+7:28*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[29] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[29] == 1) && (address0 == address1))
	      dout0[29*8+7:29*8] <= #DLY din1[29*8+7:29*8];
	  else if (ce0 == 1)
	      dout0[29*8+7:29*8] <= #DLY mem[address0][29*8+7:29*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[29] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[29] == 0) && (address0 == address1))
            dout1[29*8+7:29*8] <= #DLY din0[29*8+7:29*8];
	  else if (ce1 == 1)
            dout1[29*8+7:29*8] <= #DLY mem[address1][29*8+7:29*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[30] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[30] == 1) && (address0 == address1))
	      dout0[30*8+7:30*8] <= #DLY din1[30*8+7:30*8];
	  else if (ce0 == 1)
	      dout0[30*8+7:30*8] <= #DLY mem[address0][30*8+7:30*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[30] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[30] == 0) && (address0 == address1))
            dout1[30*8+7:30*8] <= #DLY din0[30*8+7:30*8];
	  else if (ce1 == 1)
            dout1[30*8+7:30*8] <= #DLY mem[address1][30*8+7:30*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[31] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[31] == 1) && (address0 == address1))
	      dout0[31*8+7:31*8] <= #DLY din1[31*8+7:31*8];
	  else if (ce0 == 1)
	      dout0[31*8+7:31*8] <= #DLY mem[address0][31*8+7:31*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[31] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[31] == 0) && (address0 == address1))
            dout1[31*8+7:31*8] <= #DLY din0[31*8+7:31*8];
	  else if (ce1 == 1)
            dout1[31*8+7:31*8] <= #DLY mem[address1][31*8+7:31*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[32] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[32] == 1) && (address0 == address1))
	      dout0[32*8+7:32*8] <= #DLY din1[32*8+7:32*8];
	  else if (ce0 == 1)
	      dout0[32*8+7:32*8] <= #DLY mem[address0][32*8+7:32*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[32] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[32] == 0) && (address0 == address1))
            dout1[32*8+7:32*8] <= #DLY din0[32*8+7:32*8];
	  else if (ce1 == 1)
            dout1[32*8+7:32*8] <= #DLY mem[address1][32*8+7:32*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[33] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[33] == 1) && (address0 == address1))
	      dout0[33*8+7:33*8] <= #DLY din1[33*8+7:33*8];
	  else if (ce0 == 1)
	      dout0[33*8+7:33*8] <= #DLY mem[address0][33*8+7:33*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[33] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[33] == 0) && (address0 == address1))
            dout1[33*8+7:33*8] <= #DLY din0[33*8+7:33*8];
	  else if (ce1 == 1)
            dout1[33*8+7:33*8] <= #DLY mem[address1][33*8+7:33*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[34] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[34] == 1) && (address0 == address1))
	      dout0[34*8+7:34*8] <= #DLY din1[34*8+7:34*8];
	  else if (ce0 == 1)
	      dout0[34*8+7:34*8] <= #DLY mem[address0][34*8+7:34*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[34] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[34] == 0) && (address0 == address1))
            dout1[34*8+7:34*8] <= #DLY din0[34*8+7:34*8];
	  else if (ce1 == 1)
            dout1[34*8+7:34*8] <= #DLY mem[address1][34*8+7:34*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[35] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[35] == 1) && (address0 == address1))
	      dout0[35*8+7:35*8] <= #DLY din1[35*8+7:35*8];
	  else if (ce0 == 1)
	      dout0[35*8+7:35*8] <= #DLY mem[address0][35*8+7:35*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[35] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[35] == 0) && (address0 == address1))
            dout1[35*8+7:35*8] <= #DLY din0[35*8+7:35*8];
	  else if (ce1 == 1)
            dout1[35*8+7:35*8] <= #DLY mem[address1][35*8+7:35*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[36] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[36] == 1) && (address0 == address1))
	      dout0[36*8+7:36*8] <= #DLY din1[36*8+7:36*8];
	  else if (ce0 == 1)
	      dout0[36*8+7:36*8] <= #DLY mem[address0][36*8+7:36*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[36] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[36] == 0) && (address0 == address1))
            dout1[36*8+7:36*8] <= #DLY din0[36*8+7:36*8];
	  else if (ce1 == 1)
            dout1[36*8+7:36*8] <= #DLY mem[address1][36*8+7:36*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[37] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[37] == 1) && (address0 == address1))
	      dout0[37*8+7:37*8] <= #DLY din1[37*8+7:37*8];
	  else if (ce0 == 1)
	      dout0[37*8+7:37*8] <= #DLY mem[address0][37*8+7:37*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[37] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[37] == 0) && (address0 == address1))
            dout1[37*8+7:37*8] <= #DLY din0[37*8+7:37*8];
	  else if (ce1 == 1)
            dout1[37*8+7:37*8] <= #DLY mem[address1][37*8+7:37*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[38] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[38] == 1) && (address0 == address1))
	      dout0[38*8+7:38*8] <= #DLY din1[38*8+7:38*8];
	  else if (ce0 == 1)
	      dout0[38*8+7:38*8] <= #DLY mem[address0][38*8+7:38*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[38] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[38] == 0) && (address0 == address1))
            dout1[38*8+7:38*8] <= #DLY din0[38*8+7:38*8];
	  else if (ce1 == 1)
            dout1[38*8+7:38*8] <= #DLY mem[address1][38*8+7:38*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[39] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[39] == 1) && (address0 == address1))
	      dout0[39*8+7:39*8] <= #DLY din1[39*8+7:39*8];
	  else if (ce0 == 1)
	      dout0[39*8+7:39*8] <= #DLY mem[address0][39*8+7:39*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[39] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[39] == 0) && (address0 == address1))
            dout1[39*8+7:39*8] <= #DLY din0[39*8+7:39*8];
	  else if (ce1 == 1)
            dout1[39*8+7:39*8] <= #DLY mem[address1][39*8+7:39*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[40] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[40] == 1) && (address0 == address1))
	      dout0[40*8+7:40*8] <= #DLY din1[40*8+7:40*8];
	  else if (ce0 == 1)
	      dout0[40*8+7:40*8] <= #DLY mem[address0][40*8+7:40*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[40] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[40] == 0) && (address0 == address1))
            dout1[40*8+7:40*8] <= #DLY din0[40*8+7:40*8];
	  else if (ce1 == 1)
            dout1[40*8+7:40*8] <= #DLY mem[address1][40*8+7:40*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[41] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[41] == 1) && (address0 == address1))
	      dout0[41*8+7:41*8] <= #DLY din1[41*8+7:41*8];
	  else if (ce0 == 1)
	      dout0[41*8+7:41*8] <= #DLY mem[address0][41*8+7:41*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[41] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[41] == 0) && (address0 == address1))
            dout1[41*8+7:41*8] <= #DLY din0[41*8+7:41*8];
	  else if (ce1 == 1)
            dout1[41*8+7:41*8] <= #DLY mem[address1][41*8+7:41*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[42] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[42] == 1) && (address0 == address1))
	      dout0[42*8+7:42*8] <= #DLY din1[42*8+7:42*8];
	  else if (ce0 == 1)
	      dout0[42*8+7:42*8] <= #DLY mem[address0][42*8+7:42*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[42] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[42] == 0) && (address0 == address1))
            dout1[42*8+7:42*8] <= #DLY din0[42*8+7:42*8];
	  else if (ce1 == 1)
            dout1[42*8+7:42*8] <= #DLY mem[address1][42*8+7:42*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[43] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[43] == 1) && (address0 == address1))
	      dout0[43*8+7:43*8] <= #DLY din1[43*8+7:43*8];
	  else if (ce0 == 1)
	      dout0[43*8+7:43*8] <= #DLY mem[address0][43*8+7:43*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[43] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[43] == 0) && (address0 == address1))
            dout1[43*8+7:43*8] <= #DLY din0[43*8+7:43*8];
	  else if (ce1 == 1)
            dout1[43*8+7:43*8] <= #DLY mem[address1][43*8+7:43*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[44] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[44] == 1) && (address0 == address1))
	      dout0[44*8+7:44*8] <= #DLY din1[44*8+7:44*8];
	  else if (ce0 == 1)
	      dout0[44*8+7:44*8] <= #DLY mem[address0][44*8+7:44*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[44] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[44] == 0) && (address0 == address1))
            dout1[44*8+7:44*8] <= #DLY din0[44*8+7:44*8];
	  else if (ce1 == 1)
            dout1[44*8+7:44*8] <= #DLY mem[address1][44*8+7:44*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[45] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[45] == 1) && (address0 == address1))
	      dout0[45*8+7:45*8] <= #DLY din1[45*8+7:45*8];
	  else if (ce0 == 1)
	      dout0[45*8+7:45*8] <= #DLY mem[address0][45*8+7:45*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[45] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[45] == 0) && (address0 == address1))
            dout1[45*8+7:45*8] <= #DLY din0[45*8+7:45*8];
	  else if (ce1 == 1)
            dout1[45*8+7:45*8] <= #DLY mem[address1][45*8+7:45*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[46] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[46] == 1) && (address0 == address1))
	      dout0[46*8+7:46*8] <= #DLY din1[46*8+7:46*8];
	  else if (ce0 == 1)
	      dout0[46*8+7:46*8] <= #DLY mem[address0][46*8+7:46*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[46] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[46] == 0) && (address0 == address1))
            dout1[46*8+7:46*8] <= #DLY din0[46*8+7:46*8];
	  else if (ce1 == 1)
            dout1[46*8+7:46*8] <= #DLY mem[address1][46*8+7:46*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[47] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[47] == 1) && (address0 == address1))
	      dout0[47*8+7:47*8] <= #DLY din1[47*8+7:47*8];
	  else if (ce0 == 1)
	      dout0[47*8+7:47*8] <= #DLY mem[address0][47*8+7:47*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[47] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[47] == 0) && (address0 == address1))
            dout1[47*8+7:47*8] <= #DLY din0[47*8+7:47*8];
	  else if (ce1 == 1)
            dout1[47*8+7:47*8] <= #DLY mem[address1][47*8+7:47*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[48] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[48] == 1) && (address0 == address1))
	      dout0[48*8+7:48*8] <= #DLY din1[48*8+7:48*8];
	  else if (ce0 == 1)
	      dout0[48*8+7:48*8] <= #DLY mem[address0][48*8+7:48*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[48] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[48] == 0) && (address0 == address1))
            dout1[48*8+7:48*8] <= #DLY din0[48*8+7:48*8];
	  else if (ce1 == 1)
            dout1[48*8+7:48*8] <= #DLY mem[address1][48*8+7:48*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[49] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[49] == 1) && (address0 == address1))
	      dout0[49*8+7:49*8] <= #DLY din1[49*8+7:49*8];
	  else if (ce0 == 1)
	      dout0[49*8+7:49*8] <= #DLY mem[address0][49*8+7:49*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[49] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[49] == 0) && (address0 == address1))
            dout1[49*8+7:49*8] <= #DLY din0[49*8+7:49*8];
	  else if (ce1 == 1)
            dout1[49*8+7:49*8] <= #DLY mem[address1][49*8+7:49*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[50] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[50] == 1) && (address0 == address1))
	      dout0[50*8+7:50*8] <= #DLY din1[50*8+7:50*8];
	  else if (ce0 == 1)
	      dout0[50*8+7:50*8] <= #DLY mem[address0][50*8+7:50*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[50] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[50] == 0) && (address0 == address1))
            dout1[50*8+7:50*8] <= #DLY din0[50*8+7:50*8];
	  else if (ce1 == 1)
            dout1[50*8+7:50*8] <= #DLY mem[address1][50*8+7:50*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[51] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[51] == 1) && (address0 == address1))
	      dout0[51*8+7:51*8] <= #DLY din1[51*8+7:51*8];
	  else if (ce0 == 1)
	      dout0[51*8+7:51*8] <= #DLY mem[address0][51*8+7:51*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[51] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[51] == 0) && (address0 == address1))
            dout1[51*8+7:51*8] <= #DLY din0[51*8+7:51*8];
	  else if (ce1 == 1)
            dout1[51*8+7:51*8] <= #DLY mem[address1][51*8+7:51*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[52] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[52] == 1) && (address0 == address1))
	      dout0[52*8+7:52*8] <= #DLY din1[52*8+7:52*8];
	  else if (ce0 == 1)
	      dout0[52*8+7:52*8] <= #DLY mem[address0][52*8+7:52*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[52] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[52] == 0) && (address0 == address1))
            dout1[52*8+7:52*8] <= #DLY din0[52*8+7:52*8];
	  else if (ce1 == 1)
            dout1[52*8+7:52*8] <= #DLY mem[address1][52*8+7:52*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[53] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[53] == 1) && (address0 == address1))
	      dout0[53*8+7:53*8] <= #DLY din1[53*8+7:53*8];
	  else if (ce0 == 1)
	      dout0[53*8+7:53*8] <= #DLY mem[address0][53*8+7:53*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[53] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[53] == 0) && (address0 == address1))
            dout1[53*8+7:53*8] <= #DLY din0[53*8+7:53*8];
	  else if (ce1 == 1)
            dout1[53*8+7:53*8] <= #DLY mem[address1][53*8+7:53*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[54] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[54] == 1) && (address0 == address1))
	      dout0[54*8+7:54*8] <= #DLY din1[54*8+7:54*8];
	  else if (ce0 == 1)
	      dout0[54*8+7:54*8] <= #DLY mem[address0][54*8+7:54*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[54] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[54] == 0) && (address0 == address1))
            dout1[54*8+7:54*8] <= #DLY din0[54*8+7:54*8];
	  else if (ce1 == 1)
            dout1[54*8+7:54*8] <= #DLY mem[address1][54*8+7:54*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[55] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[55] == 1) && (address0 == address1))
	      dout0[55*8+7:55*8] <= #DLY din1[55*8+7:55*8];
	  else if (ce0 == 1)
	      dout0[55*8+7:55*8] <= #DLY mem[address0][55*8+7:55*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[55] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[55] == 0) && (address0 == address1))
            dout1[55*8+7:55*8] <= #DLY din0[55*8+7:55*8];
	  else if (ce1 == 1)
            dout1[55*8+7:55*8] <= #DLY mem[address1][55*8+7:55*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[56] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[56] == 1) && (address0 == address1))
	      dout0[56*8+7:56*8] <= #DLY din1[56*8+7:56*8];
	  else if (ce0 == 1)
	      dout0[56*8+7:56*8] <= #DLY mem[address0][56*8+7:56*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[56] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[56] == 0) && (address0 == address1))
            dout1[56*8+7:56*8] <= #DLY din0[56*8+7:56*8];
	  else if (ce1 == 1)
            dout1[56*8+7:56*8] <= #DLY mem[address1][56*8+7:56*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[57] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[57] == 1) && (address0 == address1))
	      dout0[57*8+7:57*8] <= #DLY din1[57*8+7:57*8];
	  else if (ce0 == 1)
	      dout0[57*8+7:57*8] <= #DLY mem[address0][57*8+7:57*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[57] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[57] == 0) && (address0 == address1))
            dout1[57*8+7:57*8] <= #DLY din0[57*8+7:57*8];
	  else if (ce1 == 1)
            dout1[57*8+7:57*8] <= #DLY mem[address1][57*8+7:57*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[58] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[58] == 1) && (address0 == address1))
	      dout0[58*8+7:58*8] <= #DLY din1[58*8+7:58*8];
	  else if (ce0 == 1)
	      dout0[58*8+7:58*8] <= #DLY mem[address0][58*8+7:58*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[58] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[58] == 0) && (address0 == address1))
            dout1[58*8+7:58*8] <= #DLY din0[58*8+7:58*8];
	  else if (ce1 == 1)
            dout1[58*8+7:58*8] <= #DLY mem[address1][58*8+7:58*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[59] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[59] == 1) && (address0 == address1))
	      dout0[59*8+7:59*8] <= #DLY din1[59*8+7:59*8];
	  else if (ce0 == 1)
	      dout0[59*8+7:59*8] <= #DLY mem[address0][59*8+7:59*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[59] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[59] == 0) && (address0 == address1))
            dout1[59*8+7:59*8] <= #DLY din0[59*8+7:59*8];
	  else if (ce1 == 1)
            dout1[59*8+7:59*8] <= #DLY mem[address1][59*8+7:59*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[60] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[60] == 1) && (address0 == address1))
	      dout0[60*8+7:60*8] <= #DLY din1[60*8+7:60*8];
	  else if (ce0 == 1)
	      dout0[60*8+7:60*8] <= #DLY mem[address0][60*8+7:60*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[60] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[60] == 0) && (address0 == address1))
            dout1[60*8+7:60*8] <= #DLY din0[60*8+7:60*8];
	  else if (ce1 == 1)
            dout1[60*8+7:60*8] <= #DLY mem[address1][60*8+7:60*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[61] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[61] == 1) && (address0 == address1))
	      dout0[61*8+7:61*8] <= #DLY din1[61*8+7:61*8];
	  else if (ce0 == 1)
	      dout0[61*8+7:61*8] <= #DLY mem[address0][61*8+7:61*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[61] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[61] == 0) && (address0 == address1))
            dout1[61*8+7:61*8] <= #DLY din0[61*8+7:61*8];
	  else if (ce1 == 1)
            dout1[61*8+7:61*8] <= #DLY mem[address1][61*8+7:61*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[62] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[62] == 1) && (address0 == address1))
	      dout0[62*8+7:62*8] <= #DLY din1[62*8+7:62*8];
	  else if (ce0 == 1)
	      dout0[62*8+7:62*8] <= #DLY mem[address0][62*8+7:62*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[62] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[62] == 0) && (address0 == address1))
            dout1[62*8+7:62*8] <= #DLY din0[62*8+7:62*8];
	  else if (ce1 == 1)
            dout1[62*8+7:62*8] <= #DLY mem[address1][62*8+7:62*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[63] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[63] == 1) && (address0 == address1))
	      dout0[63*8+7:63*8] <= #DLY din1[63*8+7:63*8];
	  else if (ce0 == 1)
	      dout0[63*8+7:63*8] <= #DLY mem[address0][63*8+7:63*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[63] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[63] == 0) && (address0 == address1))
            dout1[63*8+7:63*8] <= #DLY din0[63*8+7:63*8];
	  else if (ce1 == 1)
            dout1[63*8+7:63*8] <= #DLY mem[address1][63*8+7:63*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[64] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[64] == 1) && (address0 == address1))
	      dout0[64*8+7:64*8] <= #DLY din1[64*8+7:64*8];
	  else if (ce0 == 1)
	      dout0[64*8+7:64*8] <= #DLY mem[address0][64*8+7:64*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[64] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[64] == 0) && (address0 == address1))
            dout1[64*8+7:64*8] <= #DLY din0[64*8+7:64*8];
	  else if (ce1 == 1)
            dout1[64*8+7:64*8] <= #DLY mem[address1][64*8+7:64*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[65] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[65] == 1) && (address0 == address1))
	      dout0[65*8+7:65*8] <= #DLY din1[65*8+7:65*8];
	  else if (ce0 == 1)
	      dout0[65*8+7:65*8] <= #DLY mem[address0][65*8+7:65*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[65] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[65] == 0) && (address0 == address1))
            dout1[65*8+7:65*8] <= #DLY din0[65*8+7:65*8];
	  else if (ce1 == 1)
            dout1[65*8+7:65*8] <= #DLY mem[address1][65*8+7:65*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[66] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[66] == 1) && (address0 == address1))
	      dout0[66*8+7:66*8] <= #DLY din1[66*8+7:66*8];
	  else if (ce0 == 1)
	      dout0[66*8+7:66*8] <= #DLY mem[address0][66*8+7:66*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[66] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[66] == 0) && (address0 == address1))
            dout1[66*8+7:66*8] <= #DLY din0[66*8+7:66*8];
	  else if (ce1 == 1)
            dout1[66*8+7:66*8] <= #DLY mem[address1][66*8+7:66*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[67] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[67] == 1) && (address0 == address1))
	      dout0[67*8+7:67*8] <= #DLY din1[67*8+7:67*8];
	  else if (ce0 == 1)
	      dout0[67*8+7:67*8] <= #DLY mem[address0][67*8+7:67*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[67] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[67] == 0) && (address0 == address1))
            dout1[67*8+7:67*8] <= #DLY din0[67*8+7:67*8];
	  else if (ce1 == 1)
            dout1[67*8+7:67*8] <= #DLY mem[address1][67*8+7:67*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[68] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[68] == 1) && (address0 == address1))
	      dout0[68*8+7:68*8] <= #DLY din1[68*8+7:68*8];
	  else if (ce0 == 1)
	      dout0[68*8+7:68*8] <= #DLY mem[address0][68*8+7:68*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[68] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[68] == 0) && (address0 == address1))
            dout1[68*8+7:68*8] <= #DLY din0[68*8+7:68*8];
	  else if (ce1 == 1)
            dout1[68*8+7:68*8] <= #DLY mem[address1][68*8+7:68*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[69] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[69] == 1) && (address0 == address1))
	      dout0[69*8+7:69*8] <= #DLY din1[69*8+7:69*8];
	  else if (ce0 == 1)
	      dout0[69*8+7:69*8] <= #DLY mem[address0][69*8+7:69*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[69] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[69] == 0) && (address0 == address1))
            dout1[69*8+7:69*8] <= #DLY din0[69*8+7:69*8];
	  else if (ce1 == 1)
            dout1[69*8+7:69*8] <= #DLY mem[address1][69*8+7:69*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[70] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[70] == 1) && (address0 == address1))
	      dout0[70*8+7:70*8] <= #DLY din1[70*8+7:70*8];
	  else if (ce0 == 1)
	      dout0[70*8+7:70*8] <= #DLY mem[address0][70*8+7:70*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[70] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[70] == 0) && (address0 == address1))
            dout1[70*8+7:70*8] <= #DLY din0[70*8+7:70*8];
	  else if (ce1 == 1)
            dout1[70*8+7:70*8] <= #DLY mem[address1][70*8+7:70*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[71] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[71] == 1) && (address0 == address1))
	      dout0[71*8+7:71*8] <= #DLY din1[71*8+7:71*8];
	  else if (ce0 == 1)
	      dout0[71*8+7:71*8] <= #DLY mem[address0][71*8+7:71*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[71] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[71] == 0) && (address0 == address1))
            dout1[71*8+7:71*8] <= #DLY din0[71*8+7:71*8];
	  else if (ce1 == 1)
            dout1[71*8+7:71*8] <= #DLY mem[address1][71*8+7:71*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[72] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[72] == 1) && (address0 == address1))
	      dout0[72*8+7:72*8] <= #DLY din1[72*8+7:72*8];
	  else if (ce0 == 1)
	      dout0[72*8+7:72*8] <= #DLY mem[address0][72*8+7:72*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[72] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[72] == 0) && (address0 == address1))
            dout1[72*8+7:72*8] <= #DLY din0[72*8+7:72*8];
	  else if (ce1 == 1)
            dout1[72*8+7:72*8] <= #DLY mem[address1][72*8+7:72*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[73] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[73] == 1) && (address0 == address1))
	      dout0[73*8+7:73*8] <= #DLY din1[73*8+7:73*8];
	  else if (ce0 == 1)
	      dout0[73*8+7:73*8] <= #DLY mem[address0][73*8+7:73*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[73] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[73] == 0) && (address0 == address1))
            dout1[73*8+7:73*8] <= #DLY din0[73*8+7:73*8];
	  else if (ce1 == 1)
            dout1[73*8+7:73*8] <= #DLY mem[address1][73*8+7:73*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[74] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[74] == 1) && (address0 == address1))
	      dout0[74*8+7:74*8] <= #DLY din1[74*8+7:74*8];
	  else if (ce0 == 1)
	      dout0[74*8+7:74*8] <= #DLY mem[address0][74*8+7:74*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[74] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[74] == 0) && (address0 == address1))
            dout1[74*8+7:74*8] <= #DLY din0[74*8+7:74*8];
	  else if (ce1 == 1)
            dout1[74*8+7:74*8] <= #DLY mem[address1][74*8+7:74*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[75] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[75] == 1) && (address0 == address1))
	      dout0[75*8+7:75*8] <= #DLY din1[75*8+7:75*8];
	  else if (ce0 == 1)
	      dout0[75*8+7:75*8] <= #DLY mem[address0][75*8+7:75*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[75] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[75] == 0) && (address0 == address1))
            dout1[75*8+7:75*8] <= #DLY din0[75*8+7:75*8];
	  else if (ce1 == 1)
            dout1[75*8+7:75*8] <= #DLY mem[address1][75*8+7:75*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[76] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[76] == 1) && (address0 == address1))
	      dout0[76*8+7:76*8] <= #DLY din1[76*8+7:76*8];
	  else if (ce0 == 1)
	      dout0[76*8+7:76*8] <= #DLY mem[address0][76*8+7:76*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[76] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[76] == 0) && (address0 == address1))
            dout1[76*8+7:76*8] <= #DLY din0[76*8+7:76*8];
	  else if (ce1 == 1)
            dout1[76*8+7:76*8] <= #DLY mem[address1][76*8+7:76*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[77] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[77] == 1) && (address0 == address1))
	      dout0[77*8+7:77*8] <= #DLY din1[77*8+7:77*8];
	  else if (ce0 == 1)
	      dout0[77*8+7:77*8] <= #DLY mem[address0][77*8+7:77*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[77] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[77] == 0) && (address0 == address1))
            dout1[77*8+7:77*8] <= #DLY din0[77*8+7:77*8];
	  else if (ce1 == 1)
            dout1[77*8+7:77*8] <= #DLY mem[address1][77*8+7:77*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[78] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[78] == 1) && (address0 == address1))
	      dout0[78*8+7:78*8] <= #DLY din1[78*8+7:78*8];
	  else if (ce0 == 1)
	      dout0[78*8+7:78*8] <= #DLY mem[address0][78*8+7:78*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[78] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[78] == 0) && (address0 == address1))
            dout1[78*8+7:78*8] <= #DLY din0[78*8+7:78*8];
	  else if (ce1 == 1)
            dout1[78*8+7:78*8] <= #DLY mem[address1][78*8+7:78*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[79] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[79] == 1) && (address0 == address1))
	      dout0[79*8+7:79*8] <= #DLY din1[79*8+7:79*8];
	  else if (ce0 == 1)
	      dout0[79*8+7:79*8] <= #DLY mem[address0][79*8+7:79*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[79] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[79] == 0) && (address0 == address1))
            dout1[79*8+7:79*8] <= #DLY din0[79*8+7:79*8];
	  else if (ce1 == 1)
            dout1[79*8+7:79*8] <= #DLY mem[address1][79*8+7:79*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[80] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[80] == 1) && (address0 == address1))
	      dout0[80*8+7:80*8] <= #DLY din1[80*8+7:80*8];
	  else if (ce0 == 1)
	      dout0[80*8+7:80*8] <= #DLY mem[address0][80*8+7:80*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[80] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[80] == 0) && (address0 == address1))
            dout1[80*8+7:80*8] <= #DLY din0[80*8+7:80*8];
	  else if (ce1 == 1)
            dout1[80*8+7:80*8] <= #DLY mem[address1][80*8+7:80*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[81] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[81] == 1) && (address0 == address1))
	      dout0[81*8+7:81*8] <= #DLY din1[81*8+7:81*8];
	  else if (ce0 == 1)
	      dout0[81*8+7:81*8] <= #DLY mem[address0][81*8+7:81*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[81] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[81] == 0) && (address0 == address1))
            dout1[81*8+7:81*8] <= #DLY din0[81*8+7:81*8];
	  else if (ce1 == 1)
            dout1[81*8+7:81*8] <= #DLY mem[address1][81*8+7:81*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[82] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[82] == 1) && (address0 == address1))
	      dout0[82*8+7:82*8] <= #DLY din1[82*8+7:82*8];
	  else if (ce0 == 1)
	      dout0[82*8+7:82*8] <= #DLY mem[address0][82*8+7:82*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[82] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[82] == 0) && (address0 == address1))
            dout1[82*8+7:82*8] <= #DLY din0[82*8+7:82*8];
	  else if (ce1 == 1)
            dout1[82*8+7:82*8] <= #DLY mem[address1][82*8+7:82*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[83] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[83] == 1) && (address0 == address1))
	      dout0[83*8+7:83*8] <= #DLY din1[83*8+7:83*8];
	  else if (ce0 == 1)
	      dout0[83*8+7:83*8] <= #DLY mem[address0][83*8+7:83*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[83] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[83] == 0) && (address0 == address1))
            dout1[83*8+7:83*8] <= #DLY din0[83*8+7:83*8];
	  else if (ce1 == 1)
            dout1[83*8+7:83*8] <= #DLY mem[address1][83*8+7:83*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[84] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[84] == 1) && (address0 == address1))
	      dout0[84*8+7:84*8] <= #DLY din1[84*8+7:84*8];
	  else if (ce0 == 1)
	      dout0[84*8+7:84*8] <= #DLY mem[address0][84*8+7:84*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[84] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[84] == 0) && (address0 == address1))
            dout1[84*8+7:84*8] <= #DLY din0[84*8+7:84*8];
	  else if (ce1 == 1)
            dout1[84*8+7:84*8] <= #DLY mem[address1][84*8+7:84*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[85] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[85] == 1) && (address0 == address1))
	      dout0[85*8+7:85*8] <= #DLY din1[85*8+7:85*8];
	  else if (ce0 == 1)
	      dout0[85*8+7:85*8] <= #DLY mem[address0][85*8+7:85*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[85] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[85] == 0) && (address0 == address1))
            dout1[85*8+7:85*8] <= #DLY din0[85*8+7:85*8];
	  else if (ce1 == 1)
            dout1[85*8+7:85*8] <= #DLY mem[address1][85*8+7:85*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[86] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[86] == 1) && (address0 == address1))
	      dout0[86*8+7:86*8] <= #DLY din1[86*8+7:86*8];
	  else if (ce0 == 1)
	      dout0[86*8+7:86*8] <= #DLY mem[address0][86*8+7:86*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[86] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[86] == 0) && (address0 == address1))
            dout1[86*8+7:86*8] <= #DLY din0[86*8+7:86*8];
	  else if (ce1 == 1)
            dout1[86*8+7:86*8] <= #DLY mem[address1][86*8+7:86*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[87] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[87] == 1) && (address0 == address1))
	      dout0[87*8+7:87*8] <= #DLY din1[87*8+7:87*8];
	  else if (ce0 == 1)
	      dout0[87*8+7:87*8] <= #DLY mem[address0][87*8+7:87*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[87] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[87] == 0) && (address0 == address1))
            dout1[87*8+7:87*8] <= #DLY din0[87*8+7:87*8];
	  else if (ce1 == 1)
            dout1[87*8+7:87*8] <= #DLY mem[address1][87*8+7:87*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[88] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[88] == 1) && (address0 == address1))
	      dout0[88*8+7:88*8] <= #DLY din1[88*8+7:88*8];
	  else if (ce0 == 1)
	      dout0[88*8+7:88*8] <= #DLY mem[address0][88*8+7:88*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[88] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[88] == 0) && (address0 == address1))
            dout1[88*8+7:88*8] <= #DLY din0[88*8+7:88*8];
	  else if (ce1 == 1)
            dout1[88*8+7:88*8] <= #DLY mem[address1][88*8+7:88*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[89] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[89] == 1) && (address0 == address1))
	      dout0[89*8+7:89*8] <= #DLY din1[89*8+7:89*8];
	  else if (ce0 == 1)
	      dout0[89*8+7:89*8] <= #DLY mem[address0][89*8+7:89*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[89] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[89] == 0) && (address0 == address1))
            dout1[89*8+7:89*8] <= #DLY din0[89*8+7:89*8];
	  else if (ce1 == 1)
            dout1[89*8+7:89*8] <= #DLY mem[address1][89*8+7:89*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[90] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[90] == 1) && (address0 == address1))
	      dout0[90*8+7:90*8] <= #DLY din1[90*8+7:90*8];
	  else if (ce0 == 1)
	      dout0[90*8+7:90*8] <= #DLY mem[address0][90*8+7:90*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[90] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[90] == 0) && (address0 == address1))
            dout1[90*8+7:90*8] <= #DLY din0[90*8+7:90*8];
	  else if (ce1 == 1)
            dout1[90*8+7:90*8] <= #DLY mem[address1][90*8+7:90*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[91] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[91] == 1) && (address0 == address1))
	      dout0[91*8+7:91*8] <= #DLY din1[91*8+7:91*8];
	  else if (ce0 == 1)
	      dout0[91*8+7:91*8] <= #DLY mem[address0][91*8+7:91*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[91] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[91] == 0) && (address0 == address1))
            dout1[91*8+7:91*8] <= #DLY din0[91*8+7:91*8];
	  else if (ce1 == 1)
            dout1[91*8+7:91*8] <= #DLY mem[address1][91*8+7:91*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[92] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[92] == 1) && (address0 == address1))
	      dout0[92*8+7:92*8] <= #DLY din1[92*8+7:92*8];
	  else if (ce0 == 1)
	      dout0[92*8+7:92*8] <= #DLY mem[address0][92*8+7:92*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[92] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[92] == 0) && (address0 == address1))
            dout1[92*8+7:92*8] <= #DLY din0[92*8+7:92*8];
	  else if (ce1 == 1)
            dout1[92*8+7:92*8] <= #DLY mem[address1][92*8+7:92*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[93] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[93] == 1) && (address0 == address1))
	      dout0[93*8+7:93*8] <= #DLY din1[93*8+7:93*8];
	  else if (ce0 == 1)
	      dout0[93*8+7:93*8] <= #DLY mem[address0][93*8+7:93*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[93] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[93] == 0) && (address0 == address1))
            dout1[93*8+7:93*8] <= #DLY din0[93*8+7:93*8];
	  else if (ce1 == 1)
            dout1[93*8+7:93*8] <= #DLY mem[address1][93*8+7:93*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[94] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[94] == 1) && (address0 == address1))
	      dout0[94*8+7:94*8] <= #DLY din1[94*8+7:94*8];
	  else if (ce0 == 1)
	      dout0[94*8+7:94*8] <= #DLY mem[address0][94*8+7:94*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[94] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[94] == 0) && (address0 == address1))
            dout1[94*8+7:94*8] <= #DLY din0[94*8+7:94*8];
	  else if (ce1 == 1)
            dout1[94*8+7:94*8] <= #DLY mem[address1][94*8+7:94*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[95] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[95] == 1) && (address0 == address1))
	      dout0[95*8+7:95*8] <= #DLY din1[95*8+7:95*8];
	  else if (ce0 == 1)
	      dout0[95*8+7:95*8] <= #DLY mem[address0][95*8+7:95*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[95] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[95] == 0) && (address0 == address1))
            dout1[95*8+7:95*8] <= #DLY din0[95*8+7:95*8];
	  else if (ce1 == 1)
            dout1[95*8+7:95*8] <= #DLY mem[address1][95*8+7:95*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[96] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[96] == 1) && (address0 == address1))
	      dout0[96*8+7:96*8] <= #DLY din1[96*8+7:96*8];
	  else if (ce0 == 1)
	      dout0[96*8+7:96*8] <= #DLY mem[address0][96*8+7:96*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[96] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[96] == 0) && (address0 == address1))
            dout1[96*8+7:96*8] <= #DLY din0[96*8+7:96*8];
	  else if (ce1 == 1)
            dout1[96*8+7:96*8] <= #DLY mem[address1][96*8+7:96*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[97] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[97] == 1) && (address0 == address1))
	      dout0[97*8+7:97*8] <= #DLY din1[97*8+7:97*8];
	  else if (ce0 == 1)
	      dout0[97*8+7:97*8] <= #DLY mem[address0][97*8+7:97*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[97] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[97] == 0) && (address0 == address1))
            dout1[97*8+7:97*8] <= #DLY din0[97*8+7:97*8];
	  else if (ce1 == 1)
            dout1[97*8+7:97*8] <= #DLY mem[address1][97*8+7:97*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[98] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[98] == 1) && (address0 == address1))
	      dout0[98*8+7:98*8] <= #DLY din1[98*8+7:98*8];
	  else if (ce0 == 1)
	      dout0[98*8+7:98*8] <= #DLY mem[address0][98*8+7:98*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[98] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[98] == 0) && (address0 == address1))
            dout1[98*8+7:98*8] <= #DLY din0[98*8+7:98*8];
	  else if (ce1 == 1)
            dout1[98*8+7:98*8] <= #DLY mem[address1][98*8+7:98*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[99] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[99] == 1) && (address0 == address1))
	      dout0[99*8+7:99*8] <= #DLY din1[99*8+7:99*8];
	  else if (ce0 == 1)
	      dout0[99*8+7:99*8] <= #DLY mem[address0][99*8+7:99*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[99] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[99] == 0) && (address0 == address1))
            dout1[99*8+7:99*8] <= #DLY din0[99*8+7:99*8];
	  else if (ce1 == 1)
            dout1[99*8+7:99*8] <= #DLY mem[address1][99*8+7:99*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[100] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[100] == 1) && (address0 == address1))
	      dout0[100*8+7:100*8] <= #DLY din1[100*8+7:100*8];
	  else if (ce0 == 1)
	      dout0[100*8+7:100*8] <= #DLY mem[address0][100*8+7:100*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[100] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[100] == 0) && (address0 == address1))
            dout1[100*8+7:100*8] <= #DLY din0[100*8+7:100*8];
	  else if (ce1 == 1)
            dout1[100*8+7:100*8] <= #DLY mem[address1][100*8+7:100*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[101] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[101] == 1) && (address0 == address1))
	      dout0[101*8+7:101*8] <= #DLY din1[101*8+7:101*8];
	  else if (ce0 == 1)
	      dout0[101*8+7:101*8] <= #DLY mem[address0][101*8+7:101*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[101] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[101] == 0) && (address0 == address1))
            dout1[101*8+7:101*8] <= #DLY din0[101*8+7:101*8];
	  else if (ce1 == 1)
            dout1[101*8+7:101*8] <= #DLY mem[address1][101*8+7:101*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[102] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[102] == 1) && (address0 == address1))
	      dout0[102*8+7:102*8] <= #DLY din1[102*8+7:102*8];
	  else if (ce0 == 1)
	      dout0[102*8+7:102*8] <= #DLY mem[address0][102*8+7:102*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[102] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[102] == 0) && (address0 == address1))
            dout1[102*8+7:102*8] <= #DLY din0[102*8+7:102*8];
	  else if (ce1 == 1)
            dout1[102*8+7:102*8] <= #DLY mem[address1][102*8+7:102*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[103] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[103] == 1) && (address0 == address1))
	      dout0[103*8+7:103*8] <= #DLY din1[103*8+7:103*8];
	  else if (ce0 == 1)
	      dout0[103*8+7:103*8] <= #DLY mem[address0][103*8+7:103*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[103] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[103] == 0) && (address0 == address1))
            dout1[103*8+7:103*8] <= #DLY din0[103*8+7:103*8];
	  else if (ce1 == 1)
            dout1[103*8+7:103*8] <= #DLY mem[address1][103*8+7:103*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[104] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[104] == 1) && (address0 == address1))
	      dout0[104*8+7:104*8] <= #DLY din1[104*8+7:104*8];
	  else if (ce0 == 1)
	      dout0[104*8+7:104*8] <= #DLY mem[address0][104*8+7:104*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[104] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[104] == 0) && (address0 == address1))
            dout1[104*8+7:104*8] <= #DLY din0[104*8+7:104*8];
	  else if (ce1 == 1)
            dout1[104*8+7:104*8] <= #DLY mem[address1][104*8+7:104*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[105] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[105] == 1) && (address0 == address1))
	      dout0[105*8+7:105*8] <= #DLY din1[105*8+7:105*8];
	  else if (ce0 == 1)
	      dout0[105*8+7:105*8] <= #DLY mem[address0][105*8+7:105*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[105] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[105] == 0) && (address0 == address1))
            dout1[105*8+7:105*8] <= #DLY din0[105*8+7:105*8];
	  else if (ce1 == 1)
            dout1[105*8+7:105*8] <= #DLY mem[address1][105*8+7:105*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[106] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[106] == 1) && (address0 == address1))
	      dout0[106*8+7:106*8] <= #DLY din1[106*8+7:106*8];
	  else if (ce0 == 1)
	      dout0[106*8+7:106*8] <= #DLY mem[address0][106*8+7:106*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[106] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[106] == 0) && (address0 == address1))
            dout1[106*8+7:106*8] <= #DLY din0[106*8+7:106*8];
	  else if (ce1 == 1)
            dout1[106*8+7:106*8] <= #DLY mem[address1][106*8+7:106*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[107] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[107] == 1) && (address0 == address1))
	      dout0[107*8+7:107*8] <= #DLY din1[107*8+7:107*8];
	  else if (ce0 == 1)
	      dout0[107*8+7:107*8] <= #DLY mem[address0][107*8+7:107*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[107] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[107] == 0) && (address0 == address1))
            dout1[107*8+7:107*8] <= #DLY din0[107*8+7:107*8];
	  else if (ce1 == 1)
            dout1[107*8+7:107*8] <= #DLY mem[address1][107*8+7:107*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[108] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[108] == 1) && (address0 == address1))
	      dout0[108*8+7:108*8] <= #DLY din1[108*8+7:108*8];
	  else if (ce0 == 1)
	      dout0[108*8+7:108*8] <= #DLY mem[address0][108*8+7:108*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[108] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[108] == 0) && (address0 == address1))
            dout1[108*8+7:108*8] <= #DLY din0[108*8+7:108*8];
	  else if (ce1 == 1)
            dout1[108*8+7:108*8] <= #DLY mem[address1][108*8+7:108*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[109] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[109] == 1) && (address0 == address1))
	      dout0[109*8+7:109*8] <= #DLY din1[109*8+7:109*8];
	  else if (ce0 == 1)
	      dout0[109*8+7:109*8] <= #DLY mem[address0][109*8+7:109*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[109] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[109] == 0) && (address0 == address1))
            dout1[109*8+7:109*8] <= #DLY din0[109*8+7:109*8];
	  else if (ce1 == 1)
            dout1[109*8+7:109*8] <= #DLY mem[address1][109*8+7:109*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[110] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[110] == 1) && (address0 == address1))
	      dout0[110*8+7:110*8] <= #DLY din1[110*8+7:110*8];
	  else if (ce0 == 1)
	      dout0[110*8+7:110*8] <= #DLY mem[address0][110*8+7:110*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[110] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[110] == 0) && (address0 == address1))
            dout1[110*8+7:110*8] <= #DLY din0[110*8+7:110*8];
	  else if (ce1 == 1)
            dout1[110*8+7:110*8] <= #DLY mem[address1][110*8+7:110*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[111] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[111] == 1) && (address0 == address1))
	      dout0[111*8+7:111*8] <= #DLY din1[111*8+7:111*8];
	  else if (ce0 == 1)
	      dout0[111*8+7:111*8] <= #DLY mem[address0][111*8+7:111*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[111] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[111] == 0) && (address0 == address1))
            dout1[111*8+7:111*8] <= #DLY din0[111*8+7:111*8];
	  else if (ce1 == 1)
            dout1[111*8+7:111*8] <= #DLY mem[address1][111*8+7:111*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[112] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[112] == 1) && (address0 == address1))
	      dout0[112*8+7:112*8] <= #DLY din1[112*8+7:112*8];
	  else if (ce0 == 1)
	      dout0[112*8+7:112*8] <= #DLY mem[address0][112*8+7:112*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[112] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[112] == 0) && (address0 == address1))
            dout1[112*8+7:112*8] <= #DLY din0[112*8+7:112*8];
	  else if (ce1 == 1)
            dout1[112*8+7:112*8] <= #DLY mem[address1][112*8+7:112*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[113] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[113] == 1) && (address0 == address1))
	      dout0[113*8+7:113*8] <= #DLY din1[113*8+7:113*8];
	  else if (ce0 == 1)
	      dout0[113*8+7:113*8] <= #DLY mem[address0][113*8+7:113*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[113] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[113] == 0) && (address0 == address1))
            dout1[113*8+7:113*8] <= #DLY din0[113*8+7:113*8];
	  else if (ce1 == 1)
            dout1[113*8+7:113*8] <= #DLY mem[address1][113*8+7:113*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[114] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[114] == 1) && (address0 == address1))
	      dout0[114*8+7:114*8] <= #DLY din1[114*8+7:114*8];
	  else if (ce0 == 1)
	      dout0[114*8+7:114*8] <= #DLY mem[address0][114*8+7:114*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[114] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[114] == 0) && (address0 == address1))
            dout1[114*8+7:114*8] <= #DLY din0[114*8+7:114*8];
	  else if (ce1 == 1)
            dout1[114*8+7:114*8] <= #DLY mem[address1][114*8+7:114*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[115] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[115] == 1) && (address0 == address1))
	      dout0[115*8+7:115*8] <= #DLY din1[115*8+7:115*8];
	  else if (ce0 == 1)
	      dout0[115*8+7:115*8] <= #DLY mem[address0][115*8+7:115*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[115] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[115] == 0) && (address0 == address1))
            dout1[115*8+7:115*8] <= #DLY din0[115*8+7:115*8];
	  else if (ce1 == 1)
            dout1[115*8+7:115*8] <= #DLY mem[address1][115*8+7:115*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[116] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[116] == 1) && (address0 == address1))
	      dout0[116*8+7:116*8] <= #DLY din1[116*8+7:116*8];
	  else if (ce0 == 1)
	      dout0[116*8+7:116*8] <= #DLY mem[address0][116*8+7:116*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[116] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[116] == 0) && (address0 == address1))
            dout1[116*8+7:116*8] <= #DLY din0[116*8+7:116*8];
	  else if (ce1 == 1)
            dout1[116*8+7:116*8] <= #DLY mem[address1][116*8+7:116*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[117] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[117] == 1) && (address0 == address1))
	      dout0[117*8+7:117*8] <= #DLY din1[117*8+7:117*8];
	  else if (ce0 == 1)
	      dout0[117*8+7:117*8] <= #DLY mem[address0][117*8+7:117*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[117] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[117] == 0) && (address0 == address1))
            dout1[117*8+7:117*8] <= #DLY din0[117*8+7:117*8];
	  else if (ce1 == 1)
            dout1[117*8+7:117*8] <= #DLY mem[address1][117*8+7:117*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[118] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[118] == 1) && (address0 == address1))
	      dout0[118*8+7:118*8] <= #DLY din1[118*8+7:118*8];
	  else if (ce0 == 1)
	      dout0[118*8+7:118*8] <= #DLY mem[address0][118*8+7:118*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[118] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[118] == 0) && (address0 == address1))
            dout1[118*8+7:118*8] <= #DLY din0[118*8+7:118*8];
	  else if (ce1 == 1)
            dout1[118*8+7:118*8] <= #DLY mem[address1][118*8+7:118*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[119] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[119] == 1) && (address0 == address1))
	      dout0[119*8+7:119*8] <= #DLY din1[119*8+7:119*8];
	  else if (ce0 == 1)
	      dout0[119*8+7:119*8] <= #DLY mem[address0][119*8+7:119*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[119] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[119] == 0) && (address0 == address1))
            dout1[119*8+7:119*8] <= #DLY din0[119*8+7:119*8];
	  else if (ce1 == 1)
            dout1[119*8+7:119*8] <= #DLY mem[address1][119*8+7:119*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[120] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[120] == 1) && (address0 == address1))
	      dout0[120*8+7:120*8] <= #DLY din1[120*8+7:120*8];
	  else if (ce0 == 1)
	      dout0[120*8+7:120*8] <= #DLY mem[address0][120*8+7:120*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[120] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[120] == 0) && (address0 == address1))
            dout1[120*8+7:120*8] <= #DLY din0[120*8+7:120*8];
	  else if (ce1 == 1)
            dout1[120*8+7:120*8] <= #DLY mem[address1][120*8+7:120*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[121] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[121] == 1) && (address0 == address1))
	      dout0[121*8+7:121*8] <= #DLY din1[121*8+7:121*8];
	  else if (ce0 == 1)
	      dout0[121*8+7:121*8] <= #DLY mem[address0][121*8+7:121*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[121] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[121] == 0) && (address0 == address1))
            dout1[121*8+7:121*8] <= #DLY din0[121*8+7:121*8];
	  else if (ce1 == 1)
            dout1[121*8+7:121*8] <= #DLY mem[address1][121*8+7:121*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[122] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[122] == 1) && (address0 == address1))
	      dout0[122*8+7:122*8] <= #DLY din1[122*8+7:122*8];
	  else if (ce0 == 1)
	      dout0[122*8+7:122*8] <= #DLY mem[address0][122*8+7:122*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[122] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[122] == 0) && (address0 == address1))
            dout1[122*8+7:122*8] <= #DLY din0[122*8+7:122*8];
	  else if (ce1 == 1)
            dout1[122*8+7:122*8] <= #DLY mem[address1][122*8+7:122*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[123] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[123] == 1) && (address0 == address1))
	      dout0[123*8+7:123*8] <= #DLY din1[123*8+7:123*8];
	  else if (ce0 == 1)
	      dout0[123*8+7:123*8] <= #DLY mem[address0][123*8+7:123*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[123] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[123] == 0) && (address0 == address1))
            dout1[123*8+7:123*8] <= #DLY din0[123*8+7:123*8];
	  else if (ce1 == 1)
            dout1[123*8+7:123*8] <= #DLY mem[address1][123*8+7:123*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[124] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[124] == 1) && (address0 == address1))
	      dout0[124*8+7:124*8] <= #DLY din1[124*8+7:124*8];
	  else if (ce0 == 1)
	      dout0[124*8+7:124*8] <= #DLY mem[address0][124*8+7:124*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[124] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[124] == 0) && (address0 == address1))
            dout1[124*8+7:124*8] <= #DLY din0[124*8+7:124*8];
	  else if (ce1 == 1)
            dout1[124*8+7:124*8] <= #DLY mem[address1][124*8+7:124*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[125] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[125] == 1) && (address0 == address1))
	      dout0[125*8+7:125*8] <= #DLY din1[125*8+7:125*8];
	  else if (ce0 == 1)
	      dout0[125*8+7:125*8] <= #DLY mem[address0][125*8+7:125*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[125] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[125] == 0) && (address0 == address1))
            dout1[125*8+7:125*8] <= #DLY din0[125*8+7:125*8];
	  else if (ce1 == 1)
            dout1[125*8+7:125*8] <= #DLY mem[address1][125*8+7:125*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[126] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[126] == 1) && (address0 == address1))
	      dout0[126*8+7:126*8] <= #DLY din1[126*8+7:126*8];
	  else if (ce0 == 1)
	      dout0[126*8+7:126*8] <= #DLY mem[address0][126*8+7:126*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[126] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[126] == 0) && (address0 == address1))
            dout1[126*8+7:126*8] <= #DLY din0[126*8+7:126*8];
	  else if (ce1 == 1)
            dout1[126*8+7:126*8] <= #DLY mem[address1][126*8+7:126*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[127] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[127] == 1) && (address0 == address1))
	      dout0[127*8+7:127*8] <= #DLY din1[127*8+7:127*8];
	  else if (ce0 == 1)
	      dout0[127*8+7:127*8] <= #DLY mem[address0][127*8+7:127*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[127] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[127] == 0) && (address0 == address1))
            dout1[127*8+7:127*8] <= #DLY din0[127*8+7:127*8];
	  else if (ce1 == 1)
            dout1[127*8+7:127*8] <= #DLY mem[address1][127*8+7:127*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[128] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[128] == 1) && (address0 == address1))
	      dout0[128*8+7:128*8] <= #DLY din1[128*8+7:128*8];
	  else if (ce0 == 1)
	      dout0[128*8+7:128*8] <= #DLY mem[address0][128*8+7:128*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[128] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[128] == 0) && (address0 == address1))
            dout1[128*8+7:128*8] <= #DLY din0[128*8+7:128*8];
	  else if (ce1 == 1)
            dout1[128*8+7:128*8] <= #DLY mem[address1][128*8+7:128*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[129] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[129] == 1) && (address0 == address1))
	      dout0[129*8+7:129*8] <= #DLY din1[129*8+7:129*8];
	  else if (ce0 == 1)
	      dout0[129*8+7:129*8] <= #DLY mem[address0][129*8+7:129*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[129] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[129] == 0) && (address0 == address1))
            dout1[129*8+7:129*8] <= #DLY din0[129*8+7:129*8];
	  else if (ce1 == 1)
            dout1[129*8+7:129*8] <= #DLY mem[address1][129*8+7:129*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[130] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[130] == 1) && (address0 == address1))
	      dout0[130*8+7:130*8] <= #DLY din1[130*8+7:130*8];
	  else if (ce0 == 1)
	      dout0[130*8+7:130*8] <= #DLY mem[address0][130*8+7:130*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[130] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[130] == 0) && (address0 == address1))
            dout1[130*8+7:130*8] <= #DLY din0[130*8+7:130*8];
	  else if (ce1 == 1)
            dout1[130*8+7:130*8] <= #DLY mem[address1][130*8+7:130*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[131] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[131] == 1) && (address0 == address1))
	      dout0[131*8+7:131*8] <= #DLY din1[131*8+7:131*8];
	  else if (ce0 == 1)
	      dout0[131*8+7:131*8] <= #DLY mem[address0][131*8+7:131*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[131] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[131] == 0) && (address0 == address1))
            dout1[131*8+7:131*8] <= #DLY din0[131*8+7:131*8];
	  else if (ce1 == 1)
            dout1[131*8+7:131*8] <= #DLY mem[address1][131*8+7:131*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[132] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[132] == 1) && (address0 == address1))
	      dout0[132*8+7:132*8] <= #DLY din1[132*8+7:132*8];
	  else if (ce0 == 1)
	      dout0[132*8+7:132*8] <= #DLY mem[address0][132*8+7:132*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[132] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[132] == 0) && (address0 == address1))
            dout1[132*8+7:132*8] <= #DLY din0[132*8+7:132*8];
	  else if (ce1 == 1)
            dout1[132*8+7:132*8] <= #DLY mem[address1][132*8+7:132*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[133] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[133] == 1) && (address0 == address1))
	      dout0[133*8+7:133*8] <= #DLY din1[133*8+7:133*8];
	  else if (ce0 == 1)
	      dout0[133*8+7:133*8] <= #DLY mem[address0][133*8+7:133*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[133] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[133] == 0) && (address0 == address1))
            dout1[133*8+7:133*8] <= #DLY din0[133*8+7:133*8];
	  else if (ce1 == 1)
            dout1[133*8+7:133*8] <= #DLY mem[address1][133*8+7:133*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[134] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[134] == 1) && (address0 == address1))
	      dout0[134*8+7:134*8] <= #DLY din1[134*8+7:134*8];
	  else if (ce0 == 1)
	      dout0[134*8+7:134*8] <= #DLY mem[address0][134*8+7:134*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[134] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[134] == 0) && (address0 == address1))
            dout1[134*8+7:134*8] <= #DLY din0[134*8+7:134*8];
	  else if (ce1 == 1)
            dout1[134*8+7:134*8] <= #DLY mem[address1][134*8+7:134*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[135] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[135] == 1) && (address0 == address1))
	      dout0[135*8+7:135*8] <= #DLY din1[135*8+7:135*8];
	  else if (ce0 == 1)
	      dout0[135*8+7:135*8] <= #DLY mem[address0][135*8+7:135*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[135] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[135] == 0) && (address0 == address1))
            dout1[135*8+7:135*8] <= #DLY din0[135*8+7:135*8];
	  else if (ce1 == 1)
            dout1[135*8+7:135*8] <= #DLY mem[address1][135*8+7:135*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[136] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[136] == 1) && (address0 == address1))
	      dout0[136*8+7:136*8] <= #DLY din1[136*8+7:136*8];
	  else if (ce0 == 1)
	      dout0[136*8+7:136*8] <= #DLY mem[address0][136*8+7:136*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[136] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[136] == 0) && (address0 == address1))
            dout1[136*8+7:136*8] <= #DLY din0[136*8+7:136*8];
	  else if (ce1 == 1)
            dout1[136*8+7:136*8] <= #DLY mem[address1][136*8+7:136*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[137] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[137] == 1) && (address0 == address1))
	      dout0[137*8+7:137*8] <= #DLY din1[137*8+7:137*8];
	  else if (ce0 == 1)
	      dout0[137*8+7:137*8] <= #DLY mem[address0][137*8+7:137*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[137] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[137] == 0) && (address0 == address1))
            dout1[137*8+7:137*8] <= #DLY din0[137*8+7:137*8];
	  else if (ce1 == 1)
            dout1[137*8+7:137*8] <= #DLY mem[address1][137*8+7:137*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[138] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[138] == 1) && (address0 == address1))
	      dout0[138*8+7:138*8] <= #DLY din1[138*8+7:138*8];
	  else if (ce0 == 1)
	      dout0[138*8+7:138*8] <= #DLY mem[address0][138*8+7:138*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[138] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[138] == 0) && (address0 == address1))
            dout1[138*8+7:138*8] <= #DLY din0[138*8+7:138*8];
	  else if (ce1 == 1)
            dout1[138*8+7:138*8] <= #DLY mem[address1][138*8+7:138*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[139] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[139] == 1) && (address0 == address1))
	      dout0[139*8+7:139*8] <= #DLY din1[139*8+7:139*8];
	  else if (ce0 == 1)
	      dout0[139*8+7:139*8] <= #DLY mem[address0][139*8+7:139*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[139] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[139] == 0) && (address0 == address1))
            dout1[139*8+7:139*8] <= #DLY din0[139*8+7:139*8];
	  else if (ce1 == 1)
            dout1[139*8+7:139*8] <= #DLY mem[address1][139*8+7:139*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[140] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[140] == 1) && (address0 == address1))
	      dout0[140*8+7:140*8] <= #DLY din1[140*8+7:140*8];
	  else if (ce0 == 1)
	      dout0[140*8+7:140*8] <= #DLY mem[address0][140*8+7:140*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[140] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[140] == 0) && (address0 == address1))
            dout1[140*8+7:140*8] <= #DLY din0[140*8+7:140*8];
	  else if (ce1 == 1)
            dout1[140*8+7:140*8] <= #DLY mem[address1][140*8+7:140*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[141] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[141] == 1) && (address0 == address1))
	      dout0[141*8+7:141*8] <= #DLY din1[141*8+7:141*8];
	  else if (ce0 == 1)
	      dout0[141*8+7:141*8] <= #DLY mem[address0][141*8+7:141*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[141] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[141] == 0) && (address0 == address1))
            dout1[141*8+7:141*8] <= #DLY din0[141*8+7:141*8];
	  else if (ce1 == 1)
            dout1[141*8+7:141*8] <= #DLY mem[address1][141*8+7:141*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[142] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[142] == 1) && (address0 == address1))
	      dout0[142*8+7:142*8] <= #DLY din1[142*8+7:142*8];
	  else if (ce0 == 1)
	      dout0[142*8+7:142*8] <= #DLY mem[address0][142*8+7:142*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[142] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[142] == 0) && (address0 == address1))
            dout1[142*8+7:142*8] <= #DLY din0[142*8+7:142*8];
	  else if (ce1 == 1)
            dout1[142*8+7:142*8] <= #DLY mem[address1][142*8+7:142*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[143] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[143] == 1) && (address0 == address1))
	      dout0[143*8+7:143*8] <= #DLY din1[143*8+7:143*8];
	  else if (ce0 == 1)
	      dout0[143*8+7:143*8] <= #DLY mem[address0][143*8+7:143*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[143] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[143] == 0) && (address0 == address1))
            dout1[143*8+7:143*8] <= #DLY din0[143*8+7:143*8];
	  else if (ce1 == 1)
            dout1[143*8+7:143*8] <= #DLY mem[address1][143*8+7:143*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[144] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[144] == 1) && (address0 == address1))
	      dout0[144*8+7:144*8] <= #DLY din1[144*8+7:144*8];
	  else if (ce0 == 1)
	      dout0[144*8+7:144*8] <= #DLY mem[address0][144*8+7:144*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[144] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[144] == 0) && (address0 == address1))
            dout1[144*8+7:144*8] <= #DLY din0[144*8+7:144*8];
	  else if (ce1 == 1)
            dout1[144*8+7:144*8] <= #DLY mem[address1][144*8+7:144*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[145] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[145] == 1) && (address0 == address1))
	      dout0[145*8+7:145*8] <= #DLY din1[145*8+7:145*8];
	  else if (ce0 == 1)
	      dout0[145*8+7:145*8] <= #DLY mem[address0][145*8+7:145*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[145] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[145] == 0) && (address0 == address1))
            dout1[145*8+7:145*8] <= #DLY din0[145*8+7:145*8];
	  else if (ce1 == 1)
            dout1[145*8+7:145*8] <= #DLY mem[address1][145*8+7:145*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[146] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[146] == 1) && (address0 == address1))
	      dout0[146*8+7:146*8] <= #DLY din1[146*8+7:146*8];
	  else if (ce0 == 1)
	      dout0[146*8+7:146*8] <= #DLY mem[address0][146*8+7:146*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[146] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[146] == 0) && (address0 == address1))
            dout1[146*8+7:146*8] <= #DLY din0[146*8+7:146*8];
	  else if (ce1 == 1)
            dout1[146*8+7:146*8] <= #DLY mem[address1][146*8+7:146*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[147] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[147] == 1) && (address0 == address1))
	      dout0[147*8+7:147*8] <= #DLY din1[147*8+7:147*8];
	  else if (ce0 == 1)
	      dout0[147*8+7:147*8] <= #DLY mem[address0][147*8+7:147*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[147] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[147] == 0) && (address0 == address1))
            dout1[147*8+7:147*8] <= #DLY din0[147*8+7:147*8];
	  else if (ce1 == 1)
            dout1[147*8+7:147*8] <= #DLY mem[address1][147*8+7:147*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[148] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[148] == 1) && (address0 == address1))
	      dout0[148*8+7:148*8] <= #DLY din1[148*8+7:148*8];
	  else if (ce0 == 1)
	      dout0[148*8+7:148*8] <= #DLY mem[address0][148*8+7:148*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[148] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[148] == 0) && (address0 == address1))
            dout1[148*8+7:148*8] <= #DLY din0[148*8+7:148*8];
	  else if (ce1 == 1)
            dout1[148*8+7:148*8] <= #DLY mem[address1][148*8+7:148*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[149] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[149] == 1) && (address0 == address1))
	      dout0[149*8+7:149*8] <= #DLY din1[149*8+7:149*8];
	  else if (ce0 == 1)
	      dout0[149*8+7:149*8] <= #DLY mem[address0][149*8+7:149*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[149] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[149] == 0) && (address0 == address1))
            dout1[149*8+7:149*8] <= #DLY din0[149*8+7:149*8];
	  else if (ce1 == 1)
            dout1[149*8+7:149*8] <= #DLY mem[address1][149*8+7:149*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[150] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[150] == 1) && (address0 == address1))
	      dout0[150*8+7:150*8] <= #DLY din1[150*8+7:150*8];
	  else if (ce0 == 1)
	      dout0[150*8+7:150*8] <= #DLY mem[address0][150*8+7:150*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[150] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[150] == 0) && (address0 == address1))
            dout1[150*8+7:150*8] <= #DLY din0[150*8+7:150*8];
	  else if (ce1 == 1)
            dout1[150*8+7:150*8] <= #DLY mem[address1][150*8+7:150*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[151] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[151] == 1) && (address0 == address1))
	      dout0[151*8+7:151*8] <= #DLY din1[151*8+7:151*8];
	  else if (ce0 == 1)
	      dout0[151*8+7:151*8] <= #DLY mem[address0][151*8+7:151*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[151] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[151] == 0) && (address0 == address1))
            dout1[151*8+7:151*8] <= #DLY din0[151*8+7:151*8];
	  else if (ce1 == 1)
            dout1[151*8+7:151*8] <= #DLY mem[address1][151*8+7:151*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[152] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[152] == 1) && (address0 == address1))
	      dout0[152*8+7:152*8] <= #DLY din1[152*8+7:152*8];
	  else if (ce0 == 1)
	      dout0[152*8+7:152*8] <= #DLY mem[address0][152*8+7:152*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[152] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[152] == 0) && (address0 == address1))
            dout1[152*8+7:152*8] <= #DLY din0[152*8+7:152*8];
	  else if (ce1 == 1)
            dout1[152*8+7:152*8] <= #DLY mem[address1][152*8+7:152*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[153] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[153] == 1) && (address0 == address1))
	      dout0[153*8+7:153*8] <= #DLY din1[153*8+7:153*8];
	  else if (ce0 == 1)
	      dout0[153*8+7:153*8] <= #DLY mem[address0][153*8+7:153*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[153] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[153] == 0) && (address0 == address1))
            dout1[153*8+7:153*8] <= #DLY din0[153*8+7:153*8];
	  else if (ce1 == 1)
            dout1[153*8+7:153*8] <= #DLY mem[address1][153*8+7:153*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[154] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[154] == 1) && (address0 == address1))
	      dout0[154*8+7:154*8] <= #DLY din1[154*8+7:154*8];
	  else if (ce0 == 1)
	      dout0[154*8+7:154*8] <= #DLY mem[address0][154*8+7:154*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[154] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[154] == 0) && (address0 == address1))
            dout1[154*8+7:154*8] <= #DLY din0[154*8+7:154*8];
	  else if (ce1 == 1)
            dout1[154*8+7:154*8] <= #DLY mem[address1][154*8+7:154*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[155] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[155] == 1) && (address0 == address1))
	      dout0[155*8+7:155*8] <= #DLY din1[155*8+7:155*8];
	  else if (ce0 == 1)
	      dout0[155*8+7:155*8] <= #DLY mem[address0][155*8+7:155*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[155] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[155] == 0) && (address0 == address1))
            dout1[155*8+7:155*8] <= #DLY din0[155*8+7:155*8];
	  else if (ce1 == 1)
            dout1[155*8+7:155*8] <= #DLY mem[address1][155*8+7:155*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[156] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[156] == 1) && (address0 == address1))
	      dout0[156*8+7:156*8] <= #DLY din1[156*8+7:156*8];
	  else if (ce0 == 1)
	      dout0[156*8+7:156*8] <= #DLY mem[address0][156*8+7:156*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[156] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[156] == 0) && (address0 == address1))
            dout1[156*8+7:156*8] <= #DLY din0[156*8+7:156*8];
	  else if (ce1 == 1)
            dout1[156*8+7:156*8] <= #DLY mem[address1][156*8+7:156*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[157] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[157] == 1) && (address0 == address1))
	      dout0[157*8+7:157*8] <= #DLY din1[157*8+7:157*8];
	  else if (ce0 == 1)
	      dout0[157*8+7:157*8] <= #DLY mem[address0][157*8+7:157*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[157] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[157] == 0) && (address0 == address1))
            dout1[157*8+7:157*8] <= #DLY din0[157*8+7:157*8];
	  else if (ce1 == 1)
            dout1[157*8+7:157*8] <= #DLY mem[address1][157*8+7:157*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[158] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[158] == 1) && (address0 == address1))
	      dout0[158*8+7:158*8] <= #DLY din1[158*8+7:158*8];
	  else if (ce0 == 1)
	      dout0[158*8+7:158*8] <= #DLY mem[address0][158*8+7:158*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[158] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[158] == 0) && (address0 == address1))
            dout1[158*8+7:158*8] <= #DLY din0[158*8+7:158*8];
	  else if (ce1 == 1)
            dout1[158*8+7:158*8] <= #DLY mem[address1][158*8+7:158*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[159] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[159] == 1) && (address0 == address1))
	      dout0[159*8+7:159*8] <= #DLY din1[159*8+7:159*8];
	  else if (ce0 == 1)
	      dout0[159*8+7:159*8] <= #DLY mem[address0][159*8+7:159*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[159] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[159] == 0) && (address0 == address1))
            dout1[159*8+7:159*8] <= #DLY din0[159*8+7:159*8];
	  else if (ce1 == 1)
            dout1[159*8+7:159*8] <= #DLY mem[address1][159*8+7:159*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[160] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[160] == 1) && (address0 == address1))
	      dout0[160*8+7:160*8] <= #DLY din1[160*8+7:160*8];
	  else if (ce0 == 1)
	      dout0[160*8+7:160*8] <= #DLY mem[address0][160*8+7:160*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[160] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[160] == 0) && (address0 == address1))
            dout1[160*8+7:160*8] <= #DLY din0[160*8+7:160*8];
	  else if (ce1 == 1)
            dout1[160*8+7:160*8] <= #DLY mem[address1][160*8+7:160*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[161] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[161] == 1) && (address0 == address1))
	      dout0[161*8+7:161*8] <= #DLY din1[161*8+7:161*8];
	  else if (ce0 == 1)
	      dout0[161*8+7:161*8] <= #DLY mem[address0][161*8+7:161*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[161] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[161] == 0) && (address0 == address1))
            dout1[161*8+7:161*8] <= #DLY din0[161*8+7:161*8];
	  else if (ce1 == 1)
            dout1[161*8+7:161*8] <= #DLY mem[address1][161*8+7:161*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[162] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[162] == 1) && (address0 == address1))
	      dout0[162*8+7:162*8] <= #DLY din1[162*8+7:162*8];
	  else if (ce0 == 1)
	      dout0[162*8+7:162*8] <= #DLY mem[address0][162*8+7:162*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[162] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[162] == 0) && (address0 == address1))
            dout1[162*8+7:162*8] <= #DLY din0[162*8+7:162*8];
	  else if (ce1 == 1)
            dout1[162*8+7:162*8] <= #DLY mem[address1][162*8+7:162*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[163] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[163] == 1) && (address0 == address1))
	      dout0[163*8+7:163*8] <= #DLY din1[163*8+7:163*8];
	  else if (ce0 == 1)
	      dout0[163*8+7:163*8] <= #DLY mem[address0][163*8+7:163*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[163] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[163] == 0) && (address0 == address1))
            dout1[163*8+7:163*8] <= #DLY din0[163*8+7:163*8];
	  else if (ce1 == 1)
            dout1[163*8+7:163*8] <= #DLY mem[address1][163*8+7:163*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[164] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[164] == 1) && (address0 == address1))
	      dout0[164*8+7:164*8] <= #DLY din1[164*8+7:164*8];
	  else if (ce0 == 1)
	      dout0[164*8+7:164*8] <= #DLY mem[address0][164*8+7:164*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[164] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[164] == 0) && (address0 == address1))
            dout1[164*8+7:164*8] <= #DLY din0[164*8+7:164*8];
	  else if (ce1 == 1)
            dout1[164*8+7:164*8] <= #DLY mem[address1][164*8+7:164*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[165] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[165] == 1) && (address0 == address1))
	      dout0[165*8+7:165*8] <= #DLY din1[165*8+7:165*8];
	  else if (ce0 == 1)
	      dout0[165*8+7:165*8] <= #DLY mem[address0][165*8+7:165*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[165] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[165] == 0) && (address0 == address1))
            dout1[165*8+7:165*8] <= #DLY din0[165*8+7:165*8];
	  else if (ce1 == 1)
            dout1[165*8+7:165*8] <= #DLY mem[address1][165*8+7:165*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[166] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[166] == 1) && (address0 == address1))
	      dout0[166*8+7:166*8] <= #DLY din1[166*8+7:166*8];
	  else if (ce0 == 1)
	      dout0[166*8+7:166*8] <= #DLY mem[address0][166*8+7:166*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[166] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[166] == 0) && (address0 == address1))
            dout1[166*8+7:166*8] <= #DLY din0[166*8+7:166*8];
	  else if (ce1 == 1)
            dout1[166*8+7:166*8] <= #DLY mem[address1][166*8+7:166*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[167] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[167] == 1) && (address0 == address1))
	      dout0[167*8+7:167*8] <= #DLY din1[167*8+7:167*8];
	  else if (ce0 == 1)
	      dout0[167*8+7:167*8] <= #DLY mem[address0][167*8+7:167*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[167] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[167] == 0) && (address0 == address1))
            dout1[167*8+7:167*8] <= #DLY din0[167*8+7:167*8];
	  else if (ce1 == 1)
            dout1[167*8+7:167*8] <= #DLY mem[address1][167*8+7:167*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[168] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[168] == 1) && (address0 == address1))
	      dout0[168*8+7:168*8] <= #DLY din1[168*8+7:168*8];
	  else if (ce0 == 1)
	      dout0[168*8+7:168*8] <= #DLY mem[address0][168*8+7:168*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[168] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[168] == 0) && (address0 == address1))
            dout1[168*8+7:168*8] <= #DLY din0[168*8+7:168*8];
	  else if (ce1 == 1)
            dout1[168*8+7:168*8] <= #DLY mem[address1][168*8+7:168*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[169] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[169] == 1) && (address0 == address1))
	      dout0[169*8+7:169*8] <= #DLY din1[169*8+7:169*8];
	  else if (ce0 == 1)
	      dout0[169*8+7:169*8] <= #DLY mem[address0][169*8+7:169*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[169] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[169] == 0) && (address0 == address1))
            dout1[169*8+7:169*8] <= #DLY din0[169*8+7:169*8];
	  else if (ce1 == 1)
            dout1[169*8+7:169*8] <= #DLY mem[address1][169*8+7:169*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[170] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[170] == 1) && (address0 == address1))
	      dout0[170*8+7:170*8] <= #DLY din1[170*8+7:170*8];
	  else if (ce0 == 1)
	      dout0[170*8+7:170*8] <= #DLY mem[address0][170*8+7:170*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[170] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[170] == 0) && (address0 == address1))
            dout1[170*8+7:170*8] <= #DLY din0[170*8+7:170*8];
	  else if (ce1 == 1)
            dout1[170*8+7:170*8] <= #DLY mem[address1][170*8+7:170*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[171] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[171] == 1) && (address0 == address1))
	      dout0[171*8+7:171*8] <= #DLY din1[171*8+7:171*8];
	  else if (ce0 == 1)
	      dout0[171*8+7:171*8] <= #DLY mem[address0][171*8+7:171*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[171] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[171] == 0) && (address0 == address1))
            dout1[171*8+7:171*8] <= #DLY din0[171*8+7:171*8];
	  else if (ce1 == 1)
            dout1[171*8+7:171*8] <= #DLY mem[address1][171*8+7:171*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[172] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[172] == 1) && (address0 == address1))
	      dout0[172*8+7:172*8] <= #DLY din1[172*8+7:172*8];
	  else if (ce0 == 1)
	      dout0[172*8+7:172*8] <= #DLY mem[address0][172*8+7:172*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[172] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[172] == 0) && (address0 == address1))
            dout1[172*8+7:172*8] <= #DLY din0[172*8+7:172*8];
	  else if (ce1 == 1)
            dout1[172*8+7:172*8] <= #DLY mem[address1][172*8+7:172*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[173] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[173] == 1) && (address0 == address1))
	      dout0[173*8+7:173*8] <= #DLY din1[173*8+7:173*8];
	  else if (ce0 == 1)
	      dout0[173*8+7:173*8] <= #DLY mem[address0][173*8+7:173*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[173] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[173] == 0) && (address0 == address1))
            dout1[173*8+7:173*8] <= #DLY din0[173*8+7:173*8];
	  else if (ce1 == 1)
            dout1[173*8+7:173*8] <= #DLY mem[address1][173*8+7:173*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[174] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[174] == 1) && (address0 == address1))
	      dout0[174*8+7:174*8] <= #DLY din1[174*8+7:174*8];
	  else if (ce0 == 1)
	      dout0[174*8+7:174*8] <= #DLY mem[address0][174*8+7:174*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[174] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[174] == 0) && (address0 == address1))
            dout1[174*8+7:174*8] <= #DLY din0[174*8+7:174*8];
	  else if (ce1 == 1)
            dout1[174*8+7:174*8] <= #DLY mem[address1][174*8+7:174*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[175] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[175] == 1) && (address0 == address1))
	      dout0[175*8+7:175*8] <= #DLY din1[175*8+7:175*8];
	  else if (ce0 == 1)
	      dout0[175*8+7:175*8] <= #DLY mem[address0][175*8+7:175*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[175] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[175] == 0) && (address0 == address1))
            dout1[175*8+7:175*8] <= #DLY din0[175*8+7:175*8];
	  else if (ce1 == 1)
            dout1[175*8+7:175*8] <= #DLY mem[address1][175*8+7:175*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[176] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[176] == 1) && (address0 == address1))
	      dout0[176*8+7:176*8] <= #DLY din1[176*8+7:176*8];
	  else if (ce0 == 1)
	      dout0[176*8+7:176*8] <= #DLY mem[address0][176*8+7:176*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[176] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[176] == 0) && (address0 == address1))
            dout1[176*8+7:176*8] <= #DLY din0[176*8+7:176*8];
	  else if (ce1 == 1)
            dout1[176*8+7:176*8] <= #DLY mem[address1][176*8+7:176*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[177] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[177] == 1) && (address0 == address1))
	      dout0[177*8+7:177*8] <= #DLY din1[177*8+7:177*8];
	  else if (ce0 == 1)
	      dout0[177*8+7:177*8] <= #DLY mem[address0][177*8+7:177*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[177] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[177] == 0) && (address0 == address1))
            dout1[177*8+7:177*8] <= #DLY din0[177*8+7:177*8];
	  else if (ce1 == 1)
            dout1[177*8+7:177*8] <= #DLY mem[address1][177*8+7:177*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[178] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[178] == 1) && (address0 == address1))
	      dout0[178*8+7:178*8] <= #DLY din1[178*8+7:178*8];
	  else if (ce0 == 1)
	      dout0[178*8+7:178*8] <= #DLY mem[address0][178*8+7:178*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[178] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[178] == 0) && (address0 == address1))
            dout1[178*8+7:178*8] <= #DLY din0[178*8+7:178*8];
	  else if (ce1 == 1)
            dout1[178*8+7:178*8] <= #DLY mem[address1][178*8+7:178*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[179] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[179] == 1) && (address0 == address1))
	      dout0[179*8+7:179*8] <= #DLY din1[179*8+7:179*8];
	  else if (ce0 == 1)
	      dout0[179*8+7:179*8] <= #DLY mem[address0][179*8+7:179*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[179] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[179] == 0) && (address0 == address1))
            dout1[179*8+7:179*8] <= #DLY din0[179*8+7:179*8];
	  else if (ce1 == 1)
            dout1[179*8+7:179*8] <= #DLY mem[address1][179*8+7:179*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[180] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[180] == 1) && (address0 == address1))
	      dout0[180*8+7:180*8] <= #DLY din1[180*8+7:180*8];
	  else if (ce0 == 1)
	      dout0[180*8+7:180*8] <= #DLY mem[address0][180*8+7:180*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[180] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[180] == 0) && (address0 == address1))
            dout1[180*8+7:180*8] <= #DLY din0[180*8+7:180*8];
	  else if (ce1 == 1)
            dout1[180*8+7:180*8] <= #DLY mem[address1][180*8+7:180*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[181] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[181] == 1) && (address0 == address1))
	      dout0[181*8+7:181*8] <= #DLY din1[181*8+7:181*8];
	  else if (ce0 == 1)
	      dout0[181*8+7:181*8] <= #DLY mem[address0][181*8+7:181*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[181] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[181] == 0) && (address0 == address1))
            dout1[181*8+7:181*8] <= #DLY din0[181*8+7:181*8];
	  else if (ce1 == 1)
            dout1[181*8+7:181*8] <= #DLY mem[address1][181*8+7:181*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[182] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[182] == 1) && (address0 == address1))
	      dout0[182*8+7:182*8] <= #DLY din1[182*8+7:182*8];
	  else if (ce0 == 1)
	      dout0[182*8+7:182*8] <= #DLY mem[address0][182*8+7:182*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[182] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[182] == 0) && (address0 == address1))
            dout1[182*8+7:182*8] <= #DLY din0[182*8+7:182*8];
	  else if (ce1 == 1)
            dout1[182*8+7:182*8] <= #DLY mem[address1][182*8+7:182*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[183] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[183] == 1) && (address0 == address1))
	      dout0[183*8+7:183*8] <= #DLY din1[183*8+7:183*8];
	  else if (ce0 == 1)
	      dout0[183*8+7:183*8] <= #DLY mem[address0][183*8+7:183*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[183] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[183] == 0) && (address0 == address1))
            dout1[183*8+7:183*8] <= #DLY din0[183*8+7:183*8];
	  else if (ce1 == 1)
            dout1[183*8+7:183*8] <= #DLY mem[address1][183*8+7:183*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[184] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[184] == 1) && (address0 == address1))
	      dout0[184*8+7:184*8] <= #DLY din1[184*8+7:184*8];
	  else if (ce0 == 1)
	      dout0[184*8+7:184*8] <= #DLY mem[address0][184*8+7:184*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[184] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[184] == 0) && (address0 == address1))
            dout1[184*8+7:184*8] <= #DLY din0[184*8+7:184*8];
	  else if (ce1 == 1)
            dout1[184*8+7:184*8] <= #DLY mem[address1][184*8+7:184*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[185] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[185] == 1) && (address0 == address1))
	      dout0[185*8+7:185*8] <= #DLY din1[185*8+7:185*8];
	  else if (ce0 == 1)
	      dout0[185*8+7:185*8] <= #DLY mem[address0][185*8+7:185*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[185] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[185] == 0) && (address0 == address1))
            dout1[185*8+7:185*8] <= #DLY din0[185*8+7:185*8];
	  else if (ce1 == 1)
            dout1[185*8+7:185*8] <= #DLY mem[address1][185*8+7:185*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[186] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[186] == 1) && (address0 == address1))
	      dout0[186*8+7:186*8] <= #DLY din1[186*8+7:186*8];
	  else if (ce0 == 1)
	      dout0[186*8+7:186*8] <= #DLY mem[address0][186*8+7:186*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[186] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[186] == 0) && (address0 == address1))
            dout1[186*8+7:186*8] <= #DLY din0[186*8+7:186*8];
	  else if (ce1 == 1)
            dout1[186*8+7:186*8] <= #DLY mem[address1][186*8+7:186*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[187] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[187] == 1) && (address0 == address1))
	      dout0[187*8+7:187*8] <= #DLY din1[187*8+7:187*8];
	  else if (ce0 == 1)
	      dout0[187*8+7:187*8] <= #DLY mem[address0][187*8+7:187*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[187] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[187] == 0) && (address0 == address1))
            dout1[187*8+7:187*8] <= #DLY din0[187*8+7:187*8];
	  else if (ce1 == 1)
            dout1[187*8+7:187*8] <= #DLY mem[address1][187*8+7:187*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[188] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[188] == 1) && (address0 == address1))
	      dout0[188*8+7:188*8] <= #DLY din1[188*8+7:188*8];
	  else if (ce0 == 1)
	      dout0[188*8+7:188*8] <= #DLY mem[address0][188*8+7:188*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[188] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[188] == 0) && (address0 == address1))
            dout1[188*8+7:188*8] <= #DLY din0[188*8+7:188*8];
	  else if (ce1 == 1)
            dout1[188*8+7:188*8] <= #DLY mem[address1][188*8+7:188*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[189] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[189] == 1) && (address0 == address1))
	      dout0[189*8+7:189*8] <= #DLY din1[189*8+7:189*8];
	  else if (ce0 == 1)
	      dout0[189*8+7:189*8] <= #DLY mem[address0][189*8+7:189*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[189] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[189] == 0) && (address0 == address1))
            dout1[189*8+7:189*8] <= #DLY din0[189*8+7:189*8];
	  else if (ce1 == 1)
            dout1[189*8+7:189*8] <= #DLY mem[address1][189*8+7:189*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[190] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[190] == 1) && (address0 == address1))
	      dout0[190*8+7:190*8] <= #DLY din1[190*8+7:190*8];
	  else if (ce0 == 1)
	      dout0[190*8+7:190*8] <= #DLY mem[address0][190*8+7:190*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[190] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[190] == 0) && (address0 == address1))
            dout1[190*8+7:190*8] <= #DLY din0[190*8+7:190*8];
	  else if (ce1 == 1)
            dout1[190*8+7:190*8] <= #DLY mem[address1][190*8+7:190*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[191] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[191] == 1) && (address0 == address1))
	      dout0[191*8+7:191*8] <= #DLY din1[191*8+7:191*8];
	  else if (ce0 == 1)
	      dout0[191*8+7:191*8] <= #DLY mem[address0][191*8+7:191*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[191] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[191] == 0) && (address0 == address1))
            dout1[191*8+7:191*8] <= #DLY din0[191*8+7:191*8];
	  else if (ce1 == 1)
            dout1[191*8+7:191*8] <= #DLY mem[address1][191*8+7:191*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[192] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[192] == 1) && (address0 == address1))
	      dout0[192*8+7:192*8] <= #DLY din1[192*8+7:192*8];
	  else if (ce0 == 1)
	      dout0[192*8+7:192*8] <= #DLY mem[address0][192*8+7:192*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[192] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[192] == 0) && (address0 == address1))
            dout1[192*8+7:192*8] <= #DLY din0[192*8+7:192*8];
	  else if (ce1 == 1)
            dout1[192*8+7:192*8] <= #DLY mem[address1][192*8+7:192*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[193] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[193] == 1) && (address0 == address1))
	      dout0[193*8+7:193*8] <= #DLY din1[193*8+7:193*8];
	  else if (ce0 == 1)
	      dout0[193*8+7:193*8] <= #DLY mem[address0][193*8+7:193*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[193] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[193] == 0) && (address0 == address1))
            dout1[193*8+7:193*8] <= #DLY din0[193*8+7:193*8];
	  else if (ce1 == 1)
            dout1[193*8+7:193*8] <= #DLY mem[address1][193*8+7:193*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[194] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[194] == 1) && (address0 == address1))
	      dout0[194*8+7:194*8] <= #DLY din1[194*8+7:194*8];
	  else if (ce0 == 1)
	      dout0[194*8+7:194*8] <= #DLY mem[address0][194*8+7:194*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[194] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[194] == 0) && (address0 == address1))
            dout1[194*8+7:194*8] <= #DLY din0[194*8+7:194*8];
	  else if (ce1 == 1)
            dout1[194*8+7:194*8] <= #DLY mem[address1][194*8+7:194*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[195] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[195] == 1) && (address0 == address1))
	      dout0[195*8+7:195*8] <= #DLY din1[195*8+7:195*8];
	  else if (ce0 == 1)
	      dout0[195*8+7:195*8] <= #DLY mem[address0][195*8+7:195*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[195] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[195] == 0) && (address0 == address1))
            dout1[195*8+7:195*8] <= #DLY din0[195*8+7:195*8];
	  else if (ce1 == 1)
            dout1[195*8+7:195*8] <= #DLY mem[address1][195*8+7:195*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[196] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[196] == 1) && (address0 == address1))
	      dout0[196*8+7:196*8] <= #DLY din1[196*8+7:196*8];
	  else if (ce0 == 1)
	      dout0[196*8+7:196*8] <= #DLY mem[address0][196*8+7:196*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[196] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[196] == 0) && (address0 == address1))
            dout1[196*8+7:196*8] <= #DLY din0[196*8+7:196*8];
	  else if (ce1 == 1)
            dout1[196*8+7:196*8] <= #DLY mem[address1][196*8+7:196*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[197] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[197] == 1) && (address0 == address1))
	      dout0[197*8+7:197*8] <= #DLY din1[197*8+7:197*8];
	  else if (ce0 == 1)
	      dout0[197*8+7:197*8] <= #DLY mem[address0][197*8+7:197*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[197] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[197] == 0) && (address0 == address1))
            dout1[197*8+7:197*8] <= #DLY din0[197*8+7:197*8];
	  else if (ce1 == 1)
            dout1[197*8+7:197*8] <= #DLY mem[address1][197*8+7:197*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[198] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[198] == 1) && (address0 == address1))
	      dout0[198*8+7:198*8] <= #DLY din1[198*8+7:198*8];
	  else if (ce0 == 1)
	      dout0[198*8+7:198*8] <= #DLY mem[address0][198*8+7:198*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[198] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[198] == 0) && (address0 == address1))
            dout1[198*8+7:198*8] <= #DLY din0[198*8+7:198*8];
	  else if (ce1 == 1)
            dout1[198*8+7:198*8] <= #DLY mem[address1][198*8+7:198*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[199] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[199] == 1) && (address0 == address1))
	      dout0[199*8+7:199*8] <= #DLY din1[199*8+7:199*8];
	  else if (ce0 == 1)
	      dout0[199*8+7:199*8] <= #DLY mem[address0][199*8+7:199*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[199] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[199] == 0) && (address0 == address1))
            dout1[199*8+7:199*8] <= #DLY din0[199*8+7:199*8];
	  else if (ce1 == 1)
            dout1[199*8+7:199*8] <= #DLY mem[address1][199*8+7:199*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[200] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[200] == 1) && (address0 == address1))
	      dout0[200*8+7:200*8] <= #DLY din1[200*8+7:200*8];
	  else if (ce0 == 1)
	      dout0[200*8+7:200*8] <= #DLY mem[address0][200*8+7:200*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[200] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[200] == 0) && (address0 == address1))
            dout1[200*8+7:200*8] <= #DLY din0[200*8+7:200*8];
	  else if (ce1 == 1)
            dout1[200*8+7:200*8] <= #DLY mem[address1][200*8+7:200*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[201] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[201] == 1) && (address0 == address1))
	      dout0[201*8+7:201*8] <= #DLY din1[201*8+7:201*8];
	  else if (ce0 == 1)
	      dout0[201*8+7:201*8] <= #DLY mem[address0][201*8+7:201*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[201] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[201] == 0) && (address0 == address1))
            dout1[201*8+7:201*8] <= #DLY din0[201*8+7:201*8];
	  else if (ce1 == 1)
            dout1[201*8+7:201*8] <= #DLY mem[address1][201*8+7:201*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[202] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[202] == 1) && (address0 == address1))
	      dout0[202*8+7:202*8] <= #DLY din1[202*8+7:202*8];
	  else if (ce0 == 1)
	      dout0[202*8+7:202*8] <= #DLY mem[address0][202*8+7:202*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[202] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[202] == 0) && (address0 == address1))
            dout1[202*8+7:202*8] <= #DLY din0[202*8+7:202*8];
	  else if (ce1 == 1)
            dout1[202*8+7:202*8] <= #DLY mem[address1][202*8+7:202*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[203] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[203] == 1) && (address0 == address1))
	      dout0[203*8+7:203*8] <= #DLY din1[203*8+7:203*8];
	  else if (ce0 == 1)
	      dout0[203*8+7:203*8] <= #DLY mem[address0][203*8+7:203*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[203] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[203] == 0) && (address0 == address1))
            dout1[203*8+7:203*8] <= #DLY din0[203*8+7:203*8];
	  else if (ce1 == 1)
            dout1[203*8+7:203*8] <= #DLY mem[address1][203*8+7:203*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[204] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[204] == 1) && (address0 == address1))
	      dout0[204*8+7:204*8] <= #DLY din1[204*8+7:204*8];
	  else if (ce0 == 1)
	      dout0[204*8+7:204*8] <= #DLY mem[address0][204*8+7:204*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[204] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[204] == 0) && (address0 == address1))
            dout1[204*8+7:204*8] <= #DLY din0[204*8+7:204*8];
	  else if (ce1 == 1)
            dout1[204*8+7:204*8] <= #DLY mem[address1][204*8+7:204*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[205] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[205] == 1) && (address0 == address1))
	      dout0[205*8+7:205*8] <= #DLY din1[205*8+7:205*8];
	  else if (ce0 == 1)
	      dout0[205*8+7:205*8] <= #DLY mem[address0][205*8+7:205*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[205] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[205] == 0) && (address0 == address1))
            dout1[205*8+7:205*8] <= #DLY din0[205*8+7:205*8];
	  else if (ce1 == 1)
            dout1[205*8+7:205*8] <= #DLY mem[address1][205*8+7:205*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[206] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[206] == 1) && (address0 == address1))
	      dout0[206*8+7:206*8] <= #DLY din1[206*8+7:206*8];
	  else if (ce0 == 1)
	      dout0[206*8+7:206*8] <= #DLY mem[address0][206*8+7:206*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[206] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[206] == 0) && (address0 == address1))
            dout1[206*8+7:206*8] <= #DLY din0[206*8+7:206*8];
	  else if (ce1 == 1)
            dout1[206*8+7:206*8] <= #DLY mem[address1][206*8+7:206*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[207] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[207] == 1) && (address0 == address1))
	      dout0[207*8+7:207*8] <= #DLY din1[207*8+7:207*8];
	  else if (ce0 == 1)
	      dout0[207*8+7:207*8] <= #DLY mem[address0][207*8+7:207*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[207] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[207] == 0) && (address0 == address1))
            dout1[207*8+7:207*8] <= #DLY din0[207*8+7:207*8];
	  else if (ce1 == 1)
            dout1[207*8+7:207*8] <= #DLY mem[address1][207*8+7:207*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[208] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[208] == 1) && (address0 == address1))
	      dout0[208*8+7:208*8] <= #DLY din1[208*8+7:208*8];
	  else if (ce0 == 1)
	      dout0[208*8+7:208*8] <= #DLY mem[address0][208*8+7:208*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[208] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[208] == 0) && (address0 == address1))
            dout1[208*8+7:208*8] <= #DLY din0[208*8+7:208*8];
	  else if (ce1 == 1)
            dout1[208*8+7:208*8] <= #DLY mem[address1][208*8+7:208*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[209] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[209] == 1) && (address0 == address1))
	      dout0[209*8+7:209*8] <= #DLY din1[209*8+7:209*8];
	  else if (ce0 == 1)
	      dout0[209*8+7:209*8] <= #DLY mem[address0][209*8+7:209*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[209] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[209] == 0) && (address0 == address1))
            dout1[209*8+7:209*8] <= #DLY din0[209*8+7:209*8];
	  else if (ce1 == 1)
            dout1[209*8+7:209*8] <= #DLY mem[address1][209*8+7:209*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[210] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[210] == 1) && (address0 == address1))
	      dout0[210*8+7:210*8] <= #DLY din1[210*8+7:210*8];
	  else if (ce0 == 1)
	      dout0[210*8+7:210*8] <= #DLY mem[address0][210*8+7:210*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[210] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[210] == 0) && (address0 == address1))
            dout1[210*8+7:210*8] <= #DLY din0[210*8+7:210*8];
	  else if (ce1 == 1)
            dout1[210*8+7:210*8] <= #DLY mem[address1][210*8+7:210*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[211] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[211] == 1) && (address0 == address1))
	      dout0[211*8+7:211*8] <= #DLY din1[211*8+7:211*8];
	  else if (ce0 == 1)
	      dout0[211*8+7:211*8] <= #DLY mem[address0][211*8+7:211*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[211] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[211] == 0) && (address0 == address1))
            dout1[211*8+7:211*8] <= #DLY din0[211*8+7:211*8];
	  else if (ce1 == 1)
            dout1[211*8+7:211*8] <= #DLY mem[address1][211*8+7:211*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[212] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[212] == 1) && (address0 == address1))
	      dout0[212*8+7:212*8] <= #DLY din1[212*8+7:212*8];
	  else if (ce0 == 1)
	      dout0[212*8+7:212*8] <= #DLY mem[address0][212*8+7:212*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[212] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[212] == 0) && (address0 == address1))
            dout1[212*8+7:212*8] <= #DLY din0[212*8+7:212*8];
	  else if (ce1 == 1)
            dout1[212*8+7:212*8] <= #DLY mem[address1][212*8+7:212*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[213] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[213] == 1) && (address0 == address1))
	      dout0[213*8+7:213*8] <= #DLY din1[213*8+7:213*8];
	  else if (ce0 == 1)
	      dout0[213*8+7:213*8] <= #DLY mem[address0][213*8+7:213*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[213] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[213] == 0) && (address0 == address1))
            dout1[213*8+7:213*8] <= #DLY din0[213*8+7:213*8];
	  else if (ce1 == 1)
            dout1[213*8+7:213*8] <= #DLY mem[address1][213*8+7:213*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[214] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[214] == 1) && (address0 == address1))
	      dout0[214*8+7:214*8] <= #DLY din1[214*8+7:214*8];
	  else if (ce0 == 1)
	      dout0[214*8+7:214*8] <= #DLY mem[address0][214*8+7:214*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[214] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[214] == 0) && (address0 == address1))
            dout1[214*8+7:214*8] <= #DLY din0[214*8+7:214*8];
	  else if (ce1 == 1)
            dout1[214*8+7:214*8] <= #DLY mem[address1][214*8+7:214*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[215] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[215] == 1) && (address0 == address1))
	      dout0[215*8+7:215*8] <= #DLY din1[215*8+7:215*8];
	  else if (ce0 == 1)
	      dout0[215*8+7:215*8] <= #DLY mem[address0][215*8+7:215*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[215] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[215] == 0) && (address0 == address1))
            dout1[215*8+7:215*8] <= #DLY din0[215*8+7:215*8];
	  else if (ce1 == 1)
            dout1[215*8+7:215*8] <= #DLY mem[address1][215*8+7:215*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[216] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[216] == 1) && (address0 == address1))
	      dout0[216*8+7:216*8] <= #DLY din1[216*8+7:216*8];
	  else if (ce0 == 1)
	      dout0[216*8+7:216*8] <= #DLY mem[address0][216*8+7:216*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[216] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[216] == 0) && (address0 == address1))
            dout1[216*8+7:216*8] <= #DLY din0[216*8+7:216*8];
	  else if (ce1 == 1)
            dout1[216*8+7:216*8] <= #DLY mem[address1][216*8+7:216*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[217] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[217] == 1) && (address0 == address1))
	      dout0[217*8+7:217*8] <= #DLY din1[217*8+7:217*8];
	  else if (ce0 == 1)
	      dout0[217*8+7:217*8] <= #DLY mem[address0][217*8+7:217*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[217] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[217] == 0) && (address0 == address1))
            dout1[217*8+7:217*8] <= #DLY din0[217*8+7:217*8];
	  else if (ce1 == 1)
            dout1[217*8+7:217*8] <= #DLY mem[address1][217*8+7:217*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[218] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[218] == 1) && (address0 == address1))
	      dout0[218*8+7:218*8] <= #DLY din1[218*8+7:218*8];
	  else if (ce0 == 1)
	      dout0[218*8+7:218*8] <= #DLY mem[address0][218*8+7:218*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[218] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[218] == 0) && (address0 == address1))
            dout1[218*8+7:218*8] <= #DLY din0[218*8+7:218*8];
	  else if (ce1 == 1)
            dout1[218*8+7:218*8] <= #DLY mem[address1][218*8+7:218*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[219] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[219] == 1) && (address0 == address1))
	      dout0[219*8+7:219*8] <= #DLY din1[219*8+7:219*8];
	  else if (ce0 == 1)
	      dout0[219*8+7:219*8] <= #DLY mem[address0][219*8+7:219*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[219] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[219] == 0) && (address0 == address1))
            dout1[219*8+7:219*8] <= #DLY din0[219*8+7:219*8];
	  else if (ce1 == 1)
            dout1[219*8+7:219*8] <= #DLY mem[address1][219*8+7:219*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[220] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[220] == 1) && (address0 == address1))
	      dout0[220*8+7:220*8] <= #DLY din1[220*8+7:220*8];
	  else if (ce0 == 1)
	      dout0[220*8+7:220*8] <= #DLY mem[address0][220*8+7:220*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[220] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[220] == 0) && (address0 == address1))
            dout1[220*8+7:220*8] <= #DLY din0[220*8+7:220*8];
	  else if (ce1 == 1)
            dout1[220*8+7:220*8] <= #DLY mem[address1][220*8+7:220*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[221] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[221] == 1) && (address0 == address1))
	      dout0[221*8+7:221*8] <= #DLY din1[221*8+7:221*8];
	  else if (ce0 == 1)
	      dout0[221*8+7:221*8] <= #DLY mem[address0][221*8+7:221*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[221] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[221] == 0) && (address0 == address1))
            dout1[221*8+7:221*8] <= #DLY din0[221*8+7:221*8];
	  else if (ce1 == 1)
            dout1[221*8+7:221*8] <= #DLY mem[address1][221*8+7:221*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[222] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[222] == 1) && (address0 == address1))
	      dout0[222*8+7:222*8] <= #DLY din1[222*8+7:222*8];
	  else if (ce0 == 1)
	      dout0[222*8+7:222*8] <= #DLY mem[address0][222*8+7:222*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[222] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[222] == 0) && (address0 == address1))
            dout1[222*8+7:222*8] <= #DLY din0[222*8+7:222*8];
	  else if (ce1 == 1)
            dout1[222*8+7:222*8] <= #DLY mem[address1][222*8+7:222*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[223] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[223] == 1) && (address0 == address1))
	      dout0[223*8+7:223*8] <= #DLY din1[223*8+7:223*8];
	  else if (ce0 == 1)
	      dout0[223*8+7:223*8] <= #DLY mem[address0][223*8+7:223*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[223] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[223] == 0) && (address0 == address1))
            dout1[223*8+7:223*8] <= #DLY din0[223*8+7:223*8];
	  else if (ce1 == 1)
            dout1[223*8+7:223*8] <= #DLY mem[address1][223*8+7:223*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[224] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[224] == 1) && (address0 == address1))
	      dout0[224*8+7:224*8] <= #DLY din1[224*8+7:224*8];
	  else if (ce0 == 1)
	      dout0[224*8+7:224*8] <= #DLY mem[address0][224*8+7:224*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[224] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[224] == 0) && (address0 == address1))
            dout1[224*8+7:224*8] <= #DLY din0[224*8+7:224*8];
	  else if (ce1 == 1)
            dout1[224*8+7:224*8] <= #DLY mem[address1][224*8+7:224*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[225] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[225] == 1) && (address0 == address1))
	      dout0[225*8+7:225*8] <= #DLY din1[225*8+7:225*8];
	  else if (ce0 == 1)
	      dout0[225*8+7:225*8] <= #DLY mem[address0][225*8+7:225*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[225] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[225] == 0) && (address0 == address1))
            dout1[225*8+7:225*8] <= #DLY din0[225*8+7:225*8];
	  else if (ce1 == 1)
            dout1[225*8+7:225*8] <= #DLY mem[address1][225*8+7:225*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[226] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[226] == 1) && (address0 == address1))
	      dout0[226*8+7:226*8] <= #DLY din1[226*8+7:226*8];
	  else if (ce0 == 1)
	      dout0[226*8+7:226*8] <= #DLY mem[address0][226*8+7:226*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[226] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[226] == 0) && (address0 == address1))
            dout1[226*8+7:226*8] <= #DLY din0[226*8+7:226*8];
	  else if (ce1 == 1)
            dout1[226*8+7:226*8] <= #DLY mem[address1][226*8+7:226*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[227] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[227] == 1) && (address0 == address1))
	      dout0[227*8+7:227*8] <= #DLY din1[227*8+7:227*8];
	  else if (ce0 == 1)
	      dout0[227*8+7:227*8] <= #DLY mem[address0][227*8+7:227*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[227] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[227] == 0) && (address0 == address1))
            dout1[227*8+7:227*8] <= #DLY din0[227*8+7:227*8];
	  else if (ce1 == 1)
            dout1[227*8+7:227*8] <= #DLY mem[address1][227*8+7:227*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[228] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[228] == 1) && (address0 == address1))
	      dout0[228*8+7:228*8] <= #DLY din1[228*8+7:228*8];
	  else if (ce0 == 1)
	      dout0[228*8+7:228*8] <= #DLY mem[address0][228*8+7:228*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[228] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[228] == 0) && (address0 == address1))
            dout1[228*8+7:228*8] <= #DLY din0[228*8+7:228*8];
	  else if (ce1 == 1)
            dout1[228*8+7:228*8] <= #DLY mem[address1][228*8+7:228*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[229] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[229] == 1) && (address0 == address1))
	      dout0[229*8+7:229*8] <= #DLY din1[229*8+7:229*8];
	  else if (ce0 == 1)
	      dout0[229*8+7:229*8] <= #DLY mem[address0][229*8+7:229*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[229] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[229] == 0) && (address0 == address1))
            dout1[229*8+7:229*8] <= #DLY din0[229*8+7:229*8];
	  else if (ce1 == 1)
            dout1[229*8+7:229*8] <= #DLY mem[address1][229*8+7:229*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[230] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[230] == 1) && (address0 == address1))
	      dout0[230*8+7:230*8] <= #DLY din1[230*8+7:230*8];
	  else if (ce0 == 1)
	      dout0[230*8+7:230*8] <= #DLY mem[address0][230*8+7:230*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[230] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[230] == 0) && (address0 == address1))
            dout1[230*8+7:230*8] <= #DLY din0[230*8+7:230*8];
	  else if (ce1 == 1)
            dout1[230*8+7:230*8] <= #DLY mem[address1][230*8+7:230*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[231] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[231] == 1) && (address0 == address1))
	      dout0[231*8+7:231*8] <= #DLY din1[231*8+7:231*8];
	  else if (ce0 == 1)
	      dout0[231*8+7:231*8] <= #DLY mem[address0][231*8+7:231*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[231] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[231] == 0) && (address0 == address1))
            dout1[231*8+7:231*8] <= #DLY din0[231*8+7:231*8];
	  else if (ce1 == 1)
            dout1[231*8+7:231*8] <= #DLY mem[address1][231*8+7:231*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[232] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[232] == 1) && (address0 == address1))
	      dout0[232*8+7:232*8] <= #DLY din1[232*8+7:232*8];
	  else if (ce0 == 1)
	      dout0[232*8+7:232*8] <= #DLY mem[address0][232*8+7:232*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[232] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[232] == 0) && (address0 == address1))
            dout1[232*8+7:232*8] <= #DLY din0[232*8+7:232*8];
	  else if (ce1 == 1)
            dout1[232*8+7:232*8] <= #DLY mem[address1][232*8+7:232*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[233] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[233] == 1) && (address0 == address1))
	      dout0[233*8+7:233*8] <= #DLY din1[233*8+7:233*8];
	  else if (ce0 == 1)
	      dout0[233*8+7:233*8] <= #DLY mem[address0][233*8+7:233*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[233] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[233] == 0) && (address0 == address1))
            dout1[233*8+7:233*8] <= #DLY din0[233*8+7:233*8];
	  else if (ce1 == 1)
            dout1[233*8+7:233*8] <= #DLY mem[address1][233*8+7:233*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[234] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[234] == 1) && (address0 == address1))
	      dout0[234*8+7:234*8] <= #DLY din1[234*8+7:234*8];
	  else if (ce0 == 1)
	      dout0[234*8+7:234*8] <= #DLY mem[address0][234*8+7:234*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[234] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[234] == 0) && (address0 == address1))
            dout1[234*8+7:234*8] <= #DLY din0[234*8+7:234*8];
	  else if (ce1 == 1)
            dout1[234*8+7:234*8] <= #DLY mem[address1][234*8+7:234*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[235] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[235] == 1) && (address0 == address1))
	      dout0[235*8+7:235*8] <= #DLY din1[235*8+7:235*8];
	  else if (ce0 == 1)
	      dout0[235*8+7:235*8] <= #DLY mem[address0][235*8+7:235*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[235] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[235] == 0) && (address0 == address1))
            dout1[235*8+7:235*8] <= #DLY din0[235*8+7:235*8];
	  else if (ce1 == 1)
            dout1[235*8+7:235*8] <= #DLY mem[address1][235*8+7:235*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[236] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[236] == 1) && (address0 == address1))
	      dout0[236*8+7:236*8] <= #DLY din1[236*8+7:236*8];
	  else if (ce0 == 1)
	      dout0[236*8+7:236*8] <= #DLY mem[address0][236*8+7:236*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[236] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[236] == 0) && (address0 == address1))
            dout1[236*8+7:236*8] <= #DLY din0[236*8+7:236*8];
	  else if (ce1 == 1)
            dout1[236*8+7:236*8] <= #DLY mem[address1][236*8+7:236*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[237] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[237] == 1) && (address0 == address1))
	      dout0[237*8+7:237*8] <= #DLY din1[237*8+7:237*8];
	  else if (ce0 == 1)
	      dout0[237*8+7:237*8] <= #DLY mem[address0][237*8+7:237*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[237] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[237] == 0) && (address0 == address1))
            dout1[237*8+7:237*8] <= #DLY din0[237*8+7:237*8];
	  else if (ce1 == 1)
            dout1[237*8+7:237*8] <= #DLY mem[address1][237*8+7:237*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[238] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[238] == 1) && (address0 == address1))
	      dout0[238*8+7:238*8] <= #DLY din1[238*8+7:238*8];
	  else if (ce0 == 1)
	      dout0[238*8+7:238*8] <= #DLY mem[address0][238*8+7:238*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[238] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[238] == 0) && (address0 == address1))
            dout1[238*8+7:238*8] <= #DLY din0[238*8+7:238*8];
	  else if (ce1 == 1)
            dout1[238*8+7:238*8] <= #DLY mem[address1][238*8+7:238*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[239] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[239] == 1) && (address0 == address1))
	      dout0[239*8+7:239*8] <= #DLY din1[239*8+7:239*8];
	  else if (ce0 == 1)
	      dout0[239*8+7:239*8] <= #DLY mem[address0][239*8+7:239*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[239] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[239] == 0) && (address0 == address1))
            dout1[239*8+7:239*8] <= #DLY din0[239*8+7:239*8];
	  else if (ce1 == 1)
            dout1[239*8+7:239*8] <= #DLY mem[address1][239*8+7:239*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[240] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[240] == 1) && (address0 == address1))
	      dout0[240*8+7:240*8] <= #DLY din1[240*8+7:240*8];
	  else if (ce0 == 1)
	      dout0[240*8+7:240*8] <= #DLY mem[address0][240*8+7:240*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[240] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[240] == 0) && (address0 == address1))
            dout1[240*8+7:240*8] <= #DLY din0[240*8+7:240*8];
	  else if (ce1 == 1)
            dout1[240*8+7:240*8] <= #DLY mem[address1][240*8+7:240*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[241] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[241] == 1) && (address0 == address1))
	      dout0[241*8+7:241*8] <= #DLY din1[241*8+7:241*8];
	  else if (ce0 == 1)
	      dout0[241*8+7:241*8] <= #DLY mem[address0][241*8+7:241*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[241] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[241] == 0) && (address0 == address1))
            dout1[241*8+7:241*8] <= #DLY din0[241*8+7:241*8];
	  else if (ce1 == 1)
            dout1[241*8+7:241*8] <= #DLY mem[address1][241*8+7:241*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[242] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[242] == 1) && (address0 == address1))
	      dout0[242*8+7:242*8] <= #DLY din1[242*8+7:242*8];
	  else if (ce0 == 1)
	      dout0[242*8+7:242*8] <= #DLY mem[address0][242*8+7:242*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[242] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[242] == 0) && (address0 == address1))
            dout1[242*8+7:242*8] <= #DLY din0[242*8+7:242*8];
	  else if (ce1 == 1)
            dout1[242*8+7:242*8] <= #DLY mem[address1][242*8+7:242*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[243] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[243] == 1) && (address0 == address1))
	      dout0[243*8+7:243*8] <= #DLY din1[243*8+7:243*8];
	  else if (ce0 == 1)
	      dout0[243*8+7:243*8] <= #DLY mem[address0][243*8+7:243*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[243] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[243] == 0) && (address0 == address1))
            dout1[243*8+7:243*8] <= #DLY din0[243*8+7:243*8];
	  else if (ce1 == 1)
            dout1[243*8+7:243*8] <= #DLY mem[address1][243*8+7:243*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[244] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[244] == 1) && (address0 == address1))
	      dout0[244*8+7:244*8] <= #DLY din1[244*8+7:244*8];
	  else if (ce0 == 1)
	      dout0[244*8+7:244*8] <= #DLY mem[address0][244*8+7:244*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[244] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[244] == 0) && (address0 == address1))
            dout1[244*8+7:244*8] <= #DLY din0[244*8+7:244*8];
	  else if (ce1 == 1)
            dout1[244*8+7:244*8] <= #DLY mem[address1][244*8+7:244*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[245] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[245] == 1) && (address0 == address1))
	      dout0[245*8+7:245*8] <= #DLY din1[245*8+7:245*8];
	  else if (ce0 == 1)
	      dout0[245*8+7:245*8] <= #DLY mem[address0][245*8+7:245*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[245] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[245] == 0) && (address0 == address1))
            dout1[245*8+7:245*8] <= #DLY din0[245*8+7:245*8];
	  else if (ce1 == 1)
            dout1[245*8+7:245*8] <= #DLY mem[address1][245*8+7:245*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[246] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[246] == 1) && (address0 == address1))
	      dout0[246*8+7:246*8] <= #DLY din1[246*8+7:246*8];
	  else if (ce0 == 1)
	      dout0[246*8+7:246*8] <= #DLY mem[address0][246*8+7:246*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[246] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[246] == 0) && (address0 == address1))
            dout1[246*8+7:246*8] <= #DLY din0[246*8+7:246*8];
	  else if (ce1 == 1)
            dout1[246*8+7:246*8] <= #DLY mem[address1][246*8+7:246*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[247] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[247] == 1) && (address0 == address1))
	      dout0[247*8+7:247*8] <= #DLY din1[247*8+7:247*8];
	  else if (ce0 == 1)
	      dout0[247*8+7:247*8] <= #DLY mem[address0][247*8+7:247*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[247] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[247] == 0) && (address0 == address1))
            dout1[247*8+7:247*8] <= #DLY din0[247*8+7:247*8];
	  else if (ce1 == 1)
            dout1[247*8+7:247*8] <= #DLY mem[address1][247*8+7:247*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[248] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[248] == 1) && (address0 == address1))
	      dout0[248*8+7:248*8] <= #DLY din1[248*8+7:248*8];
	  else if (ce0 == 1)
	      dout0[248*8+7:248*8] <= #DLY mem[address0][248*8+7:248*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[248] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[248] == 0) && (address0 == address1))
            dout1[248*8+7:248*8] <= #DLY din0[248*8+7:248*8];
	  else if (ce1 == 1)
            dout1[248*8+7:248*8] <= #DLY mem[address1][248*8+7:248*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[249] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[249] == 1) && (address0 == address1))
	      dout0[249*8+7:249*8] <= #DLY din1[249*8+7:249*8];
	  else if (ce0 == 1)
	      dout0[249*8+7:249*8] <= #DLY mem[address0][249*8+7:249*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[249] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[249] == 0) && (address0 == address1))
            dout1[249*8+7:249*8] <= #DLY din0[249*8+7:249*8];
	  else if (ce1 == 1)
            dout1[249*8+7:249*8] <= #DLY mem[address1][249*8+7:249*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[250] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[250] == 1) && (address0 == address1))
	      dout0[250*8+7:250*8] <= #DLY din1[250*8+7:250*8];
	  else if (ce0 == 1)
	      dout0[250*8+7:250*8] <= #DLY mem[address0][250*8+7:250*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[250] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[250] == 0) && (address0 == address1))
            dout1[250*8+7:250*8] <= #DLY din0[250*8+7:250*8];
	  else if (ce1 == 1)
            dout1[250*8+7:250*8] <= #DLY mem[address1][250*8+7:250*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[251] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[251] == 1) && (address0 == address1))
	      dout0[251*8+7:251*8] <= #DLY din1[251*8+7:251*8];
	  else if (ce0 == 1)
	      dout0[251*8+7:251*8] <= #DLY mem[address0][251*8+7:251*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[251] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[251] == 0) && (address0 == address1))
            dout1[251*8+7:251*8] <= #DLY din0[251*8+7:251*8];
	  else if (ce1 == 1)
            dout1[251*8+7:251*8] <= #DLY mem[address1][251*8+7:251*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[252] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[252] == 1) && (address0 == address1))
	      dout0[252*8+7:252*8] <= #DLY din1[252*8+7:252*8];
	  else if (ce0 == 1)
	      dout0[252*8+7:252*8] <= #DLY mem[address0][252*8+7:252*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[252] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[252] == 0) && (address0 == address1))
            dout1[252*8+7:252*8] <= #DLY din0[252*8+7:252*8];
	  else if (ce1 == 1)
            dout1[252*8+7:252*8] <= #DLY mem[address1][252*8+7:252*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[253] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[253] == 1) && (address0 == address1))
	      dout0[253*8+7:253*8] <= #DLY din1[253*8+7:253*8];
	  else if (ce0 == 1)
	      dout0[253*8+7:253*8] <= #DLY mem[address0][253*8+7:253*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[253] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[253] == 0) && (address0 == address1))
            dout1[253*8+7:253*8] <= #DLY din0[253*8+7:253*8];
	  else if (ce1 == 1)
            dout1[253*8+7:253*8] <= #DLY mem[address1][253*8+7:253*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[254] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[254] == 1) && (address0 == address1))
	      dout0[254*8+7:254*8] <= #DLY din1[254*8+7:254*8];
	  else if (ce0 == 1)
	      dout0[254*8+7:254*8] <= #DLY mem[address0][254*8+7:254*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[254] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[254] == 0) && (address0 == address1))
            dout1[254*8+7:254*8] <= #DLY din0[254*8+7:254*8];
	  else if (ce1 == 1)
            dout1[254*8+7:254*8] <= #DLY mem[address1][254*8+7:254*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[255] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[255] == 1) && (address0 == address1))
	      dout0[255*8+7:255*8] <= #DLY din1[255*8+7:255*8];
	  else if (ce0 == 1)
	      dout0[255*8+7:255*8] <= #DLY mem[address0][255*8+7:255*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[255] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[255] == 0) && (address0 == address1))
            dout1[255*8+7:255*8] <= #DLY din0[255*8+7:255*8];
	  else if (ce1 == 1)
            dout1[255*8+7:255*8] <= #DLY mem[address1][255*8+7:255*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[256] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[256] == 1) && (address0 == address1))
	      dout0[256*8+7:256*8] <= #DLY din1[256*8+7:256*8];
	  else if (ce0 == 1)
	      dout0[256*8+7:256*8] <= #DLY mem[address0][256*8+7:256*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[256] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[256] == 0) && (address0 == address1))
            dout1[256*8+7:256*8] <= #DLY din0[256*8+7:256*8];
	  else if (ce1 == 1)
            dout1[256*8+7:256*8] <= #DLY mem[address1][256*8+7:256*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[257] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[257] == 1) && (address0 == address1))
	      dout0[257*8+7:257*8] <= #DLY din1[257*8+7:257*8];
	  else if (ce0 == 1)
	      dout0[257*8+7:257*8] <= #DLY mem[address0][257*8+7:257*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[257] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[257] == 0) && (address0 == address1))
            dout1[257*8+7:257*8] <= #DLY din0[257*8+7:257*8];
	  else if (ce1 == 1)
            dout1[257*8+7:257*8] <= #DLY mem[address1][257*8+7:257*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[258] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[258] == 1) && (address0 == address1))
	      dout0[258*8+7:258*8] <= #DLY din1[258*8+7:258*8];
	  else if (ce0 == 1)
	      dout0[258*8+7:258*8] <= #DLY mem[address0][258*8+7:258*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[258] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[258] == 0) && (address0 == address1))
            dout1[258*8+7:258*8] <= #DLY din0[258*8+7:258*8];
	  else if (ce1 == 1)
            dout1[258*8+7:258*8] <= #DLY mem[address1][258*8+7:258*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[259] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[259] == 1) && (address0 == address1))
	      dout0[259*8+7:259*8] <= #DLY din1[259*8+7:259*8];
	  else if (ce0 == 1)
	      dout0[259*8+7:259*8] <= #DLY mem[address0][259*8+7:259*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[259] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[259] == 0) && (address0 == address1))
            dout1[259*8+7:259*8] <= #DLY din0[259*8+7:259*8];
	  else if (ce1 == 1)
            dout1[259*8+7:259*8] <= #DLY mem[address1][259*8+7:259*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[260] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[260] == 1) && (address0 == address1))
	      dout0[260*8+7:260*8] <= #DLY din1[260*8+7:260*8];
	  else if (ce0 == 1)
	      dout0[260*8+7:260*8] <= #DLY mem[address0][260*8+7:260*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[260] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[260] == 0) && (address0 == address1))
            dout1[260*8+7:260*8] <= #DLY din0[260*8+7:260*8];
	  else if (ce1 == 1)
            dout1[260*8+7:260*8] <= #DLY mem[address1][260*8+7:260*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[261] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[261] == 1) && (address0 == address1))
	      dout0[261*8+7:261*8] <= #DLY din1[261*8+7:261*8];
	  else if (ce0 == 1)
	      dout0[261*8+7:261*8] <= #DLY mem[address0][261*8+7:261*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[261] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[261] == 0) && (address0 == address1))
            dout1[261*8+7:261*8] <= #DLY din0[261*8+7:261*8];
	  else if (ce1 == 1)
            dout1[261*8+7:261*8] <= #DLY mem[address1][261*8+7:261*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[262] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[262] == 1) && (address0 == address1))
	      dout0[262*8+7:262*8] <= #DLY din1[262*8+7:262*8];
	  else if (ce0 == 1)
	      dout0[262*8+7:262*8] <= #DLY mem[address0][262*8+7:262*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[262] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[262] == 0) && (address0 == address1))
            dout1[262*8+7:262*8] <= #DLY din0[262*8+7:262*8];
	  else if (ce1 == 1)
            dout1[262*8+7:262*8] <= #DLY mem[address1][262*8+7:262*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[263] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[263] == 1) && (address0 == address1))
	      dout0[263*8+7:263*8] <= #DLY din1[263*8+7:263*8];
	  else if (ce0 == 1)
	      dout0[263*8+7:263*8] <= #DLY mem[address0][263*8+7:263*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[263] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[263] == 0) && (address0 == address1))
            dout1[263*8+7:263*8] <= #DLY din0[263*8+7:263*8];
	  else if (ce1 == 1)
            dout1[263*8+7:263*8] <= #DLY mem[address1][263*8+7:263*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[264] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[264] == 1) && (address0 == address1))
	      dout0[264*8+7:264*8] <= #DLY din1[264*8+7:264*8];
	  else if (ce0 == 1)
	      dout0[264*8+7:264*8] <= #DLY mem[address0][264*8+7:264*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[264] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[264] == 0) && (address0 == address1))
            dout1[264*8+7:264*8] <= #DLY din0[264*8+7:264*8];
	  else if (ce1 == 1)
            dout1[264*8+7:264*8] <= #DLY mem[address1][264*8+7:264*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[265] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[265] == 1) && (address0 == address1))
	      dout0[265*8+7:265*8] <= #DLY din1[265*8+7:265*8];
	  else if (ce0 == 1)
	      dout0[265*8+7:265*8] <= #DLY mem[address0][265*8+7:265*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[265] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[265] == 0) && (address0 == address1))
            dout1[265*8+7:265*8] <= #DLY din0[265*8+7:265*8];
	  else if (ce1 == 1)
            dout1[265*8+7:265*8] <= #DLY mem[address1][265*8+7:265*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[266] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[266] == 1) && (address0 == address1))
	      dout0[266*8+7:266*8] <= #DLY din1[266*8+7:266*8];
	  else if (ce0 == 1)
	      dout0[266*8+7:266*8] <= #DLY mem[address0][266*8+7:266*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[266] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[266] == 0) && (address0 == address1))
            dout1[266*8+7:266*8] <= #DLY din0[266*8+7:266*8];
	  else if (ce1 == 1)
            dout1[266*8+7:266*8] <= #DLY mem[address1][266*8+7:266*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[267] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[267] == 1) && (address0 == address1))
	      dout0[267*8+7:267*8] <= #DLY din1[267*8+7:267*8];
	  else if (ce0 == 1)
	      dout0[267*8+7:267*8] <= #DLY mem[address0][267*8+7:267*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[267] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[267] == 0) && (address0 == address1))
            dout1[267*8+7:267*8] <= #DLY din0[267*8+7:267*8];
	  else if (ce1 == 1)
            dout1[267*8+7:267*8] <= #DLY mem[address1][267*8+7:267*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[268] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[268] == 1) && (address0 == address1))
	      dout0[268*8+7:268*8] <= #DLY din1[268*8+7:268*8];
	  else if (ce0 == 1)
	      dout0[268*8+7:268*8] <= #DLY mem[address0][268*8+7:268*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[268] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[268] == 0) && (address0 == address1))
            dout1[268*8+7:268*8] <= #DLY din0[268*8+7:268*8];
	  else if (ce1 == 1)
            dout1[268*8+7:268*8] <= #DLY mem[address1][268*8+7:268*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[269] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[269] == 1) && (address0 == address1))
	      dout0[269*8+7:269*8] <= #DLY din1[269*8+7:269*8];
	  else if (ce0 == 1)
	      dout0[269*8+7:269*8] <= #DLY mem[address0][269*8+7:269*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[269] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[269] == 0) && (address0 == address1))
            dout1[269*8+7:269*8] <= #DLY din0[269*8+7:269*8];
	  else if (ce1 == 1)
            dout1[269*8+7:269*8] <= #DLY mem[address1][269*8+7:269*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[270] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[270] == 1) && (address0 == address1))
	      dout0[270*8+7:270*8] <= #DLY din1[270*8+7:270*8];
	  else if (ce0 == 1)
	      dout0[270*8+7:270*8] <= #DLY mem[address0][270*8+7:270*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[270] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[270] == 0) && (address0 == address1))
            dout1[270*8+7:270*8] <= #DLY din0[270*8+7:270*8];
	  else if (ce1 == 1)
            dout1[270*8+7:270*8] <= #DLY mem[address1][270*8+7:270*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[271] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[271] == 1) && (address0 == address1))
	      dout0[271*8+7:271*8] <= #DLY din1[271*8+7:271*8];
	  else if (ce0 == 1)
	      dout0[271*8+7:271*8] <= #DLY mem[address0][271*8+7:271*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[271] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[271] == 0) && (address0 == address1))
            dout1[271*8+7:271*8] <= #DLY din0[271*8+7:271*8];
	  else if (ce1 == 1)
            dout1[271*8+7:271*8] <= #DLY mem[address1][271*8+7:271*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[272] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[272] == 1) && (address0 == address1))
	      dout0[272*8+7:272*8] <= #DLY din1[272*8+7:272*8];
	  else if (ce0 == 1)
	      dout0[272*8+7:272*8] <= #DLY mem[address0][272*8+7:272*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[272] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[272] == 0) && (address0 == address1))
            dout1[272*8+7:272*8] <= #DLY din0[272*8+7:272*8];
	  else if (ce1 == 1)
            dout1[272*8+7:272*8] <= #DLY mem[address1][272*8+7:272*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[273] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[273] == 1) && (address0 == address1))
	      dout0[273*8+7:273*8] <= #DLY din1[273*8+7:273*8];
	  else if (ce0 == 1)
	      dout0[273*8+7:273*8] <= #DLY mem[address0][273*8+7:273*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[273] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[273] == 0) && (address0 == address1))
            dout1[273*8+7:273*8] <= #DLY din0[273*8+7:273*8];
	  else if (ce1 == 1)
            dout1[273*8+7:273*8] <= #DLY mem[address1][273*8+7:273*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[274] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[274] == 1) && (address0 == address1))
	      dout0[274*8+7:274*8] <= #DLY din1[274*8+7:274*8];
	  else if (ce0 == 1)
	      dout0[274*8+7:274*8] <= #DLY mem[address0][274*8+7:274*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[274] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[274] == 0) && (address0 == address1))
            dout1[274*8+7:274*8] <= #DLY din0[274*8+7:274*8];
	  else if (ce1 == 1)
            dout1[274*8+7:274*8] <= #DLY mem[address1][274*8+7:274*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[275] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[275] == 1) && (address0 == address1))
	      dout0[275*8+7:275*8] <= #DLY din1[275*8+7:275*8];
	  else if (ce0 == 1)
	      dout0[275*8+7:275*8] <= #DLY mem[address0][275*8+7:275*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[275] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[275] == 0) && (address0 == address1))
            dout1[275*8+7:275*8] <= #DLY din0[275*8+7:275*8];
	  else if (ce1 == 1)
            dout1[275*8+7:275*8] <= #DLY mem[address1][275*8+7:275*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[276] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[276] == 1) && (address0 == address1))
	      dout0[276*8+7:276*8] <= #DLY din1[276*8+7:276*8];
	  else if (ce0 == 1)
	      dout0[276*8+7:276*8] <= #DLY mem[address0][276*8+7:276*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[276] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[276] == 0) && (address0 == address1))
            dout1[276*8+7:276*8] <= #DLY din0[276*8+7:276*8];
	  else if (ce1 == 1)
            dout1[276*8+7:276*8] <= #DLY mem[address1][276*8+7:276*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[277] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[277] == 1) && (address0 == address1))
	      dout0[277*8+7:277*8] <= #DLY din1[277*8+7:277*8];
	  else if (ce0 == 1)
	      dout0[277*8+7:277*8] <= #DLY mem[address0][277*8+7:277*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[277] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[277] == 0) && (address0 == address1))
            dout1[277*8+7:277*8] <= #DLY din0[277*8+7:277*8];
	  else if (ce1 == 1)
            dout1[277*8+7:277*8] <= #DLY mem[address1][277*8+7:277*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[278] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[278] == 1) && (address0 == address1))
	      dout0[278*8+7:278*8] <= #DLY din1[278*8+7:278*8];
	  else if (ce0 == 1)
	      dout0[278*8+7:278*8] <= #DLY mem[address0][278*8+7:278*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[278] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[278] == 0) && (address0 == address1))
            dout1[278*8+7:278*8] <= #DLY din0[278*8+7:278*8];
	  else if (ce1 == 1)
            dout1[278*8+7:278*8] <= #DLY mem[address1][278*8+7:278*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[279] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[279] == 1) && (address0 == address1))
	      dout0[279*8+7:279*8] <= #DLY din1[279*8+7:279*8];
	  else if (ce0 == 1)
	      dout0[279*8+7:279*8] <= #DLY mem[address0][279*8+7:279*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[279] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[279] == 0) && (address0 == address1))
            dout1[279*8+7:279*8] <= #DLY din0[279*8+7:279*8];
	  else if (ce1 == 1)
            dout1[279*8+7:279*8] <= #DLY mem[address1][279*8+7:279*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[280] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[280] == 1) && (address0 == address1))
	      dout0[280*8+7:280*8] <= #DLY din1[280*8+7:280*8];
	  else if (ce0 == 1)
	      dout0[280*8+7:280*8] <= #DLY mem[address0][280*8+7:280*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[280] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[280] == 0) && (address0 == address1))
            dout1[280*8+7:280*8] <= #DLY din0[280*8+7:280*8];
	  else if (ce1 == 1)
            dout1[280*8+7:280*8] <= #DLY mem[address1][280*8+7:280*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[281] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[281] == 1) && (address0 == address1))
	      dout0[281*8+7:281*8] <= #DLY din1[281*8+7:281*8];
	  else if (ce0 == 1)
	      dout0[281*8+7:281*8] <= #DLY mem[address0][281*8+7:281*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[281] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[281] == 0) && (address0 == address1))
            dout1[281*8+7:281*8] <= #DLY din0[281*8+7:281*8];
	  else if (ce1 == 1)
            dout1[281*8+7:281*8] <= #DLY mem[address1][281*8+7:281*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[282] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[282] == 1) && (address0 == address1))
	      dout0[282*8+7:282*8] <= #DLY din1[282*8+7:282*8];
	  else if (ce0 == 1)
	      dout0[282*8+7:282*8] <= #DLY mem[address0][282*8+7:282*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[282] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[282] == 0) && (address0 == address1))
            dout1[282*8+7:282*8] <= #DLY din0[282*8+7:282*8];
	  else if (ce1 == 1)
            dout1[282*8+7:282*8] <= #DLY mem[address1][282*8+7:282*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[283] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[283] == 1) && (address0 == address1))
	      dout0[283*8+7:283*8] <= #DLY din1[283*8+7:283*8];
	  else if (ce0 == 1)
	      dout0[283*8+7:283*8] <= #DLY mem[address0][283*8+7:283*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[283] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[283] == 0) && (address0 == address1))
            dout1[283*8+7:283*8] <= #DLY din0[283*8+7:283*8];
	  else if (ce1 == 1)
            dout1[283*8+7:283*8] <= #DLY mem[address1][283*8+7:283*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[284] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[284] == 1) && (address0 == address1))
	      dout0[284*8+7:284*8] <= #DLY din1[284*8+7:284*8];
	  else if (ce0 == 1)
	      dout0[284*8+7:284*8] <= #DLY mem[address0][284*8+7:284*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[284] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[284] == 0) && (address0 == address1))
            dout1[284*8+7:284*8] <= #DLY din0[284*8+7:284*8];
	  else if (ce1 == 1)
            dout1[284*8+7:284*8] <= #DLY mem[address1][284*8+7:284*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[285] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[285] == 1) && (address0 == address1))
	      dout0[285*8+7:285*8] <= #DLY din1[285*8+7:285*8];
	  else if (ce0 == 1)
	      dout0[285*8+7:285*8] <= #DLY mem[address0][285*8+7:285*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[285] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[285] == 0) && (address0 == address1))
            dout1[285*8+7:285*8] <= #DLY din0[285*8+7:285*8];
	  else if (ce1 == 1)
            dout1[285*8+7:285*8] <= #DLY mem[address1][285*8+7:285*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[286] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[286] == 1) && (address0 == address1))
	      dout0[286*8+7:286*8] <= #DLY din1[286*8+7:286*8];
	  else if (ce0 == 1)
	      dout0[286*8+7:286*8] <= #DLY mem[address0][286*8+7:286*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[286] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[286] == 0) && (address0 == address1))
            dout1[286*8+7:286*8] <= #DLY din0[286*8+7:286*8];
	  else if (ce1 == 1)
            dout1[286*8+7:286*8] <= #DLY mem[address1][286*8+7:286*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[287] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[287] == 1) && (address0 == address1))
	      dout0[287*8+7:287*8] <= #DLY din1[287*8+7:287*8];
	  else if (ce0 == 1)
	      dout0[287*8+7:287*8] <= #DLY mem[address0][287*8+7:287*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[287] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[287] == 0) && (address0 == address1))
            dout1[287*8+7:287*8] <= #DLY din0[287*8+7:287*8];
	  else if (ce1 == 1)
            dout1[287*8+7:287*8] <= #DLY mem[address1][287*8+7:287*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[288] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[288] == 1) && (address0 == address1))
	      dout0[288*8+7:288*8] <= #DLY din1[288*8+7:288*8];
	  else if (ce0 == 1)
	      dout0[288*8+7:288*8] <= #DLY mem[address0][288*8+7:288*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[288] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[288] == 0) && (address0 == address1))
            dout1[288*8+7:288*8] <= #DLY din0[288*8+7:288*8];
	  else if (ce1 == 1)
            dout1[288*8+7:288*8] <= #DLY mem[address1][288*8+7:288*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[289] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[289] == 1) && (address0 == address1))
	      dout0[289*8+7:289*8] <= #DLY din1[289*8+7:289*8];
	  else if (ce0 == 1)
	      dout0[289*8+7:289*8] <= #DLY mem[address0][289*8+7:289*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[289] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[289] == 0) && (address0 == address1))
            dout1[289*8+7:289*8] <= #DLY din0[289*8+7:289*8];
	  else if (ce1 == 1)
            dout1[289*8+7:289*8] <= #DLY mem[address1][289*8+7:289*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[290] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[290] == 1) && (address0 == address1))
	      dout0[290*8+7:290*8] <= #DLY din1[290*8+7:290*8];
	  else if (ce0 == 1)
	      dout0[290*8+7:290*8] <= #DLY mem[address0][290*8+7:290*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[290] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[290] == 0) && (address0 == address1))
            dout1[290*8+7:290*8] <= #DLY din0[290*8+7:290*8];
	  else if (ce1 == 1)
            dout1[290*8+7:290*8] <= #DLY mem[address1][290*8+7:290*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[291] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[291] == 1) && (address0 == address1))
	      dout0[291*8+7:291*8] <= #DLY din1[291*8+7:291*8];
	  else if (ce0 == 1)
	      dout0[291*8+7:291*8] <= #DLY mem[address0][291*8+7:291*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[291] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[291] == 0) && (address0 == address1))
            dout1[291*8+7:291*8] <= #DLY din0[291*8+7:291*8];
	  else if (ce1 == 1)
            dout1[291*8+7:291*8] <= #DLY mem[address1][291*8+7:291*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[292] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[292] == 1) && (address0 == address1))
	      dout0[292*8+7:292*8] <= #DLY din1[292*8+7:292*8];
	  else if (ce0 == 1)
	      dout0[292*8+7:292*8] <= #DLY mem[address0][292*8+7:292*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[292] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[292] == 0) && (address0 == address1))
            dout1[292*8+7:292*8] <= #DLY din0[292*8+7:292*8];
	  else if (ce1 == 1)
            dout1[292*8+7:292*8] <= #DLY mem[address1][292*8+7:292*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[293] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[293] == 1) && (address0 == address1))
	      dout0[293*8+7:293*8] <= #DLY din1[293*8+7:293*8];
	  else if (ce0 == 1)
	      dout0[293*8+7:293*8] <= #DLY mem[address0][293*8+7:293*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[293] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[293] == 0) && (address0 == address1))
            dout1[293*8+7:293*8] <= #DLY din0[293*8+7:293*8];
	  else if (ce1 == 1)
            dout1[293*8+7:293*8] <= #DLY mem[address1][293*8+7:293*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[294] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[294] == 1) && (address0 == address1))
	      dout0[294*8+7:294*8] <= #DLY din1[294*8+7:294*8];
	  else if (ce0 == 1)
	      dout0[294*8+7:294*8] <= #DLY mem[address0][294*8+7:294*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[294] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[294] == 0) && (address0 == address1))
            dout1[294*8+7:294*8] <= #DLY din0[294*8+7:294*8];
	  else if (ce1 == 1)
            dout1[294*8+7:294*8] <= #DLY mem[address1][294*8+7:294*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[295] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[295] == 1) && (address0 == address1))
	      dout0[295*8+7:295*8] <= #DLY din1[295*8+7:295*8];
	  else if (ce0 == 1)
	      dout0[295*8+7:295*8] <= #DLY mem[address0][295*8+7:295*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[295] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[295] == 0) && (address0 == address1))
            dout1[295*8+7:295*8] <= #DLY din0[295*8+7:295*8];
	  else if (ce1 == 1)
            dout1[295*8+7:295*8] <= #DLY mem[address1][295*8+7:295*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[296] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[296] == 1) && (address0 == address1))
	      dout0[296*8+7:296*8] <= #DLY din1[296*8+7:296*8];
	  else if (ce0 == 1)
	      dout0[296*8+7:296*8] <= #DLY mem[address0][296*8+7:296*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[296] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[296] == 0) && (address0 == address1))
            dout1[296*8+7:296*8] <= #DLY din0[296*8+7:296*8];
	  else if (ce1 == 1)
            dout1[296*8+7:296*8] <= #DLY mem[address1][296*8+7:296*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[297] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[297] == 1) && (address0 == address1))
	      dout0[297*8+7:297*8] <= #DLY din1[297*8+7:297*8];
	  else if (ce0 == 1)
	      dout0[297*8+7:297*8] <= #DLY mem[address0][297*8+7:297*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[297] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[297] == 0) && (address0 == address1))
            dout1[297*8+7:297*8] <= #DLY din0[297*8+7:297*8];
	  else if (ce1 == 1)
            dout1[297*8+7:297*8] <= #DLY mem[address1][297*8+7:297*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[298] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[298] == 1) && (address0 == address1))
	      dout0[298*8+7:298*8] <= #DLY din1[298*8+7:298*8];
	  else if (ce0 == 1)
	      dout0[298*8+7:298*8] <= #DLY mem[address0][298*8+7:298*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[298] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[298] == 0) && (address0 == address1))
            dout1[298*8+7:298*8] <= #DLY din0[298*8+7:298*8];
	  else if (ce1 == 1)
            dout1[298*8+7:298*8] <= #DLY mem[address1][298*8+7:298*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[299] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[299] == 1) && (address0 == address1))
	      dout0[299*8+7:299*8] <= #DLY din1[299*8+7:299*8];
	  else if (ce0 == 1)
	      dout0[299*8+7:299*8] <= #DLY mem[address0][299*8+7:299*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[299] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[299] == 0) && (address0 == address1))
            dout1[299*8+7:299*8] <= #DLY din0[299*8+7:299*8];
	  else if (ce1 == 1)
            dout1[299*8+7:299*8] <= #DLY mem[address1][299*8+7:299*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[300] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[300] == 1) && (address0 == address1))
	      dout0[300*8+7:300*8] <= #DLY din1[300*8+7:300*8];
	  else if (ce0 == 1)
	      dout0[300*8+7:300*8] <= #DLY mem[address0][300*8+7:300*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[300] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[300] == 0) && (address0 == address1))
            dout1[300*8+7:300*8] <= #DLY din0[300*8+7:300*8];
	  else if (ce1 == 1)
            dout1[300*8+7:300*8] <= #DLY mem[address1][300*8+7:300*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[301] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[301] == 1) && (address0 == address1))
	      dout0[301*8+7:301*8] <= #DLY din1[301*8+7:301*8];
	  else if (ce0 == 1)
	      dout0[301*8+7:301*8] <= #DLY mem[address0][301*8+7:301*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[301] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[301] == 0) && (address0 == address1))
            dout1[301*8+7:301*8] <= #DLY din0[301*8+7:301*8];
	  else if (ce1 == 1)
            dout1[301*8+7:301*8] <= #DLY mem[address1][301*8+7:301*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[302] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[302] == 1) && (address0 == address1))
	      dout0[302*8+7:302*8] <= #DLY din1[302*8+7:302*8];
	  else if (ce0 == 1)
	      dout0[302*8+7:302*8] <= #DLY mem[address0][302*8+7:302*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[302] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[302] == 0) && (address0 == address1))
            dout1[302*8+7:302*8] <= #DLY din0[302*8+7:302*8];
	  else if (ce1 == 1)
            dout1[302*8+7:302*8] <= #DLY mem[address1][302*8+7:302*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[303] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[303] == 1) && (address0 == address1))
	      dout0[303*8+7:303*8] <= #DLY din1[303*8+7:303*8];
	  else if (ce0 == 1)
	      dout0[303*8+7:303*8] <= #DLY mem[address0][303*8+7:303*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[303] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[303] == 0) && (address0 == address1))
            dout1[303*8+7:303*8] <= #DLY din0[303*8+7:303*8];
	  else if (ce1 == 1)
            dout1[303*8+7:303*8] <= #DLY mem[address1][303*8+7:303*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[304] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[304] == 1) && (address0 == address1))
	      dout0[304*8+7:304*8] <= #DLY din1[304*8+7:304*8];
	  else if (ce0 == 1)
	      dout0[304*8+7:304*8] <= #DLY mem[address0][304*8+7:304*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[304] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[304] == 0) && (address0 == address1))
            dout1[304*8+7:304*8] <= #DLY din0[304*8+7:304*8];
	  else if (ce1 == 1)
            dout1[304*8+7:304*8] <= #DLY mem[address1][304*8+7:304*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[305] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[305] == 1) && (address0 == address1))
	      dout0[305*8+7:305*8] <= #DLY din1[305*8+7:305*8];
	  else if (ce0 == 1)
	      dout0[305*8+7:305*8] <= #DLY mem[address0][305*8+7:305*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[305] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[305] == 0) && (address0 == address1))
            dout1[305*8+7:305*8] <= #DLY din0[305*8+7:305*8];
	  else if (ce1 == 1)
            dout1[305*8+7:305*8] <= #DLY mem[address1][305*8+7:305*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[306] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[306] == 1) && (address0 == address1))
	      dout0[306*8+7:306*8] <= #DLY din1[306*8+7:306*8];
	  else if (ce0 == 1)
	      dout0[306*8+7:306*8] <= #DLY mem[address0][306*8+7:306*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[306] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[306] == 0) && (address0 == address1))
            dout1[306*8+7:306*8] <= #DLY din0[306*8+7:306*8];
	  else if (ce1 == 1)
            dout1[306*8+7:306*8] <= #DLY mem[address1][306*8+7:306*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[307] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[307] == 1) && (address0 == address1))
	      dout0[307*8+7:307*8] <= #DLY din1[307*8+7:307*8];
	  else if (ce0 == 1)
	      dout0[307*8+7:307*8] <= #DLY mem[address0][307*8+7:307*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[307] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[307] == 0) && (address0 == address1))
            dout1[307*8+7:307*8] <= #DLY din0[307*8+7:307*8];
	  else if (ce1 == 1)
            dout1[307*8+7:307*8] <= #DLY mem[address1][307*8+7:307*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[308] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[308] == 1) && (address0 == address1))
	      dout0[308*8+7:308*8] <= #DLY din1[308*8+7:308*8];
	  else if (ce0 == 1)
	      dout0[308*8+7:308*8] <= #DLY mem[address0][308*8+7:308*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[308] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[308] == 0) && (address0 == address1))
            dout1[308*8+7:308*8] <= #DLY din0[308*8+7:308*8];
	  else if (ce1 == 1)
            dout1[308*8+7:308*8] <= #DLY mem[address1][308*8+7:308*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[309] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[309] == 1) && (address0 == address1))
	      dout0[309*8+7:309*8] <= #DLY din1[309*8+7:309*8];
	  else if (ce0 == 1)
	      dout0[309*8+7:309*8] <= #DLY mem[address0][309*8+7:309*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[309] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[309] == 0) && (address0 == address1))
            dout1[309*8+7:309*8] <= #DLY din0[309*8+7:309*8];
	  else if (ce1 == 1)
            dout1[309*8+7:309*8] <= #DLY mem[address1][309*8+7:309*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[310] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[310] == 1) && (address0 == address1))
	      dout0[310*8+7:310*8] <= #DLY din1[310*8+7:310*8];
	  else if (ce0 == 1)
	      dout0[310*8+7:310*8] <= #DLY mem[address0][310*8+7:310*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[310] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[310] == 0) && (address0 == address1))
            dout1[310*8+7:310*8] <= #DLY din0[310*8+7:310*8];
	  else if (ce1 == 1)
            dout1[310*8+7:310*8] <= #DLY mem[address1][310*8+7:310*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[311] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[311] == 1) && (address0 == address1))
	      dout0[311*8+7:311*8] <= #DLY din1[311*8+7:311*8];
	  else if (ce0 == 1)
	      dout0[311*8+7:311*8] <= #DLY mem[address0][311*8+7:311*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[311] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[311] == 0) && (address0 == address1))
            dout1[311*8+7:311*8] <= #DLY din0[311*8+7:311*8];
	  else if (ce1 == 1)
            dout1[311*8+7:311*8] <= #DLY mem[address1][311*8+7:311*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[312] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[312] == 1) && (address0 == address1))
	      dout0[312*8+7:312*8] <= #DLY din1[312*8+7:312*8];
	  else if (ce0 == 1)
	      dout0[312*8+7:312*8] <= #DLY mem[address0][312*8+7:312*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[312] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[312] == 0) && (address0 == address1))
            dout1[312*8+7:312*8] <= #DLY din0[312*8+7:312*8];
	  else if (ce1 == 1)
            dout1[312*8+7:312*8] <= #DLY mem[address1][312*8+7:312*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[313] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[313] == 1) && (address0 == address1))
	      dout0[313*8+7:313*8] <= #DLY din1[313*8+7:313*8];
	  else if (ce0 == 1)
	      dout0[313*8+7:313*8] <= #DLY mem[address0][313*8+7:313*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[313] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[313] == 0) && (address0 == address1))
            dout1[313*8+7:313*8] <= #DLY din0[313*8+7:313*8];
	  else if (ce1 == 1)
            dout1[313*8+7:313*8] <= #DLY mem[address1][313*8+7:313*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[314] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[314] == 1) && (address0 == address1))
	      dout0[314*8+7:314*8] <= #DLY din1[314*8+7:314*8];
	  else if (ce0 == 1)
	      dout0[314*8+7:314*8] <= #DLY mem[address0][314*8+7:314*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[314] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[314] == 0) && (address0 == address1))
            dout1[314*8+7:314*8] <= #DLY din0[314*8+7:314*8];
	  else if (ce1 == 1)
            dout1[314*8+7:314*8] <= #DLY mem[address1][314*8+7:314*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[315] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[315] == 1) && (address0 == address1))
	      dout0[315*8+7:315*8] <= #DLY din1[315*8+7:315*8];
	  else if (ce0 == 1)
	      dout0[315*8+7:315*8] <= #DLY mem[address0][315*8+7:315*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[315] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[315] == 0) && (address0 == address1))
            dout1[315*8+7:315*8] <= #DLY din0[315*8+7:315*8];
	  else if (ce1 == 1)
            dout1[315*8+7:315*8] <= #DLY mem[address1][315*8+7:315*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[316] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[316] == 1) && (address0 == address1))
	      dout0[316*8+7:316*8] <= #DLY din1[316*8+7:316*8];
	  else if (ce0 == 1)
	      dout0[316*8+7:316*8] <= #DLY mem[address0][316*8+7:316*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[316] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[316] == 0) && (address0 == address1))
            dout1[316*8+7:316*8] <= #DLY din0[316*8+7:316*8];
	  else if (ce1 == 1)
            dout1[316*8+7:316*8] <= #DLY mem[address1][316*8+7:316*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[317] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[317] == 1) && (address0 == address1))
	      dout0[317*8+7:317*8] <= #DLY din1[317*8+7:317*8];
	  else if (ce0 == 1)
	      dout0[317*8+7:317*8] <= #DLY mem[address0][317*8+7:317*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[317] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[317] == 0) && (address0 == address1))
            dout1[317*8+7:317*8] <= #DLY din0[317*8+7:317*8];
	  else if (ce1 == 1)
            dout1[317*8+7:317*8] <= #DLY mem[address1][317*8+7:317*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[318] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[318] == 1) && (address0 == address1))
	      dout0[318*8+7:318*8] <= #DLY din1[318*8+7:318*8];
	  else if (ce0 == 1)
	      dout0[318*8+7:318*8] <= #DLY mem[address0][318*8+7:318*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[318] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[318] == 0) && (address0 == address1))
            dout1[318*8+7:318*8] <= #DLY din0[318*8+7:318*8];
	  else if (ce1 == 1)
            dout1[318*8+7:318*8] <= #DLY mem[address1][318*8+7:318*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[319] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[319] == 1) && (address0 == address1))
	      dout0[319*8+7:319*8] <= #DLY din1[319*8+7:319*8];
	  else if (ce0 == 1)
	      dout0[319*8+7:319*8] <= #DLY mem[address0][319*8+7:319*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[319] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[319] == 0) && (address0 == address1))
            dout1[319*8+7:319*8] <= #DLY din0[319*8+7:319*8];
	  else if (ce1 == 1)
            dout1[319*8+7:319*8] <= #DLY mem[address1][319*8+7:319*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[320] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[320] == 1) && (address0 == address1))
	      dout0[320*8+7:320*8] <= #DLY din1[320*8+7:320*8];
	  else if (ce0 == 1)
	      dout0[320*8+7:320*8] <= #DLY mem[address0][320*8+7:320*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[320] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[320] == 0) && (address0 == address1))
            dout1[320*8+7:320*8] <= #DLY din0[320*8+7:320*8];
	  else if (ce1 == 1)
            dout1[320*8+7:320*8] <= #DLY mem[address1][320*8+7:320*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[321] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[321] == 1) && (address0 == address1))
	      dout0[321*8+7:321*8] <= #DLY din1[321*8+7:321*8];
	  else if (ce0 == 1)
	      dout0[321*8+7:321*8] <= #DLY mem[address0][321*8+7:321*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[321] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[321] == 0) && (address0 == address1))
            dout1[321*8+7:321*8] <= #DLY din0[321*8+7:321*8];
	  else if (ce1 == 1)
            dout1[321*8+7:321*8] <= #DLY mem[address1][321*8+7:321*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[322] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[322] == 1) && (address0 == address1))
	      dout0[322*8+7:322*8] <= #DLY din1[322*8+7:322*8];
	  else if (ce0 == 1)
	      dout0[322*8+7:322*8] <= #DLY mem[address0][322*8+7:322*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[322] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[322] == 0) && (address0 == address1))
            dout1[322*8+7:322*8] <= #DLY din0[322*8+7:322*8];
	  else if (ce1 == 1)
            dout1[322*8+7:322*8] <= #DLY mem[address1][322*8+7:322*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[323] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[323] == 1) && (address0 == address1))
	      dout0[323*8+7:323*8] <= #DLY din1[323*8+7:323*8];
	  else if (ce0 == 1)
	      dout0[323*8+7:323*8] <= #DLY mem[address0][323*8+7:323*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[323] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[323] == 0) && (address0 == address1))
            dout1[323*8+7:323*8] <= #DLY din0[323*8+7:323*8];
	  else if (ce1 == 1)
            dout1[323*8+7:323*8] <= #DLY mem[address1][323*8+7:323*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[324] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[324] == 1) && (address0 == address1))
	      dout0[324*8+7:324*8] <= #DLY din1[324*8+7:324*8];
	  else if (ce0 == 1)
	      dout0[324*8+7:324*8] <= #DLY mem[address0][324*8+7:324*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[324] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[324] == 0) && (address0 == address1))
            dout1[324*8+7:324*8] <= #DLY din0[324*8+7:324*8];
	  else if (ce1 == 1)
            dout1[324*8+7:324*8] <= #DLY mem[address1][324*8+7:324*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[325] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[325] == 1) && (address0 == address1))
	      dout0[325*8+7:325*8] <= #DLY din1[325*8+7:325*8];
	  else if (ce0 == 1)
	      dout0[325*8+7:325*8] <= #DLY mem[address0][325*8+7:325*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[325] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[325] == 0) && (address0 == address1))
            dout1[325*8+7:325*8] <= #DLY din0[325*8+7:325*8];
	  else if (ce1 == 1)
            dout1[325*8+7:325*8] <= #DLY mem[address1][325*8+7:325*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[326] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[326] == 1) && (address0 == address1))
	      dout0[326*8+7:326*8] <= #DLY din1[326*8+7:326*8];
	  else if (ce0 == 1)
	      dout0[326*8+7:326*8] <= #DLY mem[address0][326*8+7:326*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[326] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[326] == 0) && (address0 == address1))
            dout1[326*8+7:326*8] <= #DLY din0[326*8+7:326*8];
	  else if (ce1 == 1)
            dout1[326*8+7:326*8] <= #DLY mem[address1][326*8+7:326*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[327] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[327] == 1) && (address0 == address1))
	      dout0[327*8+7:327*8] <= #DLY din1[327*8+7:327*8];
	  else if (ce0 == 1)
	      dout0[327*8+7:327*8] <= #DLY mem[address0][327*8+7:327*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[327] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[327] == 0) && (address0 == address1))
            dout1[327*8+7:327*8] <= #DLY din0[327*8+7:327*8];
	  else if (ce1 == 1)
            dout1[327*8+7:327*8] <= #DLY mem[address1][327*8+7:327*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[328] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[328] == 1) && (address0 == address1))
	      dout0[328*8+7:328*8] <= #DLY din1[328*8+7:328*8];
	  else if (ce0 == 1)
	      dout0[328*8+7:328*8] <= #DLY mem[address0][328*8+7:328*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[328] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[328] == 0) && (address0 == address1))
            dout1[328*8+7:328*8] <= #DLY din0[328*8+7:328*8];
	  else if (ce1 == 1)
            dout1[328*8+7:328*8] <= #DLY mem[address1][328*8+7:328*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[329] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[329] == 1) && (address0 == address1))
	      dout0[329*8+7:329*8] <= #DLY din1[329*8+7:329*8];
	  else if (ce0 == 1)
	      dout0[329*8+7:329*8] <= #DLY mem[address0][329*8+7:329*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[329] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[329] == 0) && (address0 == address1))
            dout1[329*8+7:329*8] <= #DLY din0[329*8+7:329*8];
	  else if (ce1 == 1)
            dout1[329*8+7:329*8] <= #DLY mem[address1][329*8+7:329*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[330] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[330] == 1) && (address0 == address1))
	      dout0[330*8+7:330*8] <= #DLY din1[330*8+7:330*8];
	  else if (ce0 == 1)
	      dout0[330*8+7:330*8] <= #DLY mem[address0][330*8+7:330*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[330] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[330] == 0) && (address0 == address1))
            dout1[330*8+7:330*8] <= #DLY din0[330*8+7:330*8];
	  else if (ce1 == 1)
            dout1[330*8+7:330*8] <= #DLY mem[address1][330*8+7:330*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[331] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[331] == 1) && (address0 == address1))
	      dout0[331*8+7:331*8] <= #DLY din1[331*8+7:331*8];
	  else if (ce0 == 1)
	      dout0[331*8+7:331*8] <= #DLY mem[address0][331*8+7:331*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[331] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[331] == 0) && (address0 == address1))
            dout1[331*8+7:331*8] <= #DLY din0[331*8+7:331*8];
	  else if (ce1 == 1)
            dout1[331*8+7:331*8] <= #DLY mem[address1][331*8+7:331*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[332] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[332] == 1) && (address0 == address1))
	      dout0[332*8+7:332*8] <= #DLY din1[332*8+7:332*8];
	  else if (ce0 == 1)
	      dout0[332*8+7:332*8] <= #DLY mem[address0][332*8+7:332*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[332] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[332] == 0) && (address0 == address1))
            dout1[332*8+7:332*8] <= #DLY din0[332*8+7:332*8];
	  else if (ce1 == 1)
            dout1[332*8+7:332*8] <= #DLY mem[address1][332*8+7:332*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[333] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[333] == 1) && (address0 == address1))
	      dout0[333*8+7:333*8] <= #DLY din1[333*8+7:333*8];
	  else if (ce0 == 1)
	      dout0[333*8+7:333*8] <= #DLY mem[address0][333*8+7:333*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[333] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[333] == 0) && (address0 == address1))
            dout1[333*8+7:333*8] <= #DLY din0[333*8+7:333*8];
	  else if (ce1 == 1)
            dout1[333*8+7:333*8] <= #DLY mem[address1][333*8+7:333*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[334] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[334] == 1) && (address0 == address1))
	      dout0[334*8+7:334*8] <= #DLY din1[334*8+7:334*8];
	  else if (ce0 == 1)
	      dout0[334*8+7:334*8] <= #DLY mem[address0][334*8+7:334*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[334] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[334] == 0) && (address0 == address1))
            dout1[334*8+7:334*8] <= #DLY din0[334*8+7:334*8];
	  else if (ce1 == 1)
            dout1[334*8+7:334*8] <= #DLY mem[address1][334*8+7:334*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[335] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[335] == 1) && (address0 == address1))
	      dout0[335*8+7:335*8] <= #DLY din1[335*8+7:335*8];
	  else if (ce0 == 1)
	      dout0[335*8+7:335*8] <= #DLY mem[address0][335*8+7:335*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[335] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[335] == 0) && (address0 == address1))
            dout1[335*8+7:335*8] <= #DLY din0[335*8+7:335*8];
	  else if (ce1 == 1)
            dout1[335*8+7:335*8] <= #DLY mem[address1][335*8+7:335*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[336] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[336] == 1) && (address0 == address1))
	      dout0[336*8+7:336*8] <= #DLY din1[336*8+7:336*8];
	  else if (ce0 == 1)
	      dout0[336*8+7:336*8] <= #DLY mem[address0][336*8+7:336*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[336] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[336] == 0) && (address0 == address1))
            dout1[336*8+7:336*8] <= #DLY din0[336*8+7:336*8];
	  else if (ce1 == 1)
            dout1[336*8+7:336*8] <= #DLY mem[address1][336*8+7:336*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[337] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[337] == 1) && (address0 == address1))
	      dout0[337*8+7:337*8] <= #DLY din1[337*8+7:337*8];
	  else if (ce0 == 1)
	      dout0[337*8+7:337*8] <= #DLY mem[address0][337*8+7:337*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[337] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[337] == 0) && (address0 == address1))
            dout1[337*8+7:337*8] <= #DLY din0[337*8+7:337*8];
	  else if (ce1 == 1)
            dout1[337*8+7:337*8] <= #DLY mem[address1][337*8+7:337*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[338] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[338] == 1) && (address0 == address1))
	      dout0[338*8+7:338*8] <= #DLY din1[338*8+7:338*8];
	  else if (ce0 == 1)
	      dout0[338*8+7:338*8] <= #DLY mem[address0][338*8+7:338*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[338] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[338] == 0) && (address0 == address1))
            dout1[338*8+7:338*8] <= #DLY din0[338*8+7:338*8];
	  else if (ce1 == 1)
            dout1[338*8+7:338*8] <= #DLY mem[address1][338*8+7:338*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[339] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[339] == 1) && (address0 == address1))
	      dout0[339*8+7:339*8] <= #DLY din1[339*8+7:339*8];
	  else if (ce0 == 1)
	      dout0[339*8+7:339*8] <= #DLY mem[address0][339*8+7:339*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[339] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[339] == 0) && (address0 == address1))
            dout1[339*8+7:339*8] <= #DLY din0[339*8+7:339*8];
	  else if (ce1 == 1)
            dout1[339*8+7:339*8] <= #DLY mem[address1][339*8+7:339*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[340] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[340] == 1) && (address0 == address1))
	      dout0[340*8+7:340*8] <= #DLY din1[340*8+7:340*8];
	  else if (ce0 == 1)
	      dout0[340*8+7:340*8] <= #DLY mem[address0][340*8+7:340*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[340] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[340] == 0) && (address0 == address1))
            dout1[340*8+7:340*8] <= #DLY din0[340*8+7:340*8];
	  else if (ce1 == 1)
            dout1[340*8+7:340*8] <= #DLY mem[address1][340*8+7:340*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[341] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[341] == 1) && (address0 == address1))
	      dout0[341*8+7:341*8] <= #DLY din1[341*8+7:341*8];
	  else if (ce0 == 1)
	      dout0[341*8+7:341*8] <= #DLY mem[address0][341*8+7:341*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[341] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[341] == 0) && (address0 == address1))
            dout1[341*8+7:341*8] <= #DLY din0[341*8+7:341*8];
	  else if (ce1 == 1)
            dout1[341*8+7:341*8] <= #DLY mem[address1][341*8+7:341*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[342] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[342] == 1) && (address0 == address1))
	      dout0[342*8+7:342*8] <= #DLY din1[342*8+7:342*8];
	  else if (ce0 == 1)
	      dout0[342*8+7:342*8] <= #DLY mem[address0][342*8+7:342*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[342] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[342] == 0) && (address0 == address1))
            dout1[342*8+7:342*8] <= #DLY din0[342*8+7:342*8];
	  else if (ce1 == 1)
            dout1[342*8+7:342*8] <= #DLY mem[address1][342*8+7:342*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[343] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[343] == 1) && (address0 == address1))
	      dout0[343*8+7:343*8] <= #DLY din1[343*8+7:343*8];
	  else if (ce0 == 1)
	      dout0[343*8+7:343*8] <= #DLY mem[address0][343*8+7:343*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[343] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[343] == 0) && (address0 == address1))
            dout1[343*8+7:343*8] <= #DLY din0[343*8+7:343*8];
	  else if (ce1 == 1)
            dout1[343*8+7:343*8] <= #DLY mem[address1][343*8+7:343*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[344] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[344] == 1) && (address0 == address1))
	      dout0[344*8+7:344*8] <= #DLY din1[344*8+7:344*8];
	  else if (ce0 == 1)
	      dout0[344*8+7:344*8] <= #DLY mem[address0][344*8+7:344*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[344] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[344] == 0) && (address0 == address1))
            dout1[344*8+7:344*8] <= #DLY din0[344*8+7:344*8];
	  else if (ce1 == 1)
            dout1[344*8+7:344*8] <= #DLY mem[address1][344*8+7:344*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[345] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[345] == 1) && (address0 == address1))
	      dout0[345*8+7:345*8] <= #DLY din1[345*8+7:345*8];
	  else if (ce0 == 1)
	      dout0[345*8+7:345*8] <= #DLY mem[address0][345*8+7:345*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[345] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[345] == 0) && (address0 == address1))
            dout1[345*8+7:345*8] <= #DLY din0[345*8+7:345*8];
	  else if (ce1 == 1)
            dout1[345*8+7:345*8] <= #DLY mem[address1][345*8+7:345*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[346] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[346] == 1) && (address0 == address1))
	      dout0[346*8+7:346*8] <= #DLY din1[346*8+7:346*8];
	  else if (ce0 == 1)
	      dout0[346*8+7:346*8] <= #DLY mem[address0][346*8+7:346*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[346] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[346] == 0) && (address0 == address1))
            dout1[346*8+7:346*8] <= #DLY din0[346*8+7:346*8];
	  else if (ce1 == 1)
            dout1[346*8+7:346*8] <= #DLY mem[address1][346*8+7:346*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[347] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[347] == 1) && (address0 == address1))
	      dout0[347*8+7:347*8] <= #DLY din1[347*8+7:347*8];
	  else if (ce0 == 1)
	      dout0[347*8+7:347*8] <= #DLY mem[address0][347*8+7:347*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[347] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[347] == 0) && (address0 == address1))
            dout1[347*8+7:347*8] <= #DLY din0[347*8+7:347*8];
	  else if (ce1 == 1)
            dout1[347*8+7:347*8] <= #DLY mem[address1][347*8+7:347*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[348] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[348] == 1) && (address0 == address1))
	      dout0[348*8+7:348*8] <= #DLY din1[348*8+7:348*8];
	  else if (ce0 == 1)
	      dout0[348*8+7:348*8] <= #DLY mem[address0][348*8+7:348*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[348] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[348] == 0) && (address0 == address1))
            dout1[348*8+7:348*8] <= #DLY din0[348*8+7:348*8];
	  else if (ce1 == 1)
            dout1[348*8+7:348*8] <= #DLY mem[address1][348*8+7:348*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[349] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[349] == 1) && (address0 == address1))
	      dout0[349*8+7:349*8] <= #DLY din1[349*8+7:349*8];
	  else if (ce0 == 1)
	      dout0[349*8+7:349*8] <= #DLY mem[address0][349*8+7:349*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[349] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[349] == 0) && (address0 == address1))
            dout1[349*8+7:349*8] <= #DLY din0[349*8+7:349*8];
	  else if (ce1 == 1)
            dout1[349*8+7:349*8] <= #DLY mem[address1][349*8+7:349*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[350] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[350] == 1) && (address0 == address1))
	      dout0[350*8+7:350*8] <= #DLY din1[350*8+7:350*8];
	  else if (ce0 == 1)
	      dout0[350*8+7:350*8] <= #DLY mem[address0][350*8+7:350*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[350] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[350] == 0) && (address0 == address1))
            dout1[350*8+7:350*8] <= #DLY din0[350*8+7:350*8];
	  else if (ce1 == 1)
            dout1[350*8+7:350*8] <= #DLY mem[address1][350*8+7:350*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[351] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[351] == 1) && (address0 == address1))
	      dout0[351*8+7:351*8] <= #DLY din1[351*8+7:351*8];
	  else if (ce0 == 1)
	      dout0[351*8+7:351*8] <= #DLY mem[address0][351*8+7:351*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[351] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[351] == 0) && (address0 == address1))
            dout1[351*8+7:351*8] <= #DLY din0[351*8+7:351*8];
	  else if (ce1 == 1)
            dout1[351*8+7:351*8] <= #DLY mem[address1][351*8+7:351*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[352] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[352] == 1) && (address0 == address1))
	      dout0[352*8+7:352*8] <= #DLY din1[352*8+7:352*8];
	  else if (ce0 == 1)
	      dout0[352*8+7:352*8] <= #DLY mem[address0][352*8+7:352*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[352] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[352] == 0) && (address0 == address1))
            dout1[352*8+7:352*8] <= #DLY din0[352*8+7:352*8];
	  else if (ce1 == 1)
            dout1[352*8+7:352*8] <= #DLY mem[address1][352*8+7:352*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[353] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[353] == 1) && (address0 == address1))
	      dout0[353*8+7:353*8] <= #DLY din1[353*8+7:353*8];
	  else if (ce0 == 1)
	      dout0[353*8+7:353*8] <= #DLY mem[address0][353*8+7:353*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[353] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[353] == 0) && (address0 == address1))
            dout1[353*8+7:353*8] <= #DLY din0[353*8+7:353*8];
	  else if (ce1 == 1)
            dout1[353*8+7:353*8] <= #DLY mem[address1][353*8+7:353*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[354] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[354] == 1) && (address0 == address1))
	      dout0[354*8+7:354*8] <= #DLY din1[354*8+7:354*8];
	  else if (ce0 == 1)
	      dout0[354*8+7:354*8] <= #DLY mem[address0][354*8+7:354*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[354] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[354] == 0) && (address0 == address1))
            dout1[354*8+7:354*8] <= #DLY din0[354*8+7:354*8];
	  else if (ce1 == 1)
            dout1[354*8+7:354*8] <= #DLY mem[address1][354*8+7:354*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[355] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[355] == 1) && (address0 == address1))
	      dout0[355*8+7:355*8] <= #DLY din1[355*8+7:355*8];
	  else if (ce0 == 1)
	      dout0[355*8+7:355*8] <= #DLY mem[address0][355*8+7:355*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[355] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[355] == 0) && (address0 == address1))
            dout1[355*8+7:355*8] <= #DLY din0[355*8+7:355*8];
	  else if (ce1 == 1)
            dout1[355*8+7:355*8] <= #DLY mem[address1][355*8+7:355*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[356] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[356] == 1) && (address0 == address1))
	      dout0[356*8+7:356*8] <= #DLY din1[356*8+7:356*8];
	  else if (ce0 == 1)
	      dout0[356*8+7:356*8] <= #DLY mem[address0][356*8+7:356*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[356] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[356] == 0) && (address0 == address1))
            dout1[356*8+7:356*8] <= #DLY din0[356*8+7:356*8];
	  else if (ce1 == 1)
            dout1[356*8+7:356*8] <= #DLY mem[address1][356*8+7:356*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[357] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[357] == 1) && (address0 == address1))
	      dout0[357*8+7:357*8] <= #DLY din1[357*8+7:357*8];
	  else if (ce0 == 1)
	      dout0[357*8+7:357*8] <= #DLY mem[address0][357*8+7:357*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[357] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[357] == 0) && (address0 == address1))
            dout1[357*8+7:357*8] <= #DLY din0[357*8+7:357*8];
	  else if (ce1 == 1)
            dout1[357*8+7:357*8] <= #DLY mem[address1][357*8+7:357*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[358] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[358] == 1) && (address0 == address1))
	      dout0[358*8+7:358*8] <= #DLY din1[358*8+7:358*8];
	  else if (ce0 == 1)
	      dout0[358*8+7:358*8] <= #DLY mem[address0][358*8+7:358*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[358] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[358] == 0) && (address0 == address1))
            dout1[358*8+7:358*8] <= #DLY din0[358*8+7:358*8];
	  else if (ce1 == 1)
            dout1[358*8+7:358*8] <= #DLY mem[address1][358*8+7:358*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[359] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[359] == 1) && (address0 == address1))
	      dout0[359*8+7:359*8] <= #DLY din1[359*8+7:359*8];
	  else if (ce0 == 1)
	      dout0[359*8+7:359*8] <= #DLY mem[address0][359*8+7:359*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[359] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[359] == 0) && (address0 == address1))
            dout1[359*8+7:359*8] <= #DLY din0[359*8+7:359*8];
	  else if (ce1 == 1)
            dout1[359*8+7:359*8] <= #DLY mem[address1][359*8+7:359*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[360] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[360] == 1) && (address0 == address1))
	      dout0[360*8+7:360*8] <= #DLY din1[360*8+7:360*8];
	  else if (ce0 == 1)
	      dout0[360*8+7:360*8] <= #DLY mem[address0][360*8+7:360*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[360] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[360] == 0) && (address0 == address1))
            dout1[360*8+7:360*8] <= #DLY din0[360*8+7:360*8];
	  else if (ce1 == 1)
            dout1[360*8+7:360*8] <= #DLY mem[address1][360*8+7:360*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[361] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[361] == 1) && (address0 == address1))
	      dout0[361*8+7:361*8] <= #DLY din1[361*8+7:361*8];
	  else if (ce0 == 1)
	      dout0[361*8+7:361*8] <= #DLY mem[address0][361*8+7:361*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[361] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[361] == 0) && (address0 == address1))
            dout1[361*8+7:361*8] <= #DLY din0[361*8+7:361*8];
	  else if (ce1 == 1)
            dout1[361*8+7:361*8] <= #DLY mem[address1][361*8+7:361*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[362] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[362] == 1) && (address0 == address1))
	      dout0[362*8+7:362*8] <= #DLY din1[362*8+7:362*8];
	  else if (ce0 == 1)
	      dout0[362*8+7:362*8] <= #DLY mem[address0][362*8+7:362*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[362] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[362] == 0) && (address0 == address1))
            dout1[362*8+7:362*8] <= #DLY din0[362*8+7:362*8];
	  else if (ce1 == 1)
            dout1[362*8+7:362*8] <= #DLY mem[address1][362*8+7:362*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[363] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[363] == 1) && (address0 == address1))
	      dout0[363*8+7:363*8] <= #DLY din1[363*8+7:363*8];
	  else if (ce0 == 1)
	      dout0[363*8+7:363*8] <= #DLY mem[address0][363*8+7:363*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[363] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[363] == 0) && (address0 == address1))
            dout1[363*8+7:363*8] <= #DLY din0[363*8+7:363*8];
	  else if (ce1 == 1)
            dout1[363*8+7:363*8] <= #DLY mem[address1][363*8+7:363*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[364] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[364] == 1) && (address0 == address1))
	      dout0[364*8+7:364*8] <= #DLY din1[364*8+7:364*8];
	  else if (ce0 == 1)
	      dout0[364*8+7:364*8] <= #DLY mem[address0][364*8+7:364*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[364] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[364] == 0) && (address0 == address1))
            dout1[364*8+7:364*8] <= #DLY din0[364*8+7:364*8];
	  else if (ce1 == 1)
            dout1[364*8+7:364*8] <= #DLY mem[address1][364*8+7:364*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[365] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[365] == 1) && (address0 == address1))
	      dout0[365*8+7:365*8] <= #DLY din1[365*8+7:365*8];
	  else if (ce0 == 1)
	      dout0[365*8+7:365*8] <= #DLY mem[address0][365*8+7:365*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[365] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[365] == 0) && (address0 == address1))
            dout1[365*8+7:365*8] <= #DLY din0[365*8+7:365*8];
	  else if (ce1 == 1)
            dout1[365*8+7:365*8] <= #DLY mem[address1][365*8+7:365*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[366] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[366] == 1) && (address0 == address1))
	      dout0[366*8+7:366*8] <= #DLY din1[366*8+7:366*8];
	  else if (ce0 == 1)
	      dout0[366*8+7:366*8] <= #DLY mem[address0][366*8+7:366*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[366] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[366] == 0) && (address0 == address1))
            dout1[366*8+7:366*8] <= #DLY din0[366*8+7:366*8];
	  else if (ce1 == 1)
            dout1[366*8+7:366*8] <= #DLY mem[address1][366*8+7:366*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[367] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[367] == 1) && (address0 == address1))
	      dout0[367*8+7:367*8] <= #DLY din1[367*8+7:367*8];
	  else if (ce0 == 1)
	      dout0[367*8+7:367*8] <= #DLY mem[address0][367*8+7:367*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[367] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[367] == 0) && (address0 == address1))
            dout1[367*8+7:367*8] <= #DLY din0[367*8+7:367*8];
	  else if (ce1 == 1)
            dout1[367*8+7:367*8] <= #DLY mem[address1][367*8+7:367*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[368] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[368] == 1) && (address0 == address1))
	      dout0[368*8+7:368*8] <= #DLY din1[368*8+7:368*8];
	  else if (ce0 == 1)
	      dout0[368*8+7:368*8] <= #DLY mem[address0][368*8+7:368*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[368] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[368] == 0) && (address0 == address1))
            dout1[368*8+7:368*8] <= #DLY din0[368*8+7:368*8];
	  else if (ce1 == 1)
            dout1[368*8+7:368*8] <= #DLY mem[address1][368*8+7:368*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[369] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[369] == 1) && (address0 == address1))
	      dout0[369*8+7:369*8] <= #DLY din1[369*8+7:369*8];
	  else if (ce0 == 1)
	      dout0[369*8+7:369*8] <= #DLY mem[address0][369*8+7:369*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[369] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[369] == 0) && (address0 == address1))
            dout1[369*8+7:369*8] <= #DLY din0[369*8+7:369*8];
	  else if (ce1 == 1)
            dout1[369*8+7:369*8] <= #DLY mem[address1][369*8+7:369*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[370] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[370] == 1) && (address0 == address1))
	      dout0[370*8+7:370*8] <= #DLY din1[370*8+7:370*8];
	  else if (ce0 == 1)
	      dout0[370*8+7:370*8] <= #DLY mem[address0][370*8+7:370*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[370] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[370] == 0) && (address0 == address1))
            dout1[370*8+7:370*8] <= #DLY din0[370*8+7:370*8];
	  else if (ce1 == 1)
            dout1[370*8+7:370*8] <= #DLY mem[address1][370*8+7:370*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[371] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[371] == 1) && (address0 == address1))
	      dout0[371*8+7:371*8] <= #DLY din1[371*8+7:371*8];
	  else if (ce0 == 1)
	      dout0[371*8+7:371*8] <= #DLY mem[address0][371*8+7:371*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[371] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[371] == 0) && (address0 == address1))
            dout1[371*8+7:371*8] <= #DLY din0[371*8+7:371*8];
	  else if (ce1 == 1)
            dout1[371*8+7:371*8] <= #DLY mem[address1][371*8+7:371*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[372] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[372] == 1) && (address0 == address1))
	      dout0[372*8+7:372*8] <= #DLY din1[372*8+7:372*8];
	  else if (ce0 == 1)
	      dout0[372*8+7:372*8] <= #DLY mem[address0][372*8+7:372*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[372] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[372] == 0) && (address0 == address1))
            dout1[372*8+7:372*8] <= #DLY din0[372*8+7:372*8];
	  else if (ce1 == 1)
            dout1[372*8+7:372*8] <= #DLY mem[address1][372*8+7:372*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[373] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[373] == 1) && (address0 == address1))
	      dout0[373*8+7:373*8] <= #DLY din1[373*8+7:373*8];
	  else if (ce0 == 1)
	      dout0[373*8+7:373*8] <= #DLY mem[address0][373*8+7:373*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[373] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[373] == 0) && (address0 == address1))
            dout1[373*8+7:373*8] <= #DLY din0[373*8+7:373*8];
	  else if (ce1 == 1)
            dout1[373*8+7:373*8] <= #DLY mem[address1][373*8+7:373*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[374] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[374] == 1) && (address0 == address1))
	      dout0[374*8+7:374*8] <= #DLY din1[374*8+7:374*8];
	  else if (ce0 == 1)
	      dout0[374*8+7:374*8] <= #DLY mem[address0][374*8+7:374*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[374] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[374] == 0) && (address0 == address1))
            dout1[374*8+7:374*8] <= #DLY din0[374*8+7:374*8];
	  else if (ce1 == 1)
            dout1[374*8+7:374*8] <= #DLY mem[address1][374*8+7:374*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[375] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[375] == 1) && (address0 == address1))
	      dout0[375*8+7:375*8] <= #DLY din1[375*8+7:375*8];
	  else if (ce0 == 1)
	      dout0[375*8+7:375*8] <= #DLY mem[address0][375*8+7:375*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[375] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[375] == 0) && (address0 == address1))
            dout1[375*8+7:375*8] <= #DLY din0[375*8+7:375*8];
	  else if (ce1 == 1)
            dout1[375*8+7:375*8] <= #DLY mem[address1][375*8+7:375*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[376] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[376] == 1) && (address0 == address1))
	      dout0[376*8+7:376*8] <= #DLY din1[376*8+7:376*8];
	  else if (ce0 == 1)
	      dout0[376*8+7:376*8] <= #DLY mem[address0][376*8+7:376*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[376] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[376] == 0) && (address0 == address1))
            dout1[376*8+7:376*8] <= #DLY din0[376*8+7:376*8];
	  else if (ce1 == 1)
            dout1[376*8+7:376*8] <= #DLY mem[address1][376*8+7:376*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[377] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[377] == 1) && (address0 == address1))
	      dout0[377*8+7:377*8] <= #DLY din1[377*8+7:377*8];
	  else if (ce0 == 1)
	      dout0[377*8+7:377*8] <= #DLY mem[address0][377*8+7:377*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[377] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[377] == 0) && (address0 == address1))
            dout1[377*8+7:377*8] <= #DLY din0[377*8+7:377*8];
	  else if (ce1 == 1)
            dout1[377*8+7:377*8] <= #DLY mem[address1][377*8+7:377*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[378] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[378] == 1) && (address0 == address1))
	      dout0[378*8+7:378*8] <= #DLY din1[378*8+7:378*8];
	  else if (ce0 == 1)
	      dout0[378*8+7:378*8] <= #DLY mem[address0][378*8+7:378*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[378] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[378] == 0) && (address0 == address1))
            dout1[378*8+7:378*8] <= #DLY din0[378*8+7:378*8];
	  else if (ce1 == 1)
            dout1[378*8+7:378*8] <= #DLY mem[address1][378*8+7:378*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[379] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[379] == 1) && (address0 == address1))
	      dout0[379*8+7:379*8] <= #DLY din1[379*8+7:379*8];
	  else if (ce0 == 1)
	      dout0[379*8+7:379*8] <= #DLY mem[address0][379*8+7:379*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[379] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[379] == 0) && (address0 == address1))
            dout1[379*8+7:379*8] <= #DLY din0[379*8+7:379*8];
	  else if (ce1 == 1)
            dout1[379*8+7:379*8] <= #DLY mem[address1][379*8+7:379*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[380] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[380] == 1) && (address0 == address1))
	      dout0[380*8+7:380*8] <= #DLY din1[380*8+7:380*8];
	  else if (ce0 == 1)
	      dout0[380*8+7:380*8] <= #DLY mem[address0][380*8+7:380*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[380] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[380] == 0) && (address0 == address1))
            dout1[380*8+7:380*8] <= #DLY din0[380*8+7:380*8];
	  else if (ce1 == 1)
            dout1[380*8+7:380*8] <= #DLY mem[address1][380*8+7:380*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[381] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[381] == 1) && (address0 == address1))
	      dout0[381*8+7:381*8] <= #DLY din1[381*8+7:381*8];
	  else if (ce0 == 1)
	      dout0[381*8+7:381*8] <= #DLY mem[address0][381*8+7:381*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[381] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[381] == 0) && (address0 == address1))
            dout1[381*8+7:381*8] <= #DLY din0[381*8+7:381*8];
	  else if (ce1 == 1)
            dout1[381*8+7:381*8] <= #DLY mem[address1][381*8+7:381*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[382] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[382] == 1) && (address0 == address1))
	      dout0[382*8+7:382*8] <= #DLY din1[382*8+7:382*8];
	  else if (ce0 == 1)
	      dout0[382*8+7:382*8] <= #DLY mem[address0][382*8+7:382*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[382] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[382] == 0) && (address0 == address1))
            dout1[382*8+7:382*8] <= #DLY din0[382*8+7:382*8];
	  else if (ce1 == 1)
            dout1[382*8+7:382*8] <= #DLY mem[address1][382*8+7:382*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[383] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[383] == 1) && (address0 == address1))
	      dout0[383*8+7:383*8] <= #DLY din1[383*8+7:383*8];
	  else if (ce0 == 1)
	      dout0[383*8+7:383*8] <= #DLY mem[address0][383*8+7:383*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[383] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[383] == 0) && (address0 == address1))
            dout1[383*8+7:383*8] <= #DLY din0[383*8+7:383*8];
	  else if (ce1 == 1)
            dout1[383*8+7:383*8] <= #DLY mem[address1][383*8+7:383*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[384] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[384] == 1) && (address0 == address1))
	      dout0[384*8+7:384*8] <= #DLY din1[384*8+7:384*8];
	  else if (ce0 == 1)
	      dout0[384*8+7:384*8] <= #DLY mem[address0][384*8+7:384*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[384] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[384] == 0) && (address0 == address1))
            dout1[384*8+7:384*8] <= #DLY din0[384*8+7:384*8];
	  else if (ce1 == 1)
            dout1[384*8+7:384*8] <= #DLY mem[address1][384*8+7:384*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[385] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[385] == 1) && (address0 == address1))
	      dout0[385*8+7:385*8] <= #DLY din1[385*8+7:385*8];
	  else if (ce0 == 1)
	      dout0[385*8+7:385*8] <= #DLY mem[address0][385*8+7:385*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[385] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[385] == 0) && (address0 == address1))
            dout1[385*8+7:385*8] <= #DLY din0[385*8+7:385*8];
	  else if (ce1 == 1)
            dout1[385*8+7:385*8] <= #DLY mem[address1][385*8+7:385*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[386] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[386] == 1) && (address0 == address1))
	      dout0[386*8+7:386*8] <= #DLY din1[386*8+7:386*8];
	  else if (ce0 == 1)
	      dout0[386*8+7:386*8] <= #DLY mem[address0][386*8+7:386*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[386] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[386] == 0) && (address0 == address1))
            dout1[386*8+7:386*8] <= #DLY din0[386*8+7:386*8];
	  else if (ce1 == 1)
            dout1[386*8+7:386*8] <= #DLY mem[address1][386*8+7:386*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[387] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[387] == 1) && (address0 == address1))
	      dout0[387*8+7:387*8] <= #DLY din1[387*8+7:387*8];
	  else if (ce0 == 1)
	      dout0[387*8+7:387*8] <= #DLY mem[address0][387*8+7:387*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[387] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[387] == 0) && (address0 == address1))
            dout1[387*8+7:387*8] <= #DLY din0[387*8+7:387*8];
	  else if (ce1 == 1)
            dout1[387*8+7:387*8] <= #DLY mem[address1][387*8+7:387*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[388] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[388] == 1) && (address0 == address1))
	      dout0[388*8+7:388*8] <= #DLY din1[388*8+7:388*8];
	  else if (ce0 == 1)
	      dout0[388*8+7:388*8] <= #DLY mem[address0][388*8+7:388*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[388] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[388] == 0) && (address0 == address1))
            dout1[388*8+7:388*8] <= #DLY din0[388*8+7:388*8];
	  else if (ce1 == 1)
            dout1[388*8+7:388*8] <= #DLY mem[address1][388*8+7:388*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[389] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[389] == 1) && (address0 == address1))
	      dout0[389*8+7:389*8] <= #DLY din1[389*8+7:389*8];
	  else if (ce0 == 1)
	      dout0[389*8+7:389*8] <= #DLY mem[address0][389*8+7:389*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[389] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[389] == 0) && (address0 == address1))
            dout1[389*8+7:389*8] <= #DLY din0[389*8+7:389*8];
	  else if (ce1 == 1)
            dout1[389*8+7:389*8] <= #DLY mem[address1][389*8+7:389*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[390] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[390] == 1) && (address0 == address1))
	      dout0[390*8+7:390*8] <= #DLY din1[390*8+7:390*8];
	  else if (ce0 == 1)
	      dout0[390*8+7:390*8] <= #DLY mem[address0][390*8+7:390*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[390] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[390] == 0) && (address0 == address1))
            dout1[390*8+7:390*8] <= #DLY din0[390*8+7:390*8];
	  else if (ce1 == 1)
            dout1[390*8+7:390*8] <= #DLY mem[address1][390*8+7:390*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[391] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[391] == 1) && (address0 == address1))
	      dout0[391*8+7:391*8] <= #DLY din1[391*8+7:391*8];
	  else if (ce0 == 1)
	      dout0[391*8+7:391*8] <= #DLY mem[address0][391*8+7:391*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[391] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[391] == 0) && (address0 == address1))
            dout1[391*8+7:391*8] <= #DLY din0[391*8+7:391*8];
	  else if (ce1 == 1)
            dout1[391*8+7:391*8] <= #DLY mem[address1][391*8+7:391*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[392] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[392] == 1) && (address0 == address1))
	      dout0[392*8+7:392*8] <= #DLY din1[392*8+7:392*8];
	  else if (ce0 == 1)
	      dout0[392*8+7:392*8] <= #DLY mem[address0][392*8+7:392*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[392] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[392] == 0) && (address0 == address1))
            dout1[392*8+7:392*8] <= #DLY din0[392*8+7:392*8];
	  else if (ce1 == 1)
            dout1[392*8+7:392*8] <= #DLY mem[address1][392*8+7:392*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[393] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[393] == 1) && (address0 == address1))
	      dout0[393*8+7:393*8] <= #DLY din1[393*8+7:393*8];
	  else if (ce0 == 1)
	      dout0[393*8+7:393*8] <= #DLY mem[address0][393*8+7:393*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[393] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[393] == 0) && (address0 == address1))
            dout1[393*8+7:393*8] <= #DLY din0[393*8+7:393*8];
	  else if (ce1 == 1)
            dout1[393*8+7:393*8] <= #DLY mem[address1][393*8+7:393*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[394] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[394] == 1) && (address0 == address1))
	      dout0[394*8+7:394*8] <= #DLY din1[394*8+7:394*8];
	  else if (ce0 == 1)
	      dout0[394*8+7:394*8] <= #DLY mem[address0][394*8+7:394*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[394] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[394] == 0) && (address0 == address1))
            dout1[394*8+7:394*8] <= #DLY din0[394*8+7:394*8];
	  else if (ce1 == 1)
            dout1[394*8+7:394*8] <= #DLY mem[address1][394*8+7:394*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[395] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[395] == 1) && (address0 == address1))
	      dout0[395*8+7:395*8] <= #DLY din1[395*8+7:395*8];
	  else if (ce0 == 1)
	      dout0[395*8+7:395*8] <= #DLY mem[address0][395*8+7:395*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[395] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[395] == 0) && (address0 == address1))
            dout1[395*8+7:395*8] <= #DLY din0[395*8+7:395*8];
	  else if (ce1 == 1)
            dout1[395*8+7:395*8] <= #DLY mem[address1][395*8+7:395*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[396] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[396] == 1) && (address0 == address1))
	      dout0[396*8+7:396*8] <= #DLY din1[396*8+7:396*8];
	  else if (ce0 == 1)
	      dout0[396*8+7:396*8] <= #DLY mem[address0][396*8+7:396*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[396] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[396] == 0) && (address0 == address1))
            dout1[396*8+7:396*8] <= #DLY din0[396*8+7:396*8];
	  else if (ce1 == 1)
            dout1[396*8+7:396*8] <= #DLY mem[address1][396*8+7:396*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[397] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[397] == 1) && (address0 == address1))
	      dout0[397*8+7:397*8] <= #DLY din1[397*8+7:397*8];
	  else if (ce0 == 1)
	      dout0[397*8+7:397*8] <= #DLY mem[address0][397*8+7:397*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[397] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[397] == 0) && (address0 == address1))
            dout1[397*8+7:397*8] <= #DLY din0[397*8+7:397*8];
	  else if (ce1 == 1)
            dout1[397*8+7:397*8] <= #DLY mem[address1][397*8+7:397*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[398] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[398] == 1) && (address0 == address1))
	      dout0[398*8+7:398*8] <= #DLY din1[398*8+7:398*8];
	  else if (ce0 == 1)
	      dout0[398*8+7:398*8] <= #DLY mem[address0][398*8+7:398*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[398] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[398] == 0) && (address0 == address1))
            dout1[398*8+7:398*8] <= #DLY din0[398*8+7:398*8];
	  else if (ce1 == 1)
            dout1[398*8+7:398*8] <= #DLY mem[address1][398*8+7:398*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[399] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[399] == 1) && (address0 == address1))
	      dout0[399*8+7:399*8] <= #DLY din1[399*8+7:399*8];
	  else if (ce0 == 1)
	      dout0[399*8+7:399*8] <= #DLY mem[address0][399*8+7:399*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[399] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[399] == 0) && (address0 == address1))
            dout1[399*8+7:399*8] <= #DLY din0[399*8+7:399*8];
	  else if (ce1 == 1)
            dout1[399*8+7:399*8] <= #DLY mem[address1][399*8+7:399*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[400] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[400] == 1) && (address0 == address1))
	      dout0[400*8+7:400*8] <= #DLY din1[400*8+7:400*8];
	  else if (ce0 == 1)
	      dout0[400*8+7:400*8] <= #DLY mem[address0][400*8+7:400*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[400] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[400] == 0) && (address0 == address1))
            dout1[400*8+7:400*8] <= #DLY din0[400*8+7:400*8];
	  else if (ce1 == 1)
            dout1[400*8+7:400*8] <= #DLY mem[address1][400*8+7:400*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[401] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[401] == 1) && (address0 == address1))
	      dout0[401*8+7:401*8] <= #DLY din1[401*8+7:401*8];
	  else if (ce0 == 1)
	      dout0[401*8+7:401*8] <= #DLY mem[address0][401*8+7:401*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[401] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[401] == 0) && (address0 == address1))
            dout1[401*8+7:401*8] <= #DLY din0[401*8+7:401*8];
	  else if (ce1 == 1)
            dout1[401*8+7:401*8] <= #DLY mem[address1][401*8+7:401*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[402] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[402] == 1) && (address0 == address1))
	      dout0[402*8+7:402*8] <= #DLY din1[402*8+7:402*8];
	  else if (ce0 == 1)
	      dout0[402*8+7:402*8] <= #DLY mem[address0][402*8+7:402*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[402] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[402] == 0) && (address0 == address1))
            dout1[402*8+7:402*8] <= #DLY din0[402*8+7:402*8];
	  else if (ce1 == 1)
            dout1[402*8+7:402*8] <= #DLY mem[address1][402*8+7:402*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[403] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[403] == 1) && (address0 == address1))
	      dout0[403*8+7:403*8] <= #DLY din1[403*8+7:403*8];
	  else if (ce0 == 1)
	      dout0[403*8+7:403*8] <= #DLY mem[address0][403*8+7:403*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[403] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[403] == 0) && (address0 == address1))
            dout1[403*8+7:403*8] <= #DLY din0[403*8+7:403*8];
	  else if (ce1 == 1)
            dout1[403*8+7:403*8] <= #DLY mem[address1][403*8+7:403*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[404] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[404] == 1) && (address0 == address1))
	      dout0[404*8+7:404*8] <= #DLY din1[404*8+7:404*8];
	  else if (ce0 == 1)
	      dout0[404*8+7:404*8] <= #DLY mem[address0][404*8+7:404*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[404] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[404] == 0) && (address0 == address1))
            dout1[404*8+7:404*8] <= #DLY din0[404*8+7:404*8];
	  else if (ce1 == 1)
            dout1[404*8+7:404*8] <= #DLY mem[address1][404*8+7:404*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[405] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[405] == 1) && (address0 == address1))
	      dout0[405*8+7:405*8] <= #DLY din1[405*8+7:405*8];
	  else if (ce0 == 1)
	      dout0[405*8+7:405*8] <= #DLY mem[address0][405*8+7:405*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[405] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[405] == 0) && (address0 == address1))
            dout1[405*8+7:405*8] <= #DLY din0[405*8+7:405*8];
	  else if (ce1 == 1)
            dout1[405*8+7:405*8] <= #DLY mem[address1][405*8+7:405*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[406] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[406] == 1) && (address0 == address1))
	      dout0[406*8+7:406*8] <= #DLY din1[406*8+7:406*8];
	  else if (ce0 == 1)
	      dout0[406*8+7:406*8] <= #DLY mem[address0][406*8+7:406*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[406] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[406] == 0) && (address0 == address1))
            dout1[406*8+7:406*8] <= #DLY din0[406*8+7:406*8];
	  else if (ce1 == 1)
            dout1[406*8+7:406*8] <= #DLY mem[address1][406*8+7:406*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[407] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[407] == 1) && (address0 == address1))
	      dout0[407*8+7:407*8] <= #DLY din1[407*8+7:407*8];
	  else if (ce0 == 1)
	      dout0[407*8+7:407*8] <= #DLY mem[address0][407*8+7:407*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[407] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[407] == 0) && (address0 == address1))
            dout1[407*8+7:407*8] <= #DLY din0[407*8+7:407*8];
	  else if (ce1 == 1)
            dout1[407*8+7:407*8] <= #DLY mem[address1][407*8+7:407*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[408] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[408] == 1) && (address0 == address1))
	      dout0[408*8+7:408*8] <= #DLY din1[408*8+7:408*8];
	  else if (ce0 == 1)
	      dout0[408*8+7:408*8] <= #DLY mem[address0][408*8+7:408*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[408] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[408] == 0) && (address0 == address1))
            dout1[408*8+7:408*8] <= #DLY din0[408*8+7:408*8];
	  else if (ce1 == 1)
            dout1[408*8+7:408*8] <= #DLY mem[address1][408*8+7:408*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[409] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[409] == 1) && (address0 == address1))
	      dout0[409*8+7:409*8] <= #DLY din1[409*8+7:409*8];
	  else if (ce0 == 1)
	      dout0[409*8+7:409*8] <= #DLY mem[address0][409*8+7:409*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[409] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[409] == 0) && (address0 == address1))
            dout1[409*8+7:409*8] <= #DLY din0[409*8+7:409*8];
	  else if (ce1 == 1)
            dout1[409*8+7:409*8] <= #DLY mem[address1][409*8+7:409*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[410] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[410] == 1) && (address0 == address1))
	      dout0[410*8+7:410*8] <= #DLY din1[410*8+7:410*8];
	  else if (ce0 == 1)
	      dout0[410*8+7:410*8] <= #DLY mem[address0][410*8+7:410*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[410] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[410] == 0) && (address0 == address1))
            dout1[410*8+7:410*8] <= #DLY din0[410*8+7:410*8];
	  else if (ce1 == 1)
            dout1[410*8+7:410*8] <= #DLY mem[address1][410*8+7:410*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[411] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[411] == 1) && (address0 == address1))
	      dout0[411*8+7:411*8] <= #DLY din1[411*8+7:411*8];
	  else if (ce0 == 1)
	      dout0[411*8+7:411*8] <= #DLY mem[address0][411*8+7:411*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[411] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[411] == 0) && (address0 == address1))
            dout1[411*8+7:411*8] <= #DLY din0[411*8+7:411*8];
	  else if (ce1 == 1)
            dout1[411*8+7:411*8] <= #DLY mem[address1][411*8+7:411*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[412] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[412] == 1) && (address0 == address1))
	      dout0[412*8+7:412*8] <= #DLY din1[412*8+7:412*8];
	  else if (ce0 == 1)
	      dout0[412*8+7:412*8] <= #DLY mem[address0][412*8+7:412*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[412] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[412] == 0) && (address0 == address1))
            dout1[412*8+7:412*8] <= #DLY din0[412*8+7:412*8];
	  else if (ce1 == 1)
            dout1[412*8+7:412*8] <= #DLY mem[address1][412*8+7:412*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[413] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[413] == 1) && (address0 == address1))
	      dout0[413*8+7:413*8] <= #DLY din1[413*8+7:413*8];
	  else if (ce0 == 1)
	      dout0[413*8+7:413*8] <= #DLY mem[address0][413*8+7:413*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[413] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[413] == 0) && (address0 == address1))
            dout1[413*8+7:413*8] <= #DLY din0[413*8+7:413*8];
	  else if (ce1 == 1)
            dout1[413*8+7:413*8] <= #DLY mem[address1][413*8+7:413*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[414] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[414] == 1) && (address0 == address1))
	      dout0[414*8+7:414*8] <= #DLY din1[414*8+7:414*8];
	  else if (ce0 == 1)
	      dout0[414*8+7:414*8] <= #DLY mem[address0][414*8+7:414*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[414] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[414] == 0) && (address0 == address1))
            dout1[414*8+7:414*8] <= #DLY din0[414*8+7:414*8];
	  else if (ce1 == 1)
            dout1[414*8+7:414*8] <= #DLY mem[address1][414*8+7:414*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[415] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[415] == 1) && (address0 == address1))
	      dout0[415*8+7:415*8] <= #DLY din1[415*8+7:415*8];
	  else if (ce0 == 1)
	      dout0[415*8+7:415*8] <= #DLY mem[address0][415*8+7:415*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[415] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[415] == 0) && (address0 == address1))
            dout1[415*8+7:415*8] <= #DLY din0[415*8+7:415*8];
	  else if (ce1 == 1)
            dout1[415*8+7:415*8] <= #DLY mem[address1][415*8+7:415*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[416] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[416] == 1) && (address0 == address1))
	      dout0[416*8+7:416*8] <= #DLY din1[416*8+7:416*8];
	  else if (ce0 == 1)
	      dout0[416*8+7:416*8] <= #DLY mem[address0][416*8+7:416*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[416] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[416] == 0) && (address0 == address1))
            dout1[416*8+7:416*8] <= #DLY din0[416*8+7:416*8];
	  else if (ce1 == 1)
            dout1[416*8+7:416*8] <= #DLY mem[address1][416*8+7:416*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[417] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[417] == 1) && (address0 == address1))
	      dout0[417*8+7:417*8] <= #DLY din1[417*8+7:417*8];
	  else if (ce0 == 1)
	      dout0[417*8+7:417*8] <= #DLY mem[address0][417*8+7:417*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[417] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[417] == 0) && (address0 == address1))
            dout1[417*8+7:417*8] <= #DLY din0[417*8+7:417*8];
	  else if (ce1 == 1)
            dout1[417*8+7:417*8] <= #DLY mem[address1][417*8+7:417*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[418] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[418] == 1) && (address0 == address1))
	      dout0[418*8+7:418*8] <= #DLY din1[418*8+7:418*8];
	  else if (ce0 == 1)
	      dout0[418*8+7:418*8] <= #DLY mem[address0][418*8+7:418*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[418] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[418] == 0) && (address0 == address1))
            dout1[418*8+7:418*8] <= #DLY din0[418*8+7:418*8];
	  else if (ce1 == 1)
            dout1[418*8+7:418*8] <= #DLY mem[address1][418*8+7:418*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[419] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[419] == 1) && (address0 == address1))
	      dout0[419*8+7:419*8] <= #DLY din1[419*8+7:419*8];
	  else if (ce0 == 1)
	      dout0[419*8+7:419*8] <= #DLY mem[address0][419*8+7:419*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[419] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[419] == 0) && (address0 == address1))
            dout1[419*8+7:419*8] <= #DLY din0[419*8+7:419*8];
	  else if (ce1 == 1)
            dout1[419*8+7:419*8] <= #DLY mem[address1][419*8+7:419*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[420] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[420] == 1) && (address0 == address1))
	      dout0[420*8+7:420*8] <= #DLY din1[420*8+7:420*8];
	  else if (ce0 == 1)
	      dout0[420*8+7:420*8] <= #DLY mem[address0][420*8+7:420*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[420] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[420] == 0) && (address0 == address1))
            dout1[420*8+7:420*8] <= #DLY din0[420*8+7:420*8];
	  else if (ce1 == 1)
            dout1[420*8+7:420*8] <= #DLY mem[address1][420*8+7:420*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[421] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[421] == 1) && (address0 == address1))
	      dout0[421*8+7:421*8] <= #DLY din1[421*8+7:421*8];
	  else if (ce0 == 1)
	      dout0[421*8+7:421*8] <= #DLY mem[address0][421*8+7:421*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[421] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[421] == 0) && (address0 == address1))
            dout1[421*8+7:421*8] <= #DLY din0[421*8+7:421*8];
	  else if (ce1 == 1)
            dout1[421*8+7:421*8] <= #DLY mem[address1][421*8+7:421*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[422] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[422] == 1) && (address0 == address1))
	      dout0[422*8+7:422*8] <= #DLY din1[422*8+7:422*8];
	  else if (ce0 == 1)
	      dout0[422*8+7:422*8] <= #DLY mem[address0][422*8+7:422*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[422] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[422] == 0) && (address0 == address1))
            dout1[422*8+7:422*8] <= #DLY din0[422*8+7:422*8];
	  else if (ce1 == 1)
            dout1[422*8+7:422*8] <= #DLY mem[address1][422*8+7:422*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[423] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[423] == 1) && (address0 == address1))
	      dout0[423*8+7:423*8] <= #DLY din1[423*8+7:423*8];
	  else if (ce0 == 1)
	      dout0[423*8+7:423*8] <= #DLY mem[address0][423*8+7:423*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[423] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[423] == 0) && (address0 == address1))
            dout1[423*8+7:423*8] <= #DLY din0[423*8+7:423*8];
	  else if (ce1 == 1)
            dout1[423*8+7:423*8] <= #DLY mem[address1][423*8+7:423*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[424] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[424] == 1) && (address0 == address1))
	      dout0[424*8+7:424*8] <= #DLY din1[424*8+7:424*8];
	  else if (ce0 == 1)
	      dout0[424*8+7:424*8] <= #DLY mem[address0][424*8+7:424*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[424] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[424] == 0) && (address0 == address1))
            dout1[424*8+7:424*8] <= #DLY din0[424*8+7:424*8];
	  else if (ce1 == 1)
            dout1[424*8+7:424*8] <= #DLY mem[address1][424*8+7:424*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[425] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[425] == 1) && (address0 == address1))
	      dout0[425*8+7:425*8] <= #DLY din1[425*8+7:425*8];
	  else if (ce0 == 1)
	      dout0[425*8+7:425*8] <= #DLY mem[address0][425*8+7:425*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[425] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[425] == 0) && (address0 == address1))
            dout1[425*8+7:425*8] <= #DLY din0[425*8+7:425*8];
	  else if (ce1 == 1)
            dout1[425*8+7:425*8] <= #DLY mem[address1][425*8+7:425*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[426] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[426] == 1) && (address0 == address1))
	      dout0[426*8+7:426*8] <= #DLY din1[426*8+7:426*8];
	  else if (ce0 == 1)
	      dout0[426*8+7:426*8] <= #DLY mem[address0][426*8+7:426*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[426] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[426] == 0) && (address0 == address1))
            dout1[426*8+7:426*8] <= #DLY din0[426*8+7:426*8];
	  else if (ce1 == 1)
            dout1[426*8+7:426*8] <= #DLY mem[address1][426*8+7:426*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[427] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[427] == 1) && (address0 == address1))
	      dout0[427*8+7:427*8] <= #DLY din1[427*8+7:427*8];
	  else if (ce0 == 1)
	      dout0[427*8+7:427*8] <= #DLY mem[address0][427*8+7:427*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[427] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[427] == 0) && (address0 == address1))
            dout1[427*8+7:427*8] <= #DLY din0[427*8+7:427*8];
	  else if (ce1 == 1)
            dout1[427*8+7:427*8] <= #DLY mem[address1][427*8+7:427*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[428] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[428] == 1) && (address0 == address1))
	      dout0[428*8+7:428*8] <= #DLY din1[428*8+7:428*8];
	  else if (ce0 == 1)
	      dout0[428*8+7:428*8] <= #DLY mem[address0][428*8+7:428*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[428] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[428] == 0) && (address0 == address1))
            dout1[428*8+7:428*8] <= #DLY din0[428*8+7:428*8];
	  else if (ce1 == 1)
            dout1[428*8+7:428*8] <= #DLY mem[address1][428*8+7:428*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[429] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[429] == 1) && (address0 == address1))
	      dout0[429*8+7:429*8] <= #DLY din1[429*8+7:429*8];
	  else if (ce0 == 1)
	      dout0[429*8+7:429*8] <= #DLY mem[address0][429*8+7:429*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[429] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[429] == 0) && (address0 == address1))
            dout1[429*8+7:429*8] <= #DLY din0[429*8+7:429*8];
	  else if (ce1 == 1)
            dout1[429*8+7:429*8] <= #DLY mem[address1][429*8+7:429*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[430] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[430] == 1) && (address0 == address1))
	      dout0[430*8+7:430*8] <= #DLY din1[430*8+7:430*8];
	  else if (ce0 == 1)
	      dout0[430*8+7:430*8] <= #DLY mem[address0][430*8+7:430*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[430] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[430] == 0) && (address0 == address1))
            dout1[430*8+7:430*8] <= #DLY din0[430*8+7:430*8];
	  else if (ce1 == 1)
            dout1[430*8+7:430*8] <= #DLY mem[address1][430*8+7:430*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[431] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[431] == 1) && (address0 == address1))
	      dout0[431*8+7:431*8] <= #DLY din1[431*8+7:431*8];
	  else if (ce0 == 1)
	      dout0[431*8+7:431*8] <= #DLY mem[address0][431*8+7:431*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[431] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[431] == 0) && (address0 == address1))
            dout1[431*8+7:431*8] <= #DLY din0[431*8+7:431*8];
	  else if (ce1 == 1)
            dout1[431*8+7:431*8] <= #DLY mem[address1][431*8+7:431*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[432] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[432] == 1) && (address0 == address1))
	      dout0[432*8+7:432*8] <= #DLY din1[432*8+7:432*8];
	  else if (ce0 == 1)
	      dout0[432*8+7:432*8] <= #DLY mem[address0][432*8+7:432*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[432] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[432] == 0) && (address0 == address1))
            dout1[432*8+7:432*8] <= #DLY din0[432*8+7:432*8];
	  else if (ce1 == 1)
            dout1[432*8+7:432*8] <= #DLY mem[address1][432*8+7:432*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[433] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[433] == 1) && (address0 == address1))
	      dout0[433*8+7:433*8] <= #DLY din1[433*8+7:433*8];
	  else if (ce0 == 1)
	      dout0[433*8+7:433*8] <= #DLY mem[address0][433*8+7:433*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[433] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[433] == 0) && (address0 == address1))
            dout1[433*8+7:433*8] <= #DLY din0[433*8+7:433*8];
	  else if (ce1 == 1)
            dout1[433*8+7:433*8] <= #DLY mem[address1][433*8+7:433*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[434] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[434] == 1) && (address0 == address1))
	      dout0[434*8+7:434*8] <= #DLY din1[434*8+7:434*8];
	  else if (ce0 == 1)
	      dout0[434*8+7:434*8] <= #DLY mem[address0][434*8+7:434*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[434] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[434] == 0) && (address0 == address1))
            dout1[434*8+7:434*8] <= #DLY din0[434*8+7:434*8];
	  else if (ce1 == 1)
            dout1[434*8+7:434*8] <= #DLY mem[address1][434*8+7:434*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[435] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[435] == 1) && (address0 == address1))
	      dout0[435*8+7:435*8] <= #DLY din1[435*8+7:435*8];
	  else if (ce0 == 1)
	      dout0[435*8+7:435*8] <= #DLY mem[address0][435*8+7:435*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[435] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[435] == 0) && (address0 == address1))
            dout1[435*8+7:435*8] <= #DLY din0[435*8+7:435*8];
	  else if (ce1 == 1)
            dout1[435*8+7:435*8] <= #DLY mem[address1][435*8+7:435*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[436] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[436] == 1) && (address0 == address1))
	      dout0[436*8+7:436*8] <= #DLY din1[436*8+7:436*8];
	  else if (ce0 == 1)
	      dout0[436*8+7:436*8] <= #DLY mem[address0][436*8+7:436*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[436] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[436] == 0) && (address0 == address1))
            dout1[436*8+7:436*8] <= #DLY din0[436*8+7:436*8];
	  else if (ce1 == 1)
            dout1[436*8+7:436*8] <= #DLY mem[address1][436*8+7:436*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[437] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[437] == 1) && (address0 == address1))
	      dout0[437*8+7:437*8] <= #DLY din1[437*8+7:437*8];
	  else if (ce0 == 1)
	      dout0[437*8+7:437*8] <= #DLY mem[address0][437*8+7:437*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[437] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[437] == 0) && (address0 == address1))
            dout1[437*8+7:437*8] <= #DLY din0[437*8+7:437*8];
	  else if (ce1 == 1)
            dout1[437*8+7:437*8] <= #DLY mem[address1][437*8+7:437*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[438] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[438] == 1) && (address0 == address1))
	      dout0[438*8+7:438*8] <= #DLY din1[438*8+7:438*8];
	  else if (ce0 == 1)
	      dout0[438*8+7:438*8] <= #DLY mem[address0][438*8+7:438*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[438] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[438] == 0) && (address0 == address1))
            dout1[438*8+7:438*8] <= #DLY din0[438*8+7:438*8];
	  else if (ce1 == 1)
            dout1[438*8+7:438*8] <= #DLY mem[address1][438*8+7:438*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[439] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[439] == 1) && (address0 == address1))
	      dout0[439*8+7:439*8] <= #DLY din1[439*8+7:439*8];
	  else if (ce0 == 1)
	      dout0[439*8+7:439*8] <= #DLY mem[address0][439*8+7:439*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[439] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[439] == 0) && (address0 == address1))
            dout1[439*8+7:439*8] <= #DLY din0[439*8+7:439*8];
	  else if (ce1 == 1)
            dout1[439*8+7:439*8] <= #DLY mem[address1][439*8+7:439*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[440] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[440] == 1) && (address0 == address1))
	      dout0[440*8+7:440*8] <= #DLY din1[440*8+7:440*8];
	  else if (ce0 == 1)
	      dout0[440*8+7:440*8] <= #DLY mem[address0][440*8+7:440*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[440] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[440] == 0) && (address0 == address1))
            dout1[440*8+7:440*8] <= #DLY din0[440*8+7:440*8];
	  else if (ce1 == 1)
            dout1[440*8+7:440*8] <= #DLY mem[address1][440*8+7:440*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[441] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[441] == 1) && (address0 == address1))
	      dout0[441*8+7:441*8] <= #DLY din1[441*8+7:441*8];
	  else if (ce0 == 1)
	      dout0[441*8+7:441*8] <= #DLY mem[address0][441*8+7:441*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[441] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[441] == 0) && (address0 == address1))
            dout1[441*8+7:441*8] <= #DLY din0[441*8+7:441*8];
	  else if (ce1 == 1)
            dout1[441*8+7:441*8] <= #DLY mem[address1][441*8+7:441*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[442] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[442] == 1) && (address0 == address1))
	      dout0[442*8+7:442*8] <= #DLY din1[442*8+7:442*8];
	  else if (ce0 == 1)
	      dout0[442*8+7:442*8] <= #DLY mem[address0][442*8+7:442*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[442] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[442] == 0) && (address0 == address1))
            dout1[442*8+7:442*8] <= #DLY din0[442*8+7:442*8];
	  else if (ce1 == 1)
            dout1[442*8+7:442*8] <= #DLY mem[address1][442*8+7:442*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[443] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[443] == 1) && (address0 == address1))
	      dout0[443*8+7:443*8] <= #DLY din1[443*8+7:443*8];
	  else if (ce0 == 1)
	      dout0[443*8+7:443*8] <= #DLY mem[address0][443*8+7:443*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[443] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[443] == 0) && (address0 == address1))
            dout1[443*8+7:443*8] <= #DLY din0[443*8+7:443*8];
	  else if (ce1 == 1)
            dout1[443*8+7:443*8] <= #DLY mem[address1][443*8+7:443*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[444] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[444] == 1) && (address0 == address1))
	      dout0[444*8+7:444*8] <= #DLY din1[444*8+7:444*8];
	  else if (ce0 == 1)
	      dout0[444*8+7:444*8] <= #DLY mem[address0][444*8+7:444*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[444] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[444] == 0) && (address0 == address1))
            dout1[444*8+7:444*8] <= #DLY din0[444*8+7:444*8];
	  else if (ce1 == 1)
            dout1[444*8+7:444*8] <= #DLY mem[address1][444*8+7:444*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[445] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[445] == 1) && (address0 == address1))
	      dout0[445*8+7:445*8] <= #DLY din1[445*8+7:445*8];
	  else if (ce0 == 1)
	      dout0[445*8+7:445*8] <= #DLY mem[address0][445*8+7:445*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[445] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[445] == 0) && (address0 == address1))
            dout1[445*8+7:445*8] <= #DLY din0[445*8+7:445*8];
	  else if (ce1 == 1)
            dout1[445*8+7:445*8] <= #DLY mem[address1][445*8+7:445*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[446] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[446] == 1) && (address0 == address1))
	      dout0[446*8+7:446*8] <= #DLY din1[446*8+7:446*8];
	  else if (ce0 == 1)
	      dout0[446*8+7:446*8] <= #DLY mem[address0][446*8+7:446*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[446] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[446] == 0) && (address0 == address1))
            dout1[446*8+7:446*8] <= #DLY din0[446*8+7:446*8];
	  else if (ce1 == 1)
            dout1[446*8+7:446*8] <= #DLY mem[address1][446*8+7:446*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[447] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[447] == 1) && (address0 == address1))
	      dout0[447*8+7:447*8] <= #DLY din1[447*8+7:447*8];
	  else if (ce0 == 1)
	      dout0[447*8+7:447*8] <= #DLY mem[address0][447*8+7:447*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[447] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[447] == 0) && (address0 == address1))
            dout1[447*8+7:447*8] <= #DLY din0[447*8+7:447*8];
	  else if (ce1 == 1)
            dout1[447*8+7:447*8] <= #DLY mem[address1][447*8+7:447*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[448] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[448] == 1) && (address0 == address1))
	      dout0[448*8+7:448*8] <= #DLY din1[448*8+7:448*8];
	  else if (ce0 == 1)
	      dout0[448*8+7:448*8] <= #DLY mem[address0][448*8+7:448*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[448] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[448] == 0) && (address0 == address1))
            dout1[448*8+7:448*8] <= #DLY din0[448*8+7:448*8];
	  else if (ce1 == 1)
            dout1[448*8+7:448*8] <= #DLY mem[address1][448*8+7:448*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[449] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[449] == 1) && (address0 == address1))
	      dout0[449*8+7:449*8] <= #DLY din1[449*8+7:449*8];
	  else if (ce0 == 1)
	      dout0[449*8+7:449*8] <= #DLY mem[address0][449*8+7:449*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[449] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[449] == 0) && (address0 == address1))
            dout1[449*8+7:449*8] <= #DLY din0[449*8+7:449*8];
	  else if (ce1 == 1)
            dout1[449*8+7:449*8] <= #DLY mem[address1][449*8+7:449*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[450] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[450] == 1) && (address0 == address1))
	      dout0[450*8+7:450*8] <= #DLY din1[450*8+7:450*8];
	  else if (ce0 == 1)
	      dout0[450*8+7:450*8] <= #DLY mem[address0][450*8+7:450*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[450] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[450] == 0) && (address0 == address1))
            dout1[450*8+7:450*8] <= #DLY din0[450*8+7:450*8];
	  else if (ce1 == 1)
            dout1[450*8+7:450*8] <= #DLY mem[address1][450*8+7:450*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[451] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[451] == 1) && (address0 == address1))
	      dout0[451*8+7:451*8] <= #DLY din1[451*8+7:451*8];
	  else if (ce0 == 1)
	      dout0[451*8+7:451*8] <= #DLY mem[address0][451*8+7:451*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[451] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[451] == 0) && (address0 == address1))
            dout1[451*8+7:451*8] <= #DLY din0[451*8+7:451*8];
	  else if (ce1 == 1)
            dout1[451*8+7:451*8] <= #DLY mem[address1][451*8+7:451*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[452] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[452] == 1) && (address0 == address1))
	      dout0[452*8+7:452*8] <= #DLY din1[452*8+7:452*8];
	  else if (ce0 == 1)
	      dout0[452*8+7:452*8] <= #DLY mem[address0][452*8+7:452*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[452] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[452] == 0) && (address0 == address1))
            dout1[452*8+7:452*8] <= #DLY din0[452*8+7:452*8];
	  else if (ce1 == 1)
            dout1[452*8+7:452*8] <= #DLY mem[address1][452*8+7:452*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[453] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[453] == 1) && (address0 == address1))
	      dout0[453*8+7:453*8] <= #DLY din1[453*8+7:453*8];
	  else if (ce0 == 1)
	      dout0[453*8+7:453*8] <= #DLY mem[address0][453*8+7:453*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[453] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[453] == 0) && (address0 == address1))
            dout1[453*8+7:453*8] <= #DLY din0[453*8+7:453*8];
	  else if (ce1 == 1)
            dout1[453*8+7:453*8] <= #DLY mem[address1][453*8+7:453*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[454] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[454] == 1) && (address0 == address1))
	      dout0[454*8+7:454*8] <= #DLY din1[454*8+7:454*8];
	  else if (ce0 == 1)
	      dout0[454*8+7:454*8] <= #DLY mem[address0][454*8+7:454*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[454] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[454] == 0) && (address0 == address1))
            dout1[454*8+7:454*8] <= #DLY din0[454*8+7:454*8];
	  else if (ce1 == 1)
            dout1[454*8+7:454*8] <= #DLY mem[address1][454*8+7:454*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[455] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[455] == 1) && (address0 == address1))
	      dout0[455*8+7:455*8] <= #DLY din1[455*8+7:455*8];
	  else if (ce0 == 1)
	      dout0[455*8+7:455*8] <= #DLY mem[address0][455*8+7:455*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[455] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[455] == 0) && (address0 == address1))
            dout1[455*8+7:455*8] <= #DLY din0[455*8+7:455*8];
	  else if (ce1 == 1)
            dout1[455*8+7:455*8] <= #DLY mem[address1][455*8+7:455*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[456] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[456] == 1) && (address0 == address1))
	      dout0[456*8+7:456*8] <= #DLY din1[456*8+7:456*8];
	  else if (ce0 == 1)
	      dout0[456*8+7:456*8] <= #DLY mem[address0][456*8+7:456*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[456] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[456] == 0) && (address0 == address1))
            dout1[456*8+7:456*8] <= #DLY din0[456*8+7:456*8];
	  else if (ce1 == 1)
            dout1[456*8+7:456*8] <= #DLY mem[address1][456*8+7:456*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[457] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[457] == 1) && (address0 == address1))
	      dout0[457*8+7:457*8] <= #DLY din1[457*8+7:457*8];
	  else if (ce0 == 1)
	      dout0[457*8+7:457*8] <= #DLY mem[address0][457*8+7:457*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[457] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[457] == 0) && (address0 == address1))
            dout1[457*8+7:457*8] <= #DLY din0[457*8+7:457*8];
	  else if (ce1 == 1)
            dout1[457*8+7:457*8] <= #DLY mem[address1][457*8+7:457*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[458] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[458] == 1) && (address0 == address1))
	      dout0[458*8+7:458*8] <= #DLY din1[458*8+7:458*8];
	  else if (ce0 == 1)
	      dout0[458*8+7:458*8] <= #DLY mem[address0][458*8+7:458*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[458] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[458] == 0) && (address0 == address1))
            dout1[458*8+7:458*8] <= #DLY din0[458*8+7:458*8];
	  else if (ce1 == 1)
            dout1[458*8+7:458*8] <= #DLY mem[address1][458*8+7:458*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[459] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[459] == 1) && (address0 == address1))
	      dout0[459*8+7:459*8] <= #DLY din1[459*8+7:459*8];
	  else if (ce0 == 1)
	      dout0[459*8+7:459*8] <= #DLY mem[address0][459*8+7:459*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[459] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[459] == 0) && (address0 == address1))
            dout1[459*8+7:459*8] <= #DLY din0[459*8+7:459*8];
	  else if (ce1 == 1)
            dout1[459*8+7:459*8] <= #DLY mem[address1][459*8+7:459*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[460] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[460] == 1) && (address0 == address1))
	      dout0[460*8+7:460*8] <= #DLY din1[460*8+7:460*8];
	  else if (ce0 == 1)
	      dout0[460*8+7:460*8] <= #DLY mem[address0][460*8+7:460*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[460] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[460] == 0) && (address0 == address1))
            dout1[460*8+7:460*8] <= #DLY din0[460*8+7:460*8];
	  else if (ce1 == 1)
            dout1[460*8+7:460*8] <= #DLY mem[address1][460*8+7:460*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[461] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[461] == 1) && (address0 == address1))
	      dout0[461*8+7:461*8] <= #DLY din1[461*8+7:461*8];
	  else if (ce0 == 1)
	      dout0[461*8+7:461*8] <= #DLY mem[address0][461*8+7:461*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[461] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[461] == 0) && (address0 == address1))
            dout1[461*8+7:461*8] <= #DLY din0[461*8+7:461*8];
	  else if (ce1 == 1)
            dout1[461*8+7:461*8] <= #DLY mem[address1][461*8+7:461*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[462] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[462] == 1) && (address0 == address1))
	      dout0[462*8+7:462*8] <= #DLY din1[462*8+7:462*8];
	  else if (ce0 == 1)
	      dout0[462*8+7:462*8] <= #DLY mem[address0][462*8+7:462*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[462] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[462] == 0) && (address0 == address1))
            dout1[462*8+7:462*8] <= #DLY din0[462*8+7:462*8];
	  else if (ce1 == 1)
            dout1[462*8+7:462*8] <= #DLY mem[address1][462*8+7:462*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[463] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[463] == 1) && (address0 == address1))
	      dout0[463*8+7:463*8] <= #DLY din1[463*8+7:463*8];
	  else if (ce0 == 1)
	      dout0[463*8+7:463*8] <= #DLY mem[address0][463*8+7:463*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[463] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[463] == 0) && (address0 == address1))
            dout1[463*8+7:463*8] <= #DLY din0[463*8+7:463*8];
	  else if (ce1 == 1)
            dout1[463*8+7:463*8] <= #DLY mem[address1][463*8+7:463*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[464] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[464] == 1) && (address0 == address1))
	      dout0[464*8+7:464*8] <= #DLY din1[464*8+7:464*8];
	  else if (ce0 == 1)
	      dout0[464*8+7:464*8] <= #DLY mem[address0][464*8+7:464*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[464] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[464] == 0) && (address0 == address1))
            dout1[464*8+7:464*8] <= #DLY din0[464*8+7:464*8];
	  else if (ce1 == 1)
            dout1[464*8+7:464*8] <= #DLY mem[address1][464*8+7:464*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[465] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[465] == 1) && (address0 == address1))
	      dout0[465*8+7:465*8] <= #DLY din1[465*8+7:465*8];
	  else if (ce0 == 1)
	      dout0[465*8+7:465*8] <= #DLY mem[address0][465*8+7:465*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[465] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[465] == 0) && (address0 == address1))
            dout1[465*8+7:465*8] <= #DLY din0[465*8+7:465*8];
	  else if (ce1 == 1)
            dout1[465*8+7:465*8] <= #DLY mem[address1][465*8+7:465*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[466] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[466] == 1) && (address0 == address1))
	      dout0[466*8+7:466*8] <= #DLY din1[466*8+7:466*8];
	  else if (ce0 == 1)
	      dout0[466*8+7:466*8] <= #DLY mem[address0][466*8+7:466*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[466] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[466] == 0) && (address0 == address1))
            dout1[466*8+7:466*8] <= #DLY din0[466*8+7:466*8];
	  else if (ce1 == 1)
            dout1[466*8+7:466*8] <= #DLY mem[address1][466*8+7:466*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[467] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[467] == 1) && (address0 == address1))
	      dout0[467*8+7:467*8] <= #DLY din1[467*8+7:467*8];
	  else if (ce0 == 1)
	      dout0[467*8+7:467*8] <= #DLY mem[address0][467*8+7:467*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[467] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[467] == 0) && (address0 == address1))
            dout1[467*8+7:467*8] <= #DLY din0[467*8+7:467*8];
	  else if (ce1 == 1)
            dout1[467*8+7:467*8] <= #DLY mem[address1][467*8+7:467*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[468] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[468] == 1) && (address0 == address1))
	      dout0[468*8+7:468*8] <= #DLY din1[468*8+7:468*8];
	  else if (ce0 == 1)
	      dout0[468*8+7:468*8] <= #DLY mem[address0][468*8+7:468*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[468] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[468] == 0) && (address0 == address1))
            dout1[468*8+7:468*8] <= #DLY din0[468*8+7:468*8];
	  else if (ce1 == 1)
            dout1[468*8+7:468*8] <= #DLY mem[address1][468*8+7:468*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[469] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[469] == 1) && (address0 == address1))
	      dout0[469*8+7:469*8] <= #DLY din1[469*8+7:469*8];
	  else if (ce0 == 1)
	      dout0[469*8+7:469*8] <= #DLY mem[address0][469*8+7:469*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[469] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[469] == 0) && (address0 == address1))
            dout1[469*8+7:469*8] <= #DLY din0[469*8+7:469*8];
	  else if (ce1 == 1)
            dout1[469*8+7:469*8] <= #DLY mem[address1][469*8+7:469*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[470] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[470] == 1) && (address0 == address1))
	      dout0[470*8+7:470*8] <= #DLY din1[470*8+7:470*8];
	  else if (ce0 == 1)
	      dout0[470*8+7:470*8] <= #DLY mem[address0][470*8+7:470*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[470] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[470] == 0) && (address0 == address1))
            dout1[470*8+7:470*8] <= #DLY din0[470*8+7:470*8];
	  else if (ce1 == 1)
            dout1[470*8+7:470*8] <= #DLY mem[address1][470*8+7:470*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[471] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[471] == 1) && (address0 == address1))
	      dout0[471*8+7:471*8] <= #DLY din1[471*8+7:471*8];
	  else if (ce0 == 1)
	      dout0[471*8+7:471*8] <= #DLY mem[address0][471*8+7:471*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[471] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[471] == 0) && (address0 == address1))
            dout1[471*8+7:471*8] <= #DLY din0[471*8+7:471*8];
	  else if (ce1 == 1)
            dout1[471*8+7:471*8] <= #DLY mem[address1][471*8+7:471*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[472] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[472] == 1) && (address0 == address1))
	      dout0[472*8+7:472*8] <= #DLY din1[472*8+7:472*8];
	  else if (ce0 == 1)
	      dout0[472*8+7:472*8] <= #DLY mem[address0][472*8+7:472*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[472] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[472] == 0) && (address0 == address1))
            dout1[472*8+7:472*8] <= #DLY din0[472*8+7:472*8];
	  else if (ce1 == 1)
            dout1[472*8+7:472*8] <= #DLY mem[address1][472*8+7:472*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[473] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[473] == 1) && (address0 == address1))
	      dout0[473*8+7:473*8] <= #DLY din1[473*8+7:473*8];
	  else if (ce0 == 1)
	      dout0[473*8+7:473*8] <= #DLY mem[address0][473*8+7:473*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[473] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[473] == 0) && (address0 == address1))
            dout1[473*8+7:473*8] <= #DLY din0[473*8+7:473*8];
	  else if (ce1 == 1)
            dout1[473*8+7:473*8] <= #DLY mem[address1][473*8+7:473*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[474] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[474] == 1) && (address0 == address1))
	      dout0[474*8+7:474*8] <= #DLY din1[474*8+7:474*8];
	  else if (ce0 == 1)
	      dout0[474*8+7:474*8] <= #DLY mem[address0][474*8+7:474*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[474] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[474] == 0) && (address0 == address1))
            dout1[474*8+7:474*8] <= #DLY din0[474*8+7:474*8];
	  else if (ce1 == 1)
            dout1[474*8+7:474*8] <= #DLY mem[address1][474*8+7:474*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[475] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[475] == 1) && (address0 == address1))
	      dout0[475*8+7:475*8] <= #DLY din1[475*8+7:475*8];
	  else if (ce0 == 1)
	      dout0[475*8+7:475*8] <= #DLY mem[address0][475*8+7:475*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[475] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[475] == 0) && (address0 == address1))
            dout1[475*8+7:475*8] <= #DLY din0[475*8+7:475*8];
	  else if (ce1 == 1)
            dout1[475*8+7:475*8] <= #DLY mem[address1][475*8+7:475*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[476] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[476] == 1) && (address0 == address1))
	      dout0[476*8+7:476*8] <= #DLY din1[476*8+7:476*8];
	  else if (ce0 == 1)
	      dout0[476*8+7:476*8] <= #DLY mem[address0][476*8+7:476*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[476] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[476] == 0) && (address0 == address1))
            dout1[476*8+7:476*8] <= #DLY din0[476*8+7:476*8];
	  else if (ce1 == 1)
            dout1[476*8+7:476*8] <= #DLY mem[address1][476*8+7:476*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[477] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[477] == 1) && (address0 == address1))
	      dout0[477*8+7:477*8] <= #DLY din1[477*8+7:477*8];
	  else if (ce0 == 1)
	      dout0[477*8+7:477*8] <= #DLY mem[address0][477*8+7:477*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[477] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[477] == 0) && (address0 == address1))
            dout1[477*8+7:477*8] <= #DLY din0[477*8+7:477*8];
	  else if (ce1 == 1)
            dout1[477*8+7:477*8] <= #DLY mem[address1][477*8+7:477*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[478] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[478] == 1) && (address0 == address1))
	      dout0[478*8+7:478*8] <= #DLY din1[478*8+7:478*8];
	  else if (ce0 == 1)
	      dout0[478*8+7:478*8] <= #DLY mem[address0][478*8+7:478*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[478] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[478] == 0) && (address0 == address1))
            dout1[478*8+7:478*8] <= #DLY din0[478*8+7:478*8];
	  else if (ce1 == 1)
            dout1[478*8+7:478*8] <= #DLY mem[address1][478*8+7:478*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[479] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[479] == 1) && (address0 == address1))
	      dout0[479*8+7:479*8] <= #DLY din1[479*8+7:479*8];
	  else if (ce0 == 1)
	      dout0[479*8+7:479*8] <= #DLY mem[address0][479*8+7:479*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[479] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[479] == 0) && (address0 == address1))
            dout1[479*8+7:479*8] <= #DLY din0[479*8+7:479*8];
	  else if (ce1 == 1)
            dout1[479*8+7:479*8] <= #DLY mem[address1][479*8+7:479*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[480] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[480] == 1) && (address0 == address1))
	      dout0[480*8+7:480*8] <= #DLY din1[480*8+7:480*8];
	  else if (ce0 == 1)
	      dout0[480*8+7:480*8] <= #DLY mem[address0][480*8+7:480*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[480] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[480] == 0) && (address0 == address1))
            dout1[480*8+7:480*8] <= #DLY din0[480*8+7:480*8];
	  else if (ce1 == 1)
            dout1[480*8+7:480*8] <= #DLY mem[address1][480*8+7:480*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[481] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[481] == 1) && (address0 == address1))
	      dout0[481*8+7:481*8] <= #DLY din1[481*8+7:481*8];
	  else if (ce0 == 1)
	      dout0[481*8+7:481*8] <= #DLY mem[address0][481*8+7:481*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[481] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[481] == 0) && (address0 == address1))
            dout1[481*8+7:481*8] <= #DLY din0[481*8+7:481*8];
	  else if (ce1 == 1)
            dout1[481*8+7:481*8] <= #DLY mem[address1][481*8+7:481*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[482] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[482] == 1) && (address0 == address1))
	      dout0[482*8+7:482*8] <= #DLY din1[482*8+7:482*8];
	  else if (ce0 == 1)
	      dout0[482*8+7:482*8] <= #DLY mem[address0][482*8+7:482*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[482] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[482] == 0) && (address0 == address1))
            dout1[482*8+7:482*8] <= #DLY din0[482*8+7:482*8];
	  else if (ce1 == 1)
            dout1[482*8+7:482*8] <= #DLY mem[address1][482*8+7:482*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[483] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[483] == 1) && (address0 == address1))
	      dout0[483*8+7:483*8] <= #DLY din1[483*8+7:483*8];
	  else if (ce0 == 1)
	      dout0[483*8+7:483*8] <= #DLY mem[address0][483*8+7:483*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[483] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[483] == 0) && (address0 == address1))
            dout1[483*8+7:483*8] <= #DLY din0[483*8+7:483*8];
	  else if (ce1 == 1)
            dout1[483*8+7:483*8] <= #DLY mem[address1][483*8+7:483*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[484] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[484] == 1) && (address0 == address1))
	      dout0[484*8+7:484*8] <= #DLY din1[484*8+7:484*8];
	  else if (ce0 == 1)
	      dout0[484*8+7:484*8] <= #DLY mem[address0][484*8+7:484*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[484] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[484] == 0) && (address0 == address1))
            dout1[484*8+7:484*8] <= #DLY din0[484*8+7:484*8];
	  else if (ce1 == 1)
            dout1[484*8+7:484*8] <= #DLY mem[address1][484*8+7:484*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[485] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[485] == 1) && (address0 == address1))
	      dout0[485*8+7:485*8] <= #DLY din1[485*8+7:485*8];
	  else if (ce0 == 1)
	      dout0[485*8+7:485*8] <= #DLY mem[address0][485*8+7:485*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[485] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[485] == 0) && (address0 == address1))
            dout1[485*8+7:485*8] <= #DLY din0[485*8+7:485*8];
	  else if (ce1 == 1)
            dout1[485*8+7:485*8] <= #DLY mem[address1][485*8+7:485*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[486] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[486] == 1) && (address0 == address1))
	      dout0[486*8+7:486*8] <= #DLY din1[486*8+7:486*8];
	  else if (ce0 == 1)
	      dout0[486*8+7:486*8] <= #DLY mem[address0][486*8+7:486*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[486] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[486] == 0) && (address0 == address1))
            dout1[486*8+7:486*8] <= #DLY din0[486*8+7:486*8];
	  else if (ce1 == 1)
            dout1[486*8+7:486*8] <= #DLY mem[address1][486*8+7:486*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[487] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[487] == 1) && (address0 == address1))
	      dout0[487*8+7:487*8] <= #DLY din1[487*8+7:487*8];
	  else if (ce0 == 1)
	      dout0[487*8+7:487*8] <= #DLY mem[address0][487*8+7:487*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[487] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[487] == 0) && (address0 == address1))
            dout1[487*8+7:487*8] <= #DLY din0[487*8+7:487*8];
	  else if (ce1 == 1)
            dout1[487*8+7:487*8] <= #DLY mem[address1][487*8+7:487*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[488] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[488] == 1) && (address0 == address1))
	      dout0[488*8+7:488*8] <= #DLY din1[488*8+7:488*8];
	  else if (ce0 == 1)
	      dout0[488*8+7:488*8] <= #DLY mem[address0][488*8+7:488*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[488] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[488] == 0) && (address0 == address1))
            dout1[488*8+7:488*8] <= #DLY din0[488*8+7:488*8];
	  else if (ce1 == 1)
            dout1[488*8+7:488*8] <= #DLY mem[address1][488*8+7:488*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[489] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[489] == 1) && (address0 == address1))
	      dout0[489*8+7:489*8] <= #DLY din1[489*8+7:489*8];
	  else if (ce0 == 1)
	      dout0[489*8+7:489*8] <= #DLY mem[address0][489*8+7:489*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[489] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[489] == 0) && (address0 == address1))
            dout1[489*8+7:489*8] <= #DLY din0[489*8+7:489*8];
	  else if (ce1 == 1)
            dout1[489*8+7:489*8] <= #DLY mem[address1][489*8+7:489*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[490] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[490] == 1) && (address0 == address1))
	      dout0[490*8+7:490*8] <= #DLY din1[490*8+7:490*8];
	  else if (ce0 == 1)
	      dout0[490*8+7:490*8] <= #DLY mem[address0][490*8+7:490*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[490] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[490] == 0) && (address0 == address1))
            dout1[490*8+7:490*8] <= #DLY din0[490*8+7:490*8];
	  else if (ce1 == 1)
            dout1[490*8+7:490*8] <= #DLY mem[address1][490*8+7:490*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[491] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[491] == 1) && (address0 == address1))
	      dout0[491*8+7:491*8] <= #DLY din1[491*8+7:491*8];
	  else if (ce0 == 1)
	      dout0[491*8+7:491*8] <= #DLY mem[address0][491*8+7:491*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[491] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[491] == 0) && (address0 == address1))
            dout1[491*8+7:491*8] <= #DLY din0[491*8+7:491*8];
	  else if (ce1 == 1)
            dout1[491*8+7:491*8] <= #DLY mem[address1][491*8+7:491*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[492] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[492] == 1) && (address0 == address1))
	      dout0[492*8+7:492*8] <= #DLY din1[492*8+7:492*8];
	  else if (ce0 == 1)
	      dout0[492*8+7:492*8] <= #DLY mem[address0][492*8+7:492*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[492] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[492] == 0) && (address0 == address1))
            dout1[492*8+7:492*8] <= #DLY din0[492*8+7:492*8];
	  else if (ce1 == 1)
            dout1[492*8+7:492*8] <= #DLY mem[address1][492*8+7:492*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[493] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[493] == 1) && (address0 == address1))
	      dout0[493*8+7:493*8] <= #DLY din1[493*8+7:493*8];
	  else if (ce0 == 1)
	      dout0[493*8+7:493*8] <= #DLY mem[address0][493*8+7:493*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[493] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[493] == 0) && (address0 == address1))
            dout1[493*8+7:493*8] <= #DLY din0[493*8+7:493*8];
	  else if (ce1 == 1)
            dout1[493*8+7:493*8] <= #DLY mem[address1][493*8+7:493*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[494] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[494] == 1) && (address0 == address1))
	      dout0[494*8+7:494*8] <= #DLY din1[494*8+7:494*8];
	  else if (ce0 == 1)
	      dout0[494*8+7:494*8] <= #DLY mem[address0][494*8+7:494*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[494] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[494] == 0) && (address0 == address1))
            dout1[494*8+7:494*8] <= #DLY din0[494*8+7:494*8];
	  else if (ce1 == 1)
            dout1[494*8+7:494*8] <= #DLY mem[address1][494*8+7:494*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[495] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[495] == 1) && (address0 == address1))
	      dout0[495*8+7:495*8] <= #DLY din1[495*8+7:495*8];
	  else if (ce0 == 1)
	      dout0[495*8+7:495*8] <= #DLY mem[address0][495*8+7:495*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[495] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[495] == 0) && (address0 == address1))
            dout1[495*8+7:495*8] <= #DLY din0[495*8+7:495*8];
	  else if (ce1 == 1)
            dout1[495*8+7:495*8] <= #DLY mem[address1][495*8+7:495*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[496] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[496] == 1) && (address0 == address1))
	      dout0[496*8+7:496*8] <= #DLY din1[496*8+7:496*8];
	  else if (ce0 == 1)
	      dout0[496*8+7:496*8] <= #DLY mem[address0][496*8+7:496*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[496] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[496] == 0) && (address0 == address1))
            dout1[496*8+7:496*8] <= #DLY din0[496*8+7:496*8];
	  else if (ce1 == 1)
            dout1[496*8+7:496*8] <= #DLY mem[address1][496*8+7:496*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[497] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[497] == 1) && (address0 == address1))
	      dout0[497*8+7:497*8] <= #DLY din1[497*8+7:497*8];
	  else if (ce0 == 1)
	      dout0[497*8+7:497*8] <= #DLY mem[address0][497*8+7:497*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[497] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[497] == 0) && (address0 == address1))
            dout1[497*8+7:497*8] <= #DLY din0[497*8+7:497*8];
	  else if (ce1 == 1)
            dout1[497*8+7:497*8] <= #DLY mem[address1][497*8+7:497*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[498] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[498] == 1) && (address0 == address1))
	      dout0[498*8+7:498*8] <= #DLY din1[498*8+7:498*8];
	  else if (ce0 == 1)
	      dout0[498*8+7:498*8] <= #DLY mem[address0][498*8+7:498*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[498] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[498] == 0) && (address0 == address1))
            dout1[498*8+7:498*8] <= #DLY din0[498*8+7:498*8];
	  else if (ce1 == 1)
            dout1[498*8+7:498*8] <= #DLY mem[address1][498*8+7:498*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[499] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[499] == 1) && (address0 == address1))
	      dout0[499*8+7:499*8] <= #DLY din1[499*8+7:499*8];
	  else if (ce0 == 1)
	      dout0[499*8+7:499*8] <= #DLY mem[address0][499*8+7:499*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[499] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[499] == 0) && (address0 == address1))
            dout1[499*8+7:499*8] <= #DLY din0[499*8+7:499*8];
	  else if (ce1 == 1)
            dout1[499*8+7:499*8] <= #DLY mem[address1][499*8+7:499*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[500] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[500] == 1) && (address0 == address1))
	      dout0[500*8+7:500*8] <= #DLY din1[500*8+7:500*8];
	  else if (ce0 == 1)
	      dout0[500*8+7:500*8] <= #DLY mem[address0][500*8+7:500*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[500] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[500] == 0) && (address0 == address1))
            dout1[500*8+7:500*8] <= #DLY din0[500*8+7:500*8];
	  else if (ce1 == 1)
            dout1[500*8+7:500*8] <= #DLY mem[address1][500*8+7:500*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[501] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[501] == 1) && (address0 == address1))
	      dout0[501*8+7:501*8] <= #DLY din1[501*8+7:501*8];
	  else if (ce0 == 1)
	      dout0[501*8+7:501*8] <= #DLY mem[address0][501*8+7:501*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[501] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[501] == 0) && (address0 == address1))
            dout1[501*8+7:501*8] <= #DLY din0[501*8+7:501*8];
	  else if (ce1 == 1)
            dout1[501*8+7:501*8] <= #DLY mem[address1][501*8+7:501*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[502] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[502] == 1) && (address0 == address1))
	      dout0[502*8+7:502*8] <= #DLY din1[502*8+7:502*8];
	  else if (ce0 == 1)
	      dout0[502*8+7:502*8] <= #DLY mem[address0][502*8+7:502*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[502] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[502] == 0) && (address0 == address1))
            dout1[502*8+7:502*8] <= #DLY din0[502*8+7:502*8];
	  else if (ce1 == 1)
            dout1[502*8+7:502*8] <= #DLY mem[address1][502*8+7:502*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[503] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[503] == 1) && (address0 == address1))
	      dout0[503*8+7:503*8] <= #DLY din1[503*8+7:503*8];
	  else if (ce0 == 1)
	      dout0[503*8+7:503*8] <= #DLY mem[address0][503*8+7:503*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[503] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[503] == 0) && (address0 == address1))
            dout1[503*8+7:503*8] <= #DLY din0[503*8+7:503*8];
	  else if (ce1 == 1)
            dout1[503*8+7:503*8] <= #DLY mem[address1][503*8+7:503*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[504] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[504] == 1) && (address0 == address1))
	      dout0[504*8+7:504*8] <= #DLY din1[504*8+7:504*8];
	  else if (ce0 == 1)
	      dout0[504*8+7:504*8] <= #DLY mem[address0][504*8+7:504*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[504] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[504] == 0) && (address0 == address1))
            dout1[504*8+7:504*8] <= #DLY din0[504*8+7:504*8];
	  else if (ce1 == 1)
            dout1[504*8+7:504*8] <= #DLY mem[address1][504*8+7:504*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[505] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[505] == 1) && (address0 == address1))
	      dout0[505*8+7:505*8] <= #DLY din1[505*8+7:505*8];
	  else if (ce0 == 1)
	      dout0[505*8+7:505*8] <= #DLY mem[address0][505*8+7:505*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[505] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[505] == 0) && (address0 == address1))
            dout1[505*8+7:505*8] <= #DLY din0[505*8+7:505*8];
	  else if (ce1 == 1)
            dout1[505*8+7:505*8] <= #DLY mem[address1][505*8+7:505*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[506] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[506] == 1) && (address0 == address1))
	      dout0[506*8+7:506*8] <= #DLY din1[506*8+7:506*8];
	  else if (ce0 == 1)
	      dout0[506*8+7:506*8] <= #DLY mem[address0][506*8+7:506*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[506] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[506] == 0) && (address0 == address1))
            dout1[506*8+7:506*8] <= #DLY din0[506*8+7:506*8];
	  else if (ce1 == 1)
            dout1[506*8+7:506*8] <= #DLY mem[address1][506*8+7:506*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[507] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[507] == 1) && (address0 == address1))
	      dout0[507*8+7:507*8] <= #DLY din1[507*8+7:507*8];
	  else if (ce0 == 1)
	      dout0[507*8+7:507*8] <= #DLY mem[address0][507*8+7:507*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[507] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[507] == 0) && (address0 == address1))
            dout1[507*8+7:507*8] <= #DLY din0[507*8+7:507*8];
	  else if (ce1 == 1)
            dout1[507*8+7:507*8] <= #DLY mem[address1][507*8+7:507*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[508] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[508] == 1) && (address0 == address1))
	      dout0[508*8+7:508*8] <= #DLY din1[508*8+7:508*8];
	  else if (ce0 == 1)
	      dout0[508*8+7:508*8] <= #DLY mem[address0][508*8+7:508*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[508] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[508] == 0) && (address0 == address1))
            dout1[508*8+7:508*8] <= #DLY din0[508*8+7:508*8];
	  else if (ce1 == 1)
            dout1[508*8+7:508*8] <= #DLY mem[address1][508*8+7:508*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[509] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[509] == 1) && (address0 == address1))
	      dout0[509*8+7:509*8] <= #DLY din1[509*8+7:509*8];
	  else if (ce0 == 1)
	      dout0[509*8+7:509*8] <= #DLY mem[address0][509*8+7:509*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[509] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[509] == 0) && (address0 == address1))
            dout1[509*8+7:509*8] <= #DLY din0[509*8+7:509*8];
	  else if (ce1 == 1)
            dout1[509*8+7:509*8] <= #DLY mem[address1][509*8+7:509*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[510] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[510] == 1) && (address0 == address1))
	      dout0[510*8+7:510*8] <= #DLY din1[510*8+7:510*8];
	  else if (ce0 == 1)
	      dout0[510*8+7:510*8] <= #DLY mem[address0][510*8+7:510*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[510] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[510] == 0) && (address0 == address1))
            dout1[510*8+7:510*8] <= #DLY din0[510*8+7:510*8];
	  else if (ce1 == 1)
            dout1[510*8+7:510*8] <= #DLY mem[address1][510*8+7:510*8];
        else ;
    end
end
always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout0 <= 0;
    end
    else begin
	  if((we0[511] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[511] == 1) && (address0 == address1))
	      dout0[511*8+7:511*8] <= #DLY din1[511*8+7:511*8];
	  else if (ce0 == 1)
	      dout0[511*8+7:511*8] <= #DLY mem[address0][511*8+7:511*8];
        else ;
    end
end

always @ (posedge clk or rst) begin
    if(rst === 1) begin
        dout1 <= 0;
    end
    else begin
	  if((we0[511] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[511] == 0) && (address0 == address1))
            dout1[511*8+7:511*8] <= #DLY din0[511*8+7:511*8];
	  else if (ce1 == 1)
            dout1[511*8+7:511*8] <= #DLY mem[address1][511*8+7:511*8];
        else ;
    end
end

//------------------------Write array-------------------

// Write data from RTL to array
//write process for byte 0
always @ (posedge clk) begin
    if((we0[0] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[0] == 1) && (address0 == address1))
        mem[address0][0*8+7:0*8] <= #DLY din1[0*8+7:0*8];
    else if ((we0[0] == 1) && (ce0 == 1))
        mem[address0][0*8+7:0*8] <= #DLY din0[0*8+7:0*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[0] == 1))
        mem[address1][0*8+7:0*8] <= #DLY din1[0*8+7:0*8];
end
//write process for byte 1
always @ (posedge clk) begin
    if((we0[1] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[1] == 1) && (address0 == address1))
        mem[address0][1*8+7:1*8] <= #DLY din1[1*8+7:1*8];
    else if ((we0[1] == 1) && (ce0 == 1))
        mem[address0][1*8+7:1*8] <= #DLY din0[1*8+7:1*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[1] == 1))
        mem[address1][1*8+7:1*8] <= #DLY din1[1*8+7:1*8];
end
//write process for byte 2
always @ (posedge clk) begin
    if((we0[2] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[2] == 1) && (address0 == address1))
        mem[address0][2*8+7:2*8] <= #DLY din1[2*8+7:2*8];
    else if ((we0[2] == 1) && (ce0 == 1))
        mem[address0][2*8+7:2*8] <= #DLY din0[2*8+7:2*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[2] == 1))
        mem[address1][2*8+7:2*8] <= #DLY din1[2*8+7:2*8];
end
//write process for byte 3
always @ (posedge clk) begin
    if((we0[3] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[3] == 1) && (address0 == address1))
        mem[address0][3*8+7:3*8] <= #DLY din1[3*8+7:3*8];
    else if ((we0[3] == 1) && (ce0 == 1))
        mem[address0][3*8+7:3*8] <= #DLY din0[3*8+7:3*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[3] == 1))
        mem[address1][3*8+7:3*8] <= #DLY din1[3*8+7:3*8];
end
//write process for byte 4
always @ (posedge clk) begin
    if((we0[4] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[4] == 1) && (address0 == address1))
        mem[address0][4*8+7:4*8] <= #DLY din1[4*8+7:4*8];
    else if ((we0[4] == 1) && (ce0 == 1))
        mem[address0][4*8+7:4*8] <= #DLY din0[4*8+7:4*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[4] == 1))
        mem[address1][4*8+7:4*8] <= #DLY din1[4*8+7:4*8];
end
//write process for byte 5
always @ (posedge clk) begin
    if((we0[5] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[5] == 1) && (address0 == address1))
        mem[address0][5*8+7:5*8] <= #DLY din1[5*8+7:5*8];
    else if ((we0[5] == 1) && (ce0 == 1))
        mem[address0][5*8+7:5*8] <= #DLY din0[5*8+7:5*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[5] == 1))
        mem[address1][5*8+7:5*8] <= #DLY din1[5*8+7:5*8];
end
//write process for byte 6
always @ (posedge clk) begin
    if((we0[6] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[6] == 1) && (address0 == address1))
        mem[address0][6*8+7:6*8] <= #DLY din1[6*8+7:6*8];
    else if ((we0[6] == 1) && (ce0 == 1))
        mem[address0][6*8+7:6*8] <= #DLY din0[6*8+7:6*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[6] == 1))
        mem[address1][6*8+7:6*8] <= #DLY din1[6*8+7:6*8];
end
//write process for byte 7
always @ (posedge clk) begin
    if((we0[7] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[7] == 1) && (address0 == address1))
        mem[address0][7*8+7:7*8] <= #DLY din1[7*8+7:7*8];
    else if ((we0[7] == 1) && (ce0 == 1))
        mem[address0][7*8+7:7*8] <= #DLY din0[7*8+7:7*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[7] == 1))
        mem[address1][7*8+7:7*8] <= #DLY din1[7*8+7:7*8];
end
//write process for byte 8
always @ (posedge clk) begin
    if((we0[8] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[8] == 1) && (address0 == address1))
        mem[address0][8*8+7:8*8] <= #DLY din1[8*8+7:8*8];
    else if ((we0[8] == 1) && (ce0 == 1))
        mem[address0][8*8+7:8*8] <= #DLY din0[8*8+7:8*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[8] == 1))
        mem[address1][8*8+7:8*8] <= #DLY din1[8*8+7:8*8];
end
//write process for byte 9
always @ (posedge clk) begin
    if((we0[9] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[9] == 1) && (address0 == address1))
        mem[address0][9*8+7:9*8] <= #DLY din1[9*8+7:9*8];
    else if ((we0[9] == 1) && (ce0 == 1))
        mem[address0][9*8+7:9*8] <= #DLY din0[9*8+7:9*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[9] == 1))
        mem[address1][9*8+7:9*8] <= #DLY din1[9*8+7:9*8];
end
//write process for byte 10
always @ (posedge clk) begin
    if((we0[10] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[10] == 1) && (address0 == address1))
        mem[address0][10*8+7:10*8] <= #DLY din1[10*8+7:10*8];
    else if ((we0[10] == 1) && (ce0 == 1))
        mem[address0][10*8+7:10*8] <= #DLY din0[10*8+7:10*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[10] == 1))
        mem[address1][10*8+7:10*8] <= #DLY din1[10*8+7:10*8];
end
//write process for byte 11
always @ (posedge clk) begin
    if((we0[11] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[11] == 1) && (address0 == address1))
        mem[address0][11*8+7:11*8] <= #DLY din1[11*8+7:11*8];
    else if ((we0[11] == 1) && (ce0 == 1))
        mem[address0][11*8+7:11*8] <= #DLY din0[11*8+7:11*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[11] == 1))
        mem[address1][11*8+7:11*8] <= #DLY din1[11*8+7:11*8];
end
//write process for byte 12
always @ (posedge clk) begin
    if((we0[12] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[12] == 1) && (address0 == address1))
        mem[address0][12*8+7:12*8] <= #DLY din1[12*8+7:12*8];
    else if ((we0[12] == 1) && (ce0 == 1))
        mem[address0][12*8+7:12*8] <= #DLY din0[12*8+7:12*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[12] == 1))
        mem[address1][12*8+7:12*8] <= #DLY din1[12*8+7:12*8];
end
//write process for byte 13
always @ (posedge clk) begin
    if((we0[13] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[13] == 1) && (address0 == address1))
        mem[address0][13*8+7:13*8] <= #DLY din1[13*8+7:13*8];
    else if ((we0[13] == 1) && (ce0 == 1))
        mem[address0][13*8+7:13*8] <= #DLY din0[13*8+7:13*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[13] == 1))
        mem[address1][13*8+7:13*8] <= #DLY din1[13*8+7:13*8];
end
//write process for byte 14
always @ (posedge clk) begin
    if((we0[14] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[14] == 1) && (address0 == address1))
        mem[address0][14*8+7:14*8] <= #DLY din1[14*8+7:14*8];
    else if ((we0[14] == 1) && (ce0 == 1))
        mem[address0][14*8+7:14*8] <= #DLY din0[14*8+7:14*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[14] == 1))
        mem[address1][14*8+7:14*8] <= #DLY din1[14*8+7:14*8];
end
//write process for byte 15
always @ (posedge clk) begin
    if((we0[15] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[15] == 1) && (address0 == address1))
        mem[address0][15*8+7:15*8] <= #DLY din1[15*8+7:15*8];
    else if ((we0[15] == 1) && (ce0 == 1))
        mem[address0][15*8+7:15*8] <= #DLY din0[15*8+7:15*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[15] == 1))
        mem[address1][15*8+7:15*8] <= #DLY din1[15*8+7:15*8];
end
//write process for byte 16
always @ (posedge clk) begin
    if((we0[16] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[16] == 1) && (address0 == address1))
        mem[address0][16*8+7:16*8] <= #DLY din1[16*8+7:16*8];
    else if ((we0[16] == 1) && (ce0 == 1))
        mem[address0][16*8+7:16*8] <= #DLY din0[16*8+7:16*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[16] == 1))
        mem[address1][16*8+7:16*8] <= #DLY din1[16*8+7:16*8];
end
//write process for byte 17
always @ (posedge clk) begin
    if((we0[17] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[17] == 1) && (address0 == address1))
        mem[address0][17*8+7:17*8] <= #DLY din1[17*8+7:17*8];
    else if ((we0[17] == 1) && (ce0 == 1))
        mem[address0][17*8+7:17*8] <= #DLY din0[17*8+7:17*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[17] == 1))
        mem[address1][17*8+7:17*8] <= #DLY din1[17*8+7:17*8];
end
//write process for byte 18
always @ (posedge clk) begin
    if((we0[18] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[18] == 1) && (address0 == address1))
        mem[address0][18*8+7:18*8] <= #DLY din1[18*8+7:18*8];
    else if ((we0[18] == 1) && (ce0 == 1))
        mem[address0][18*8+7:18*8] <= #DLY din0[18*8+7:18*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[18] == 1))
        mem[address1][18*8+7:18*8] <= #DLY din1[18*8+7:18*8];
end
//write process for byte 19
always @ (posedge clk) begin
    if((we0[19] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[19] == 1) && (address0 == address1))
        mem[address0][19*8+7:19*8] <= #DLY din1[19*8+7:19*8];
    else if ((we0[19] == 1) && (ce0 == 1))
        mem[address0][19*8+7:19*8] <= #DLY din0[19*8+7:19*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[19] == 1))
        mem[address1][19*8+7:19*8] <= #DLY din1[19*8+7:19*8];
end
//write process for byte 20
always @ (posedge clk) begin
    if((we0[20] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[20] == 1) && (address0 == address1))
        mem[address0][20*8+7:20*8] <= #DLY din1[20*8+7:20*8];
    else if ((we0[20] == 1) && (ce0 == 1))
        mem[address0][20*8+7:20*8] <= #DLY din0[20*8+7:20*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[20] == 1))
        mem[address1][20*8+7:20*8] <= #DLY din1[20*8+7:20*8];
end
//write process for byte 21
always @ (posedge clk) begin
    if((we0[21] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[21] == 1) && (address0 == address1))
        mem[address0][21*8+7:21*8] <= #DLY din1[21*8+7:21*8];
    else if ((we0[21] == 1) && (ce0 == 1))
        mem[address0][21*8+7:21*8] <= #DLY din0[21*8+7:21*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[21] == 1))
        mem[address1][21*8+7:21*8] <= #DLY din1[21*8+7:21*8];
end
//write process for byte 22
always @ (posedge clk) begin
    if((we0[22] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[22] == 1) && (address0 == address1))
        mem[address0][22*8+7:22*8] <= #DLY din1[22*8+7:22*8];
    else if ((we0[22] == 1) && (ce0 == 1))
        mem[address0][22*8+7:22*8] <= #DLY din0[22*8+7:22*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[22] == 1))
        mem[address1][22*8+7:22*8] <= #DLY din1[22*8+7:22*8];
end
//write process for byte 23
always @ (posedge clk) begin
    if((we0[23] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[23] == 1) && (address0 == address1))
        mem[address0][23*8+7:23*8] <= #DLY din1[23*8+7:23*8];
    else if ((we0[23] == 1) && (ce0 == 1))
        mem[address0][23*8+7:23*8] <= #DLY din0[23*8+7:23*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[23] == 1))
        mem[address1][23*8+7:23*8] <= #DLY din1[23*8+7:23*8];
end
//write process for byte 24
always @ (posedge clk) begin
    if((we0[24] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[24] == 1) && (address0 == address1))
        mem[address0][24*8+7:24*8] <= #DLY din1[24*8+7:24*8];
    else if ((we0[24] == 1) && (ce0 == 1))
        mem[address0][24*8+7:24*8] <= #DLY din0[24*8+7:24*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[24] == 1))
        mem[address1][24*8+7:24*8] <= #DLY din1[24*8+7:24*8];
end
//write process for byte 25
always @ (posedge clk) begin
    if((we0[25] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[25] == 1) && (address0 == address1))
        mem[address0][25*8+7:25*8] <= #DLY din1[25*8+7:25*8];
    else if ((we0[25] == 1) && (ce0 == 1))
        mem[address0][25*8+7:25*8] <= #DLY din0[25*8+7:25*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[25] == 1))
        mem[address1][25*8+7:25*8] <= #DLY din1[25*8+7:25*8];
end
//write process for byte 26
always @ (posedge clk) begin
    if((we0[26] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[26] == 1) && (address0 == address1))
        mem[address0][26*8+7:26*8] <= #DLY din1[26*8+7:26*8];
    else if ((we0[26] == 1) && (ce0 == 1))
        mem[address0][26*8+7:26*8] <= #DLY din0[26*8+7:26*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[26] == 1))
        mem[address1][26*8+7:26*8] <= #DLY din1[26*8+7:26*8];
end
//write process for byte 27
always @ (posedge clk) begin
    if((we0[27] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[27] == 1) && (address0 == address1))
        mem[address0][27*8+7:27*8] <= #DLY din1[27*8+7:27*8];
    else if ((we0[27] == 1) && (ce0 == 1))
        mem[address0][27*8+7:27*8] <= #DLY din0[27*8+7:27*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[27] == 1))
        mem[address1][27*8+7:27*8] <= #DLY din1[27*8+7:27*8];
end
//write process for byte 28
always @ (posedge clk) begin
    if((we0[28] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[28] == 1) && (address0 == address1))
        mem[address0][28*8+7:28*8] <= #DLY din1[28*8+7:28*8];
    else if ((we0[28] == 1) && (ce0 == 1))
        mem[address0][28*8+7:28*8] <= #DLY din0[28*8+7:28*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[28] == 1))
        mem[address1][28*8+7:28*8] <= #DLY din1[28*8+7:28*8];
end
//write process for byte 29
always @ (posedge clk) begin
    if((we0[29] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[29] == 1) && (address0 == address1))
        mem[address0][29*8+7:29*8] <= #DLY din1[29*8+7:29*8];
    else if ((we0[29] == 1) && (ce0 == 1))
        mem[address0][29*8+7:29*8] <= #DLY din0[29*8+7:29*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[29] == 1))
        mem[address1][29*8+7:29*8] <= #DLY din1[29*8+7:29*8];
end
//write process for byte 30
always @ (posedge clk) begin
    if((we0[30] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[30] == 1) && (address0 == address1))
        mem[address0][30*8+7:30*8] <= #DLY din1[30*8+7:30*8];
    else if ((we0[30] == 1) && (ce0 == 1))
        mem[address0][30*8+7:30*8] <= #DLY din0[30*8+7:30*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[30] == 1))
        mem[address1][30*8+7:30*8] <= #DLY din1[30*8+7:30*8];
end
//write process for byte 31
always @ (posedge clk) begin
    if((we0[31] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[31] == 1) && (address0 == address1))
        mem[address0][31*8+7:31*8] <= #DLY din1[31*8+7:31*8];
    else if ((we0[31] == 1) && (ce0 == 1))
        mem[address0][31*8+7:31*8] <= #DLY din0[31*8+7:31*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[31] == 1))
        mem[address1][31*8+7:31*8] <= #DLY din1[31*8+7:31*8];
end
//write process for byte 32
always @ (posedge clk) begin
    if((we0[32] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[32] == 1) && (address0 == address1))
        mem[address0][32*8+7:32*8] <= #DLY din1[32*8+7:32*8];
    else if ((we0[32] == 1) && (ce0 == 1))
        mem[address0][32*8+7:32*8] <= #DLY din0[32*8+7:32*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[32] == 1))
        mem[address1][32*8+7:32*8] <= #DLY din1[32*8+7:32*8];
end
//write process for byte 33
always @ (posedge clk) begin
    if((we0[33] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[33] == 1) && (address0 == address1))
        mem[address0][33*8+7:33*8] <= #DLY din1[33*8+7:33*8];
    else if ((we0[33] == 1) && (ce0 == 1))
        mem[address0][33*8+7:33*8] <= #DLY din0[33*8+7:33*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[33] == 1))
        mem[address1][33*8+7:33*8] <= #DLY din1[33*8+7:33*8];
end
//write process for byte 34
always @ (posedge clk) begin
    if((we0[34] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[34] == 1) && (address0 == address1))
        mem[address0][34*8+7:34*8] <= #DLY din1[34*8+7:34*8];
    else if ((we0[34] == 1) && (ce0 == 1))
        mem[address0][34*8+7:34*8] <= #DLY din0[34*8+7:34*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[34] == 1))
        mem[address1][34*8+7:34*8] <= #DLY din1[34*8+7:34*8];
end
//write process for byte 35
always @ (posedge clk) begin
    if((we0[35] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[35] == 1) && (address0 == address1))
        mem[address0][35*8+7:35*8] <= #DLY din1[35*8+7:35*8];
    else if ((we0[35] == 1) && (ce0 == 1))
        mem[address0][35*8+7:35*8] <= #DLY din0[35*8+7:35*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[35] == 1))
        mem[address1][35*8+7:35*8] <= #DLY din1[35*8+7:35*8];
end
//write process for byte 36
always @ (posedge clk) begin
    if((we0[36] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[36] == 1) && (address0 == address1))
        mem[address0][36*8+7:36*8] <= #DLY din1[36*8+7:36*8];
    else if ((we0[36] == 1) && (ce0 == 1))
        mem[address0][36*8+7:36*8] <= #DLY din0[36*8+7:36*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[36] == 1))
        mem[address1][36*8+7:36*8] <= #DLY din1[36*8+7:36*8];
end
//write process for byte 37
always @ (posedge clk) begin
    if((we0[37] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[37] == 1) && (address0 == address1))
        mem[address0][37*8+7:37*8] <= #DLY din1[37*8+7:37*8];
    else if ((we0[37] == 1) && (ce0 == 1))
        mem[address0][37*8+7:37*8] <= #DLY din0[37*8+7:37*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[37] == 1))
        mem[address1][37*8+7:37*8] <= #DLY din1[37*8+7:37*8];
end
//write process for byte 38
always @ (posedge clk) begin
    if((we0[38] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[38] == 1) && (address0 == address1))
        mem[address0][38*8+7:38*8] <= #DLY din1[38*8+7:38*8];
    else if ((we0[38] == 1) && (ce0 == 1))
        mem[address0][38*8+7:38*8] <= #DLY din0[38*8+7:38*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[38] == 1))
        mem[address1][38*8+7:38*8] <= #DLY din1[38*8+7:38*8];
end
//write process for byte 39
always @ (posedge clk) begin
    if((we0[39] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[39] == 1) && (address0 == address1))
        mem[address0][39*8+7:39*8] <= #DLY din1[39*8+7:39*8];
    else if ((we0[39] == 1) && (ce0 == 1))
        mem[address0][39*8+7:39*8] <= #DLY din0[39*8+7:39*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[39] == 1))
        mem[address1][39*8+7:39*8] <= #DLY din1[39*8+7:39*8];
end
//write process for byte 40
always @ (posedge clk) begin
    if((we0[40] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[40] == 1) && (address0 == address1))
        mem[address0][40*8+7:40*8] <= #DLY din1[40*8+7:40*8];
    else if ((we0[40] == 1) && (ce0 == 1))
        mem[address0][40*8+7:40*8] <= #DLY din0[40*8+7:40*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[40] == 1))
        mem[address1][40*8+7:40*8] <= #DLY din1[40*8+7:40*8];
end
//write process for byte 41
always @ (posedge clk) begin
    if((we0[41] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[41] == 1) && (address0 == address1))
        mem[address0][41*8+7:41*8] <= #DLY din1[41*8+7:41*8];
    else if ((we0[41] == 1) && (ce0 == 1))
        mem[address0][41*8+7:41*8] <= #DLY din0[41*8+7:41*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[41] == 1))
        mem[address1][41*8+7:41*8] <= #DLY din1[41*8+7:41*8];
end
//write process for byte 42
always @ (posedge clk) begin
    if((we0[42] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[42] == 1) && (address0 == address1))
        mem[address0][42*8+7:42*8] <= #DLY din1[42*8+7:42*8];
    else if ((we0[42] == 1) && (ce0 == 1))
        mem[address0][42*8+7:42*8] <= #DLY din0[42*8+7:42*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[42] == 1))
        mem[address1][42*8+7:42*8] <= #DLY din1[42*8+7:42*8];
end
//write process for byte 43
always @ (posedge clk) begin
    if((we0[43] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[43] == 1) && (address0 == address1))
        mem[address0][43*8+7:43*8] <= #DLY din1[43*8+7:43*8];
    else if ((we0[43] == 1) && (ce0 == 1))
        mem[address0][43*8+7:43*8] <= #DLY din0[43*8+7:43*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[43] == 1))
        mem[address1][43*8+7:43*8] <= #DLY din1[43*8+7:43*8];
end
//write process for byte 44
always @ (posedge clk) begin
    if((we0[44] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[44] == 1) && (address0 == address1))
        mem[address0][44*8+7:44*8] <= #DLY din1[44*8+7:44*8];
    else if ((we0[44] == 1) && (ce0 == 1))
        mem[address0][44*8+7:44*8] <= #DLY din0[44*8+7:44*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[44] == 1))
        mem[address1][44*8+7:44*8] <= #DLY din1[44*8+7:44*8];
end
//write process for byte 45
always @ (posedge clk) begin
    if((we0[45] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[45] == 1) && (address0 == address1))
        mem[address0][45*8+7:45*8] <= #DLY din1[45*8+7:45*8];
    else if ((we0[45] == 1) && (ce0 == 1))
        mem[address0][45*8+7:45*8] <= #DLY din0[45*8+7:45*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[45] == 1))
        mem[address1][45*8+7:45*8] <= #DLY din1[45*8+7:45*8];
end
//write process for byte 46
always @ (posedge clk) begin
    if((we0[46] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[46] == 1) && (address0 == address1))
        mem[address0][46*8+7:46*8] <= #DLY din1[46*8+7:46*8];
    else if ((we0[46] == 1) && (ce0 == 1))
        mem[address0][46*8+7:46*8] <= #DLY din0[46*8+7:46*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[46] == 1))
        mem[address1][46*8+7:46*8] <= #DLY din1[46*8+7:46*8];
end
//write process for byte 47
always @ (posedge clk) begin
    if((we0[47] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[47] == 1) && (address0 == address1))
        mem[address0][47*8+7:47*8] <= #DLY din1[47*8+7:47*8];
    else if ((we0[47] == 1) && (ce0 == 1))
        mem[address0][47*8+7:47*8] <= #DLY din0[47*8+7:47*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[47] == 1))
        mem[address1][47*8+7:47*8] <= #DLY din1[47*8+7:47*8];
end
//write process for byte 48
always @ (posedge clk) begin
    if((we0[48] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[48] == 1) && (address0 == address1))
        mem[address0][48*8+7:48*8] <= #DLY din1[48*8+7:48*8];
    else if ((we0[48] == 1) && (ce0 == 1))
        mem[address0][48*8+7:48*8] <= #DLY din0[48*8+7:48*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[48] == 1))
        mem[address1][48*8+7:48*8] <= #DLY din1[48*8+7:48*8];
end
//write process for byte 49
always @ (posedge clk) begin
    if((we0[49] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[49] == 1) && (address0 == address1))
        mem[address0][49*8+7:49*8] <= #DLY din1[49*8+7:49*8];
    else if ((we0[49] == 1) && (ce0 == 1))
        mem[address0][49*8+7:49*8] <= #DLY din0[49*8+7:49*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[49] == 1))
        mem[address1][49*8+7:49*8] <= #DLY din1[49*8+7:49*8];
end
//write process for byte 50
always @ (posedge clk) begin
    if((we0[50] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[50] == 1) && (address0 == address1))
        mem[address0][50*8+7:50*8] <= #DLY din1[50*8+7:50*8];
    else if ((we0[50] == 1) && (ce0 == 1))
        mem[address0][50*8+7:50*8] <= #DLY din0[50*8+7:50*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[50] == 1))
        mem[address1][50*8+7:50*8] <= #DLY din1[50*8+7:50*8];
end
//write process for byte 51
always @ (posedge clk) begin
    if((we0[51] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[51] == 1) && (address0 == address1))
        mem[address0][51*8+7:51*8] <= #DLY din1[51*8+7:51*8];
    else if ((we0[51] == 1) && (ce0 == 1))
        mem[address0][51*8+7:51*8] <= #DLY din0[51*8+7:51*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[51] == 1))
        mem[address1][51*8+7:51*8] <= #DLY din1[51*8+7:51*8];
end
//write process for byte 52
always @ (posedge clk) begin
    if((we0[52] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[52] == 1) && (address0 == address1))
        mem[address0][52*8+7:52*8] <= #DLY din1[52*8+7:52*8];
    else if ((we0[52] == 1) && (ce0 == 1))
        mem[address0][52*8+7:52*8] <= #DLY din0[52*8+7:52*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[52] == 1))
        mem[address1][52*8+7:52*8] <= #DLY din1[52*8+7:52*8];
end
//write process for byte 53
always @ (posedge clk) begin
    if((we0[53] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[53] == 1) && (address0 == address1))
        mem[address0][53*8+7:53*8] <= #DLY din1[53*8+7:53*8];
    else if ((we0[53] == 1) && (ce0 == 1))
        mem[address0][53*8+7:53*8] <= #DLY din0[53*8+7:53*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[53] == 1))
        mem[address1][53*8+7:53*8] <= #DLY din1[53*8+7:53*8];
end
//write process for byte 54
always @ (posedge clk) begin
    if((we0[54] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[54] == 1) && (address0 == address1))
        mem[address0][54*8+7:54*8] <= #DLY din1[54*8+7:54*8];
    else if ((we0[54] == 1) && (ce0 == 1))
        mem[address0][54*8+7:54*8] <= #DLY din0[54*8+7:54*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[54] == 1))
        mem[address1][54*8+7:54*8] <= #DLY din1[54*8+7:54*8];
end
//write process for byte 55
always @ (posedge clk) begin
    if((we0[55] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[55] == 1) && (address0 == address1))
        mem[address0][55*8+7:55*8] <= #DLY din1[55*8+7:55*8];
    else if ((we0[55] == 1) && (ce0 == 1))
        mem[address0][55*8+7:55*8] <= #DLY din0[55*8+7:55*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[55] == 1))
        mem[address1][55*8+7:55*8] <= #DLY din1[55*8+7:55*8];
end
//write process for byte 56
always @ (posedge clk) begin
    if((we0[56] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[56] == 1) && (address0 == address1))
        mem[address0][56*8+7:56*8] <= #DLY din1[56*8+7:56*8];
    else if ((we0[56] == 1) && (ce0 == 1))
        mem[address0][56*8+7:56*8] <= #DLY din0[56*8+7:56*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[56] == 1))
        mem[address1][56*8+7:56*8] <= #DLY din1[56*8+7:56*8];
end
//write process for byte 57
always @ (posedge clk) begin
    if((we0[57] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[57] == 1) && (address0 == address1))
        mem[address0][57*8+7:57*8] <= #DLY din1[57*8+7:57*8];
    else if ((we0[57] == 1) && (ce0 == 1))
        mem[address0][57*8+7:57*8] <= #DLY din0[57*8+7:57*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[57] == 1))
        mem[address1][57*8+7:57*8] <= #DLY din1[57*8+7:57*8];
end
//write process for byte 58
always @ (posedge clk) begin
    if((we0[58] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[58] == 1) && (address0 == address1))
        mem[address0][58*8+7:58*8] <= #DLY din1[58*8+7:58*8];
    else if ((we0[58] == 1) && (ce0 == 1))
        mem[address0][58*8+7:58*8] <= #DLY din0[58*8+7:58*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[58] == 1))
        mem[address1][58*8+7:58*8] <= #DLY din1[58*8+7:58*8];
end
//write process for byte 59
always @ (posedge clk) begin
    if((we0[59] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[59] == 1) && (address0 == address1))
        mem[address0][59*8+7:59*8] <= #DLY din1[59*8+7:59*8];
    else if ((we0[59] == 1) && (ce0 == 1))
        mem[address0][59*8+7:59*8] <= #DLY din0[59*8+7:59*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[59] == 1))
        mem[address1][59*8+7:59*8] <= #DLY din1[59*8+7:59*8];
end
//write process for byte 60
always @ (posedge clk) begin
    if((we0[60] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[60] == 1) && (address0 == address1))
        mem[address0][60*8+7:60*8] <= #DLY din1[60*8+7:60*8];
    else if ((we0[60] == 1) && (ce0 == 1))
        mem[address0][60*8+7:60*8] <= #DLY din0[60*8+7:60*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[60] == 1))
        mem[address1][60*8+7:60*8] <= #DLY din1[60*8+7:60*8];
end
//write process for byte 61
always @ (posedge clk) begin
    if((we0[61] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[61] == 1) && (address0 == address1))
        mem[address0][61*8+7:61*8] <= #DLY din1[61*8+7:61*8];
    else if ((we0[61] == 1) && (ce0 == 1))
        mem[address0][61*8+7:61*8] <= #DLY din0[61*8+7:61*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[61] == 1))
        mem[address1][61*8+7:61*8] <= #DLY din1[61*8+7:61*8];
end
//write process for byte 62
always @ (posedge clk) begin
    if((we0[62] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[62] == 1) && (address0 == address1))
        mem[address0][62*8+7:62*8] <= #DLY din1[62*8+7:62*8];
    else if ((we0[62] == 1) && (ce0 == 1))
        mem[address0][62*8+7:62*8] <= #DLY din0[62*8+7:62*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[62] == 1))
        mem[address1][62*8+7:62*8] <= #DLY din1[62*8+7:62*8];
end
//write process for byte 63
always @ (posedge clk) begin
    if((we0[63] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[63] == 1) && (address0 == address1))
        mem[address0][63*8+7:63*8] <= #DLY din1[63*8+7:63*8];
    else if ((we0[63] == 1) && (ce0 == 1))
        mem[address0][63*8+7:63*8] <= #DLY din0[63*8+7:63*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[63] == 1))
        mem[address1][63*8+7:63*8] <= #DLY din1[63*8+7:63*8];
end
//write process for byte 64
always @ (posedge clk) begin
    if((we0[64] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[64] == 1) && (address0 == address1))
        mem[address0][64*8+7:64*8] <= #DLY din1[64*8+7:64*8];
    else if ((we0[64] == 1) && (ce0 == 1))
        mem[address0][64*8+7:64*8] <= #DLY din0[64*8+7:64*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[64] == 1))
        mem[address1][64*8+7:64*8] <= #DLY din1[64*8+7:64*8];
end
//write process for byte 65
always @ (posedge clk) begin
    if((we0[65] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[65] == 1) && (address0 == address1))
        mem[address0][65*8+7:65*8] <= #DLY din1[65*8+7:65*8];
    else if ((we0[65] == 1) && (ce0 == 1))
        mem[address0][65*8+7:65*8] <= #DLY din0[65*8+7:65*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[65] == 1))
        mem[address1][65*8+7:65*8] <= #DLY din1[65*8+7:65*8];
end
//write process for byte 66
always @ (posedge clk) begin
    if((we0[66] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[66] == 1) && (address0 == address1))
        mem[address0][66*8+7:66*8] <= #DLY din1[66*8+7:66*8];
    else if ((we0[66] == 1) && (ce0 == 1))
        mem[address0][66*8+7:66*8] <= #DLY din0[66*8+7:66*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[66] == 1))
        mem[address1][66*8+7:66*8] <= #DLY din1[66*8+7:66*8];
end
//write process for byte 67
always @ (posedge clk) begin
    if((we0[67] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[67] == 1) && (address0 == address1))
        mem[address0][67*8+7:67*8] <= #DLY din1[67*8+7:67*8];
    else if ((we0[67] == 1) && (ce0 == 1))
        mem[address0][67*8+7:67*8] <= #DLY din0[67*8+7:67*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[67] == 1))
        mem[address1][67*8+7:67*8] <= #DLY din1[67*8+7:67*8];
end
//write process for byte 68
always @ (posedge clk) begin
    if((we0[68] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[68] == 1) && (address0 == address1))
        mem[address0][68*8+7:68*8] <= #DLY din1[68*8+7:68*8];
    else if ((we0[68] == 1) && (ce0 == 1))
        mem[address0][68*8+7:68*8] <= #DLY din0[68*8+7:68*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[68] == 1))
        mem[address1][68*8+7:68*8] <= #DLY din1[68*8+7:68*8];
end
//write process for byte 69
always @ (posedge clk) begin
    if((we0[69] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[69] == 1) && (address0 == address1))
        mem[address0][69*8+7:69*8] <= #DLY din1[69*8+7:69*8];
    else if ((we0[69] == 1) && (ce0 == 1))
        mem[address0][69*8+7:69*8] <= #DLY din0[69*8+7:69*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[69] == 1))
        mem[address1][69*8+7:69*8] <= #DLY din1[69*8+7:69*8];
end
//write process for byte 70
always @ (posedge clk) begin
    if((we0[70] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[70] == 1) && (address0 == address1))
        mem[address0][70*8+7:70*8] <= #DLY din1[70*8+7:70*8];
    else if ((we0[70] == 1) && (ce0 == 1))
        mem[address0][70*8+7:70*8] <= #DLY din0[70*8+7:70*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[70] == 1))
        mem[address1][70*8+7:70*8] <= #DLY din1[70*8+7:70*8];
end
//write process for byte 71
always @ (posedge clk) begin
    if((we0[71] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[71] == 1) && (address0 == address1))
        mem[address0][71*8+7:71*8] <= #DLY din1[71*8+7:71*8];
    else if ((we0[71] == 1) && (ce0 == 1))
        mem[address0][71*8+7:71*8] <= #DLY din0[71*8+7:71*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[71] == 1))
        mem[address1][71*8+7:71*8] <= #DLY din1[71*8+7:71*8];
end
//write process for byte 72
always @ (posedge clk) begin
    if((we0[72] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[72] == 1) && (address0 == address1))
        mem[address0][72*8+7:72*8] <= #DLY din1[72*8+7:72*8];
    else if ((we0[72] == 1) && (ce0 == 1))
        mem[address0][72*8+7:72*8] <= #DLY din0[72*8+7:72*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[72] == 1))
        mem[address1][72*8+7:72*8] <= #DLY din1[72*8+7:72*8];
end
//write process for byte 73
always @ (posedge clk) begin
    if((we0[73] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[73] == 1) && (address0 == address1))
        mem[address0][73*8+7:73*8] <= #DLY din1[73*8+7:73*8];
    else if ((we0[73] == 1) && (ce0 == 1))
        mem[address0][73*8+7:73*8] <= #DLY din0[73*8+7:73*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[73] == 1))
        mem[address1][73*8+7:73*8] <= #DLY din1[73*8+7:73*8];
end
//write process for byte 74
always @ (posedge clk) begin
    if((we0[74] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[74] == 1) && (address0 == address1))
        mem[address0][74*8+7:74*8] <= #DLY din1[74*8+7:74*8];
    else if ((we0[74] == 1) && (ce0 == 1))
        mem[address0][74*8+7:74*8] <= #DLY din0[74*8+7:74*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[74] == 1))
        mem[address1][74*8+7:74*8] <= #DLY din1[74*8+7:74*8];
end
//write process for byte 75
always @ (posedge clk) begin
    if((we0[75] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[75] == 1) && (address0 == address1))
        mem[address0][75*8+7:75*8] <= #DLY din1[75*8+7:75*8];
    else if ((we0[75] == 1) && (ce0 == 1))
        mem[address0][75*8+7:75*8] <= #DLY din0[75*8+7:75*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[75] == 1))
        mem[address1][75*8+7:75*8] <= #DLY din1[75*8+7:75*8];
end
//write process for byte 76
always @ (posedge clk) begin
    if((we0[76] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[76] == 1) && (address0 == address1))
        mem[address0][76*8+7:76*8] <= #DLY din1[76*8+7:76*8];
    else if ((we0[76] == 1) && (ce0 == 1))
        mem[address0][76*8+7:76*8] <= #DLY din0[76*8+7:76*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[76] == 1))
        mem[address1][76*8+7:76*8] <= #DLY din1[76*8+7:76*8];
end
//write process for byte 77
always @ (posedge clk) begin
    if((we0[77] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[77] == 1) && (address0 == address1))
        mem[address0][77*8+7:77*8] <= #DLY din1[77*8+7:77*8];
    else if ((we0[77] == 1) && (ce0 == 1))
        mem[address0][77*8+7:77*8] <= #DLY din0[77*8+7:77*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[77] == 1))
        mem[address1][77*8+7:77*8] <= #DLY din1[77*8+7:77*8];
end
//write process for byte 78
always @ (posedge clk) begin
    if((we0[78] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[78] == 1) && (address0 == address1))
        mem[address0][78*8+7:78*8] <= #DLY din1[78*8+7:78*8];
    else if ((we0[78] == 1) && (ce0 == 1))
        mem[address0][78*8+7:78*8] <= #DLY din0[78*8+7:78*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[78] == 1))
        mem[address1][78*8+7:78*8] <= #DLY din1[78*8+7:78*8];
end
//write process for byte 79
always @ (posedge clk) begin
    if((we0[79] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[79] == 1) && (address0 == address1))
        mem[address0][79*8+7:79*8] <= #DLY din1[79*8+7:79*8];
    else if ((we0[79] == 1) && (ce0 == 1))
        mem[address0][79*8+7:79*8] <= #DLY din0[79*8+7:79*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[79] == 1))
        mem[address1][79*8+7:79*8] <= #DLY din1[79*8+7:79*8];
end
//write process for byte 80
always @ (posedge clk) begin
    if((we0[80] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[80] == 1) && (address0 == address1))
        mem[address0][80*8+7:80*8] <= #DLY din1[80*8+7:80*8];
    else if ((we0[80] == 1) && (ce0 == 1))
        mem[address0][80*8+7:80*8] <= #DLY din0[80*8+7:80*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[80] == 1))
        mem[address1][80*8+7:80*8] <= #DLY din1[80*8+7:80*8];
end
//write process for byte 81
always @ (posedge clk) begin
    if((we0[81] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[81] == 1) && (address0 == address1))
        mem[address0][81*8+7:81*8] <= #DLY din1[81*8+7:81*8];
    else if ((we0[81] == 1) && (ce0 == 1))
        mem[address0][81*8+7:81*8] <= #DLY din0[81*8+7:81*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[81] == 1))
        mem[address1][81*8+7:81*8] <= #DLY din1[81*8+7:81*8];
end
//write process for byte 82
always @ (posedge clk) begin
    if((we0[82] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[82] == 1) && (address0 == address1))
        mem[address0][82*8+7:82*8] <= #DLY din1[82*8+7:82*8];
    else if ((we0[82] == 1) && (ce0 == 1))
        mem[address0][82*8+7:82*8] <= #DLY din0[82*8+7:82*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[82] == 1))
        mem[address1][82*8+7:82*8] <= #DLY din1[82*8+7:82*8];
end
//write process for byte 83
always @ (posedge clk) begin
    if((we0[83] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[83] == 1) && (address0 == address1))
        mem[address0][83*8+7:83*8] <= #DLY din1[83*8+7:83*8];
    else if ((we0[83] == 1) && (ce0 == 1))
        mem[address0][83*8+7:83*8] <= #DLY din0[83*8+7:83*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[83] == 1))
        mem[address1][83*8+7:83*8] <= #DLY din1[83*8+7:83*8];
end
//write process for byte 84
always @ (posedge clk) begin
    if((we0[84] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[84] == 1) && (address0 == address1))
        mem[address0][84*8+7:84*8] <= #DLY din1[84*8+7:84*8];
    else if ((we0[84] == 1) && (ce0 == 1))
        mem[address0][84*8+7:84*8] <= #DLY din0[84*8+7:84*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[84] == 1))
        mem[address1][84*8+7:84*8] <= #DLY din1[84*8+7:84*8];
end
//write process for byte 85
always @ (posedge clk) begin
    if((we0[85] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[85] == 1) && (address0 == address1))
        mem[address0][85*8+7:85*8] <= #DLY din1[85*8+7:85*8];
    else if ((we0[85] == 1) && (ce0 == 1))
        mem[address0][85*8+7:85*8] <= #DLY din0[85*8+7:85*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[85] == 1))
        mem[address1][85*8+7:85*8] <= #DLY din1[85*8+7:85*8];
end
//write process for byte 86
always @ (posedge clk) begin
    if((we0[86] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[86] == 1) && (address0 == address1))
        mem[address0][86*8+7:86*8] <= #DLY din1[86*8+7:86*8];
    else if ((we0[86] == 1) && (ce0 == 1))
        mem[address0][86*8+7:86*8] <= #DLY din0[86*8+7:86*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[86] == 1))
        mem[address1][86*8+7:86*8] <= #DLY din1[86*8+7:86*8];
end
//write process for byte 87
always @ (posedge clk) begin
    if((we0[87] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[87] == 1) && (address0 == address1))
        mem[address0][87*8+7:87*8] <= #DLY din1[87*8+7:87*8];
    else if ((we0[87] == 1) && (ce0 == 1))
        mem[address0][87*8+7:87*8] <= #DLY din0[87*8+7:87*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[87] == 1))
        mem[address1][87*8+7:87*8] <= #DLY din1[87*8+7:87*8];
end
//write process for byte 88
always @ (posedge clk) begin
    if((we0[88] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[88] == 1) && (address0 == address1))
        mem[address0][88*8+7:88*8] <= #DLY din1[88*8+7:88*8];
    else if ((we0[88] == 1) && (ce0 == 1))
        mem[address0][88*8+7:88*8] <= #DLY din0[88*8+7:88*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[88] == 1))
        mem[address1][88*8+7:88*8] <= #DLY din1[88*8+7:88*8];
end
//write process for byte 89
always @ (posedge clk) begin
    if((we0[89] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[89] == 1) && (address0 == address1))
        mem[address0][89*8+7:89*8] <= #DLY din1[89*8+7:89*8];
    else if ((we0[89] == 1) && (ce0 == 1))
        mem[address0][89*8+7:89*8] <= #DLY din0[89*8+7:89*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[89] == 1))
        mem[address1][89*8+7:89*8] <= #DLY din1[89*8+7:89*8];
end
//write process for byte 90
always @ (posedge clk) begin
    if((we0[90] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[90] == 1) && (address0 == address1))
        mem[address0][90*8+7:90*8] <= #DLY din1[90*8+7:90*8];
    else if ((we0[90] == 1) && (ce0 == 1))
        mem[address0][90*8+7:90*8] <= #DLY din0[90*8+7:90*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[90] == 1))
        mem[address1][90*8+7:90*8] <= #DLY din1[90*8+7:90*8];
end
//write process for byte 91
always @ (posedge clk) begin
    if((we0[91] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[91] == 1) && (address0 == address1))
        mem[address0][91*8+7:91*8] <= #DLY din1[91*8+7:91*8];
    else if ((we0[91] == 1) && (ce0 == 1))
        mem[address0][91*8+7:91*8] <= #DLY din0[91*8+7:91*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[91] == 1))
        mem[address1][91*8+7:91*8] <= #DLY din1[91*8+7:91*8];
end
//write process for byte 92
always @ (posedge clk) begin
    if((we0[92] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[92] == 1) && (address0 == address1))
        mem[address0][92*8+7:92*8] <= #DLY din1[92*8+7:92*8];
    else if ((we0[92] == 1) && (ce0 == 1))
        mem[address0][92*8+7:92*8] <= #DLY din0[92*8+7:92*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[92] == 1))
        mem[address1][92*8+7:92*8] <= #DLY din1[92*8+7:92*8];
end
//write process for byte 93
always @ (posedge clk) begin
    if((we0[93] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[93] == 1) && (address0 == address1))
        mem[address0][93*8+7:93*8] <= #DLY din1[93*8+7:93*8];
    else if ((we0[93] == 1) && (ce0 == 1))
        mem[address0][93*8+7:93*8] <= #DLY din0[93*8+7:93*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[93] == 1))
        mem[address1][93*8+7:93*8] <= #DLY din1[93*8+7:93*8];
end
//write process for byte 94
always @ (posedge clk) begin
    if((we0[94] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[94] == 1) && (address0 == address1))
        mem[address0][94*8+7:94*8] <= #DLY din1[94*8+7:94*8];
    else if ((we0[94] == 1) && (ce0 == 1))
        mem[address0][94*8+7:94*8] <= #DLY din0[94*8+7:94*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[94] == 1))
        mem[address1][94*8+7:94*8] <= #DLY din1[94*8+7:94*8];
end
//write process for byte 95
always @ (posedge clk) begin
    if((we0[95] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[95] == 1) && (address0 == address1))
        mem[address0][95*8+7:95*8] <= #DLY din1[95*8+7:95*8];
    else if ((we0[95] == 1) && (ce0 == 1))
        mem[address0][95*8+7:95*8] <= #DLY din0[95*8+7:95*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[95] == 1))
        mem[address1][95*8+7:95*8] <= #DLY din1[95*8+7:95*8];
end
//write process for byte 96
always @ (posedge clk) begin
    if((we0[96] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[96] == 1) && (address0 == address1))
        mem[address0][96*8+7:96*8] <= #DLY din1[96*8+7:96*8];
    else if ((we0[96] == 1) && (ce0 == 1))
        mem[address0][96*8+7:96*8] <= #DLY din0[96*8+7:96*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[96] == 1))
        mem[address1][96*8+7:96*8] <= #DLY din1[96*8+7:96*8];
end
//write process for byte 97
always @ (posedge clk) begin
    if((we0[97] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[97] == 1) && (address0 == address1))
        mem[address0][97*8+7:97*8] <= #DLY din1[97*8+7:97*8];
    else if ((we0[97] == 1) && (ce0 == 1))
        mem[address0][97*8+7:97*8] <= #DLY din0[97*8+7:97*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[97] == 1))
        mem[address1][97*8+7:97*8] <= #DLY din1[97*8+7:97*8];
end
//write process for byte 98
always @ (posedge clk) begin
    if((we0[98] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[98] == 1) && (address0 == address1))
        mem[address0][98*8+7:98*8] <= #DLY din1[98*8+7:98*8];
    else if ((we0[98] == 1) && (ce0 == 1))
        mem[address0][98*8+7:98*8] <= #DLY din0[98*8+7:98*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[98] == 1))
        mem[address1][98*8+7:98*8] <= #DLY din1[98*8+7:98*8];
end
//write process for byte 99
always @ (posedge clk) begin
    if((we0[99] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[99] == 1) && (address0 == address1))
        mem[address0][99*8+7:99*8] <= #DLY din1[99*8+7:99*8];
    else if ((we0[99] == 1) && (ce0 == 1))
        mem[address0][99*8+7:99*8] <= #DLY din0[99*8+7:99*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[99] == 1))
        mem[address1][99*8+7:99*8] <= #DLY din1[99*8+7:99*8];
end
//write process for byte 100
always @ (posedge clk) begin
    if((we0[100] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[100] == 1) && (address0 == address1))
        mem[address0][100*8+7:100*8] <= #DLY din1[100*8+7:100*8];
    else if ((we0[100] == 1) && (ce0 == 1))
        mem[address0][100*8+7:100*8] <= #DLY din0[100*8+7:100*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[100] == 1))
        mem[address1][100*8+7:100*8] <= #DLY din1[100*8+7:100*8];
end
//write process for byte 101
always @ (posedge clk) begin
    if((we0[101] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[101] == 1) && (address0 == address1))
        mem[address0][101*8+7:101*8] <= #DLY din1[101*8+7:101*8];
    else if ((we0[101] == 1) && (ce0 == 1))
        mem[address0][101*8+7:101*8] <= #DLY din0[101*8+7:101*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[101] == 1))
        mem[address1][101*8+7:101*8] <= #DLY din1[101*8+7:101*8];
end
//write process for byte 102
always @ (posedge clk) begin
    if((we0[102] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[102] == 1) && (address0 == address1))
        mem[address0][102*8+7:102*8] <= #DLY din1[102*8+7:102*8];
    else if ((we0[102] == 1) && (ce0 == 1))
        mem[address0][102*8+7:102*8] <= #DLY din0[102*8+7:102*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[102] == 1))
        mem[address1][102*8+7:102*8] <= #DLY din1[102*8+7:102*8];
end
//write process for byte 103
always @ (posedge clk) begin
    if((we0[103] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[103] == 1) && (address0 == address1))
        mem[address0][103*8+7:103*8] <= #DLY din1[103*8+7:103*8];
    else if ((we0[103] == 1) && (ce0 == 1))
        mem[address0][103*8+7:103*8] <= #DLY din0[103*8+7:103*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[103] == 1))
        mem[address1][103*8+7:103*8] <= #DLY din1[103*8+7:103*8];
end
//write process for byte 104
always @ (posedge clk) begin
    if((we0[104] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[104] == 1) && (address0 == address1))
        mem[address0][104*8+7:104*8] <= #DLY din1[104*8+7:104*8];
    else if ((we0[104] == 1) && (ce0 == 1))
        mem[address0][104*8+7:104*8] <= #DLY din0[104*8+7:104*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[104] == 1))
        mem[address1][104*8+7:104*8] <= #DLY din1[104*8+7:104*8];
end
//write process for byte 105
always @ (posedge clk) begin
    if((we0[105] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[105] == 1) && (address0 == address1))
        mem[address0][105*8+7:105*8] <= #DLY din1[105*8+7:105*8];
    else if ((we0[105] == 1) && (ce0 == 1))
        mem[address0][105*8+7:105*8] <= #DLY din0[105*8+7:105*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[105] == 1))
        mem[address1][105*8+7:105*8] <= #DLY din1[105*8+7:105*8];
end
//write process for byte 106
always @ (posedge clk) begin
    if((we0[106] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[106] == 1) && (address0 == address1))
        mem[address0][106*8+7:106*8] <= #DLY din1[106*8+7:106*8];
    else if ((we0[106] == 1) && (ce0 == 1))
        mem[address0][106*8+7:106*8] <= #DLY din0[106*8+7:106*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[106] == 1))
        mem[address1][106*8+7:106*8] <= #DLY din1[106*8+7:106*8];
end
//write process for byte 107
always @ (posedge clk) begin
    if((we0[107] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[107] == 1) && (address0 == address1))
        mem[address0][107*8+7:107*8] <= #DLY din1[107*8+7:107*8];
    else if ((we0[107] == 1) && (ce0 == 1))
        mem[address0][107*8+7:107*8] <= #DLY din0[107*8+7:107*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[107] == 1))
        mem[address1][107*8+7:107*8] <= #DLY din1[107*8+7:107*8];
end
//write process for byte 108
always @ (posedge clk) begin
    if((we0[108] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[108] == 1) && (address0 == address1))
        mem[address0][108*8+7:108*8] <= #DLY din1[108*8+7:108*8];
    else if ((we0[108] == 1) && (ce0 == 1))
        mem[address0][108*8+7:108*8] <= #DLY din0[108*8+7:108*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[108] == 1))
        mem[address1][108*8+7:108*8] <= #DLY din1[108*8+7:108*8];
end
//write process for byte 109
always @ (posedge clk) begin
    if((we0[109] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[109] == 1) && (address0 == address1))
        mem[address0][109*8+7:109*8] <= #DLY din1[109*8+7:109*8];
    else if ((we0[109] == 1) && (ce0 == 1))
        mem[address0][109*8+7:109*8] <= #DLY din0[109*8+7:109*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[109] == 1))
        mem[address1][109*8+7:109*8] <= #DLY din1[109*8+7:109*8];
end
//write process for byte 110
always @ (posedge clk) begin
    if((we0[110] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[110] == 1) && (address0 == address1))
        mem[address0][110*8+7:110*8] <= #DLY din1[110*8+7:110*8];
    else if ((we0[110] == 1) && (ce0 == 1))
        mem[address0][110*8+7:110*8] <= #DLY din0[110*8+7:110*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[110] == 1))
        mem[address1][110*8+7:110*8] <= #DLY din1[110*8+7:110*8];
end
//write process for byte 111
always @ (posedge clk) begin
    if((we0[111] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[111] == 1) && (address0 == address1))
        mem[address0][111*8+7:111*8] <= #DLY din1[111*8+7:111*8];
    else if ((we0[111] == 1) && (ce0 == 1))
        mem[address0][111*8+7:111*8] <= #DLY din0[111*8+7:111*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[111] == 1))
        mem[address1][111*8+7:111*8] <= #DLY din1[111*8+7:111*8];
end
//write process for byte 112
always @ (posedge clk) begin
    if((we0[112] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[112] == 1) && (address0 == address1))
        mem[address0][112*8+7:112*8] <= #DLY din1[112*8+7:112*8];
    else if ((we0[112] == 1) && (ce0 == 1))
        mem[address0][112*8+7:112*8] <= #DLY din0[112*8+7:112*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[112] == 1))
        mem[address1][112*8+7:112*8] <= #DLY din1[112*8+7:112*8];
end
//write process for byte 113
always @ (posedge clk) begin
    if((we0[113] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[113] == 1) && (address0 == address1))
        mem[address0][113*8+7:113*8] <= #DLY din1[113*8+7:113*8];
    else if ((we0[113] == 1) && (ce0 == 1))
        mem[address0][113*8+7:113*8] <= #DLY din0[113*8+7:113*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[113] == 1))
        mem[address1][113*8+7:113*8] <= #DLY din1[113*8+7:113*8];
end
//write process for byte 114
always @ (posedge clk) begin
    if((we0[114] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[114] == 1) && (address0 == address1))
        mem[address0][114*8+7:114*8] <= #DLY din1[114*8+7:114*8];
    else if ((we0[114] == 1) && (ce0 == 1))
        mem[address0][114*8+7:114*8] <= #DLY din0[114*8+7:114*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[114] == 1))
        mem[address1][114*8+7:114*8] <= #DLY din1[114*8+7:114*8];
end
//write process for byte 115
always @ (posedge clk) begin
    if((we0[115] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[115] == 1) && (address0 == address1))
        mem[address0][115*8+7:115*8] <= #DLY din1[115*8+7:115*8];
    else if ((we0[115] == 1) && (ce0 == 1))
        mem[address0][115*8+7:115*8] <= #DLY din0[115*8+7:115*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[115] == 1))
        mem[address1][115*8+7:115*8] <= #DLY din1[115*8+7:115*8];
end
//write process for byte 116
always @ (posedge clk) begin
    if((we0[116] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[116] == 1) && (address0 == address1))
        mem[address0][116*8+7:116*8] <= #DLY din1[116*8+7:116*8];
    else if ((we0[116] == 1) && (ce0 == 1))
        mem[address0][116*8+7:116*8] <= #DLY din0[116*8+7:116*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[116] == 1))
        mem[address1][116*8+7:116*8] <= #DLY din1[116*8+7:116*8];
end
//write process for byte 117
always @ (posedge clk) begin
    if((we0[117] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[117] == 1) && (address0 == address1))
        mem[address0][117*8+7:117*8] <= #DLY din1[117*8+7:117*8];
    else if ((we0[117] == 1) && (ce0 == 1))
        mem[address0][117*8+7:117*8] <= #DLY din0[117*8+7:117*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[117] == 1))
        mem[address1][117*8+7:117*8] <= #DLY din1[117*8+7:117*8];
end
//write process for byte 118
always @ (posedge clk) begin
    if((we0[118] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[118] == 1) && (address0 == address1))
        mem[address0][118*8+7:118*8] <= #DLY din1[118*8+7:118*8];
    else if ((we0[118] == 1) && (ce0 == 1))
        mem[address0][118*8+7:118*8] <= #DLY din0[118*8+7:118*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[118] == 1))
        mem[address1][118*8+7:118*8] <= #DLY din1[118*8+7:118*8];
end
//write process for byte 119
always @ (posedge clk) begin
    if((we0[119] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[119] == 1) && (address0 == address1))
        mem[address0][119*8+7:119*8] <= #DLY din1[119*8+7:119*8];
    else if ((we0[119] == 1) && (ce0 == 1))
        mem[address0][119*8+7:119*8] <= #DLY din0[119*8+7:119*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[119] == 1))
        mem[address1][119*8+7:119*8] <= #DLY din1[119*8+7:119*8];
end
//write process for byte 120
always @ (posedge clk) begin
    if((we0[120] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[120] == 1) && (address0 == address1))
        mem[address0][120*8+7:120*8] <= #DLY din1[120*8+7:120*8];
    else if ((we0[120] == 1) && (ce0 == 1))
        mem[address0][120*8+7:120*8] <= #DLY din0[120*8+7:120*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[120] == 1))
        mem[address1][120*8+7:120*8] <= #DLY din1[120*8+7:120*8];
end
//write process for byte 121
always @ (posedge clk) begin
    if((we0[121] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[121] == 1) && (address0 == address1))
        mem[address0][121*8+7:121*8] <= #DLY din1[121*8+7:121*8];
    else if ((we0[121] == 1) && (ce0 == 1))
        mem[address0][121*8+7:121*8] <= #DLY din0[121*8+7:121*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[121] == 1))
        mem[address1][121*8+7:121*8] <= #DLY din1[121*8+7:121*8];
end
//write process for byte 122
always @ (posedge clk) begin
    if((we0[122] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[122] == 1) && (address0 == address1))
        mem[address0][122*8+7:122*8] <= #DLY din1[122*8+7:122*8];
    else if ((we0[122] == 1) && (ce0 == 1))
        mem[address0][122*8+7:122*8] <= #DLY din0[122*8+7:122*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[122] == 1))
        mem[address1][122*8+7:122*8] <= #DLY din1[122*8+7:122*8];
end
//write process for byte 123
always @ (posedge clk) begin
    if((we0[123] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[123] == 1) && (address0 == address1))
        mem[address0][123*8+7:123*8] <= #DLY din1[123*8+7:123*8];
    else if ((we0[123] == 1) && (ce0 == 1))
        mem[address0][123*8+7:123*8] <= #DLY din0[123*8+7:123*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[123] == 1))
        mem[address1][123*8+7:123*8] <= #DLY din1[123*8+7:123*8];
end
//write process for byte 124
always @ (posedge clk) begin
    if((we0[124] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[124] == 1) && (address0 == address1))
        mem[address0][124*8+7:124*8] <= #DLY din1[124*8+7:124*8];
    else if ((we0[124] == 1) && (ce0 == 1))
        mem[address0][124*8+7:124*8] <= #DLY din0[124*8+7:124*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[124] == 1))
        mem[address1][124*8+7:124*8] <= #DLY din1[124*8+7:124*8];
end
//write process for byte 125
always @ (posedge clk) begin
    if((we0[125] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[125] == 1) && (address0 == address1))
        mem[address0][125*8+7:125*8] <= #DLY din1[125*8+7:125*8];
    else if ((we0[125] == 1) && (ce0 == 1))
        mem[address0][125*8+7:125*8] <= #DLY din0[125*8+7:125*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[125] == 1))
        mem[address1][125*8+7:125*8] <= #DLY din1[125*8+7:125*8];
end
//write process for byte 126
always @ (posedge clk) begin
    if((we0[126] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[126] == 1) && (address0 == address1))
        mem[address0][126*8+7:126*8] <= #DLY din1[126*8+7:126*8];
    else if ((we0[126] == 1) && (ce0 == 1))
        mem[address0][126*8+7:126*8] <= #DLY din0[126*8+7:126*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[126] == 1))
        mem[address1][126*8+7:126*8] <= #DLY din1[126*8+7:126*8];
end
//write process for byte 127
always @ (posedge clk) begin
    if((we0[127] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[127] == 1) && (address0 == address1))
        mem[address0][127*8+7:127*8] <= #DLY din1[127*8+7:127*8];
    else if ((we0[127] == 1) && (ce0 == 1))
        mem[address0][127*8+7:127*8] <= #DLY din0[127*8+7:127*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[127] == 1))
        mem[address1][127*8+7:127*8] <= #DLY din1[127*8+7:127*8];
end
//write process for byte 128
always @ (posedge clk) begin
    if((we0[128] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[128] == 1) && (address0 == address1))
        mem[address0][128*8+7:128*8] <= #DLY din1[128*8+7:128*8];
    else if ((we0[128] == 1) && (ce0 == 1))
        mem[address0][128*8+7:128*8] <= #DLY din0[128*8+7:128*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[128] == 1))
        mem[address1][128*8+7:128*8] <= #DLY din1[128*8+7:128*8];
end
//write process for byte 129
always @ (posedge clk) begin
    if((we0[129] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[129] == 1) && (address0 == address1))
        mem[address0][129*8+7:129*8] <= #DLY din1[129*8+7:129*8];
    else if ((we0[129] == 1) && (ce0 == 1))
        mem[address0][129*8+7:129*8] <= #DLY din0[129*8+7:129*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[129] == 1))
        mem[address1][129*8+7:129*8] <= #DLY din1[129*8+7:129*8];
end
//write process for byte 130
always @ (posedge clk) begin
    if((we0[130] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[130] == 1) && (address0 == address1))
        mem[address0][130*8+7:130*8] <= #DLY din1[130*8+7:130*8];
    else if ((we0[130] == 1) && (ce0 == 1))
        mem[address0][130*8+7:130*8] <= #DLY din0[130*8+7:130*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[130] == 1))
        mem[address1][130*8+7:130*8] <= #DLY din1[130*8+7:130*8];
end
//write process for byte 131
always @ (posedge clk) begin
    if((we0[131] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[131] == 1) && (address0 == address1))
        mem[address0][131*8+7:131*8] <= #DLY din1[131*8+7:131*8];
    else if ((we0[131] == 1) && (ce0 == 1))
        mem[address0][131*8+7:131*8] <= #DLY din0[131*8+7:131*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[131] == 1))
        mem[address1][131*8+7:131*8] <= #DLY din1[131*8+7:131*8];
end
//write process for byte 132
always @ (posedge clk) begin
    if((we0[132] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[132] == 1) && (address0 == address1))
        mem[address0][132*8+7:132*8] <= #DLY din1[132*8+7:132*8];
    else if ((we0[132] == 1) && (ce0 == 1))
        mem[address0][132*8+7:132*8] <= #DLY din0[132*8+7:132*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[132] == 1))
        mem[address1][132*8+7:132*8] <= #DLY din1[132*8+7:132*8];
end
//write process for byte 133
always @ (posedge clk) begin
    if((we0[133] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[133] == 1) && (address0 == address1))
        mem[address0][133*8+7:133*8] <= #DLY din1[133*8+7:133*8];
    else if ((we0[133] == 1) && (ce0 == 1))
        mem[address0][133*8+7:133*8] <= #DLY din0[133*8+7:133*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[133] == 1))
        mem[address1][133*8+7:133*8] <= #DLY din1[133*8+7:133*8];
end
//write process for byte 134
always @ (posedge clk) begin
    if((we0[134] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[134] == 1) && (address0 == address1))
        mem[address0][134*8+7:134*8] <= #DLY din1[134*8+7:134*8];
    else if ((we0[134] == 1) && (ce0 == 1))
        mem[address0][134*8+7:134*8] <= #DLY din0[134*8+7:134*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[134] == 1))
        mem[address1][134*8+7:134*8] <= #DLY din1[134*8+7:134*8];
end
//write process for byte 135
always @ (posedge clk) begin
    if((we0[135] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[135] == 1) && (address0 == address1))
        mem[address0][135*8+7:135*8] <= #DLY din1[135*8+7:135*8];
    else if ((we0[135] == 1) && (ce0 == 1))
        mem[address0][135*8+7:135*8] <= #DLY din0[135*8+7:135*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[135] == 1))
        mem[address1][135*8+7:135*8] <= #DLY din1[135*8+7:135*8];
end
//write process for byte 136
always @ (posedge clk) begin
    if((we0[136] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[136] == 1) && (address0 == address1))
        mem[address0][136*8+7:136*8] <= #DLY din1[136*8+7:136*8];
    else if ((we0[136] == 1) && (ce0 == 1))
        mem[address0][136*8+7:136*8] <= #DLY din0[136*8+7:136*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[136] == 1))
        mem[address1][136*8+7:136*8] <= #DLY din1[136*8+7:136*8];
end
//write process for byte 137
always @ (posedge clk) begin
    if((we0[137] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[137] == 1) && (address0 == address1))
        mem[address0][137*8+7:137*8] <= #DLY din1[137*8+7:137*8];
    else if ((we0[137] == 1) && (ce0 == 1))
        mem[address0][137*8+7:137*8] <= #DLY din0[137*8+7:137*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[137] == 1))
        mem[address1][137*8+7:137*8] <= #DLY din1[137*8+7:137*8];
end
//write process for byte 138
always @ (posedge clk) begin
    if((we0[138] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[138] == 1) && (address0 == address1))
        mem[address0][138*8+7:138*8] <= #DLY din1[138*8+7:138*8];
    else if ((we0[138] == 1) && (ce0 == 1))
        mem[address0][138*8+7:138*8] <= #DLY din0[138*8+7:138*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[138] == 1))
        mem[address1][138*8+7:138*8] <= #DLY din1[138*8+7:138*8];
end
//write process for byte 139
always @ (posedge clk) begin
    if((we0[139] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[139] == 1) && (address0 == address1))
        mem[address0][139*8+7:139*8] <= #DLY din1[139*8+7:139*8];
    else if ((we0[139] == 1) && (ce0 == 1))
        mem[address0][139*8+7:139*8] <= #DLY din0[139*8+7:139*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[139] == 1))
        mem[address1][139*8+7:139*8] <= #DLY din1[139*8+7:139*8];
end
//write process for byte 140
always @ (posedge clk) begin
    if((we0[140] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[140] == 1) && (address0 == address1))
        mem[address0][140*8+7:140*8] <= #DLY din1[140*8+7:140*8];
    else if ((we0[140] == 1) && (ce0 == 1))
        mem[address0][140*8+7:140*8] <= #DLY din0[140*8+7:140*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[140] == 1))
        mem[address1][140*8+7:140*8] <= #DLY din1[140*8+7:140*8];
end
//write process for byte 141
always @ (posedge clk) begin
    if((we0[141] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[141] == 1) && (address0 == address1))
        mem[address0][141*8+7:141*8] <= #DLY din1[141*8+7:141*8];
    else if ((we0[141] == 1) && (ce0 == 1))
        mem[address0][141*8+7:141*8] <= #DLY din0[141*8+7:141*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[141] == 1))
        mem[address1][141*8+7:141*8] <= #DLY din1[141*8+7:141*8];
end
//write process for byte 142
always @ (posedge clk) begin
    if((we0[142] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[142] == 1) && (address0 == address1))
        mem[address0][142*8+7:142*8] <= #DLY din1[142*8+7:142*8];
    else if ((we0[142] == 1) && (ce0 == 1))
        mem[address0][142*8+7:142*8] <= #DLY din0[142*8+7:142*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[142] == 1))
        mem[address1][142*8+7:142*8] <= #DLY din1[142*8+7:142*8];
end
//write process for byte 143
always @ (posedge clk) begin
    if((we0[143] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[143] == 1) && (address0 == address1))
        mem[address0][143*8+7:143*8] <= #DLY din1[143*8+7:143*8];
    else if ((we0[143] == 1) && (ce0 == 1))
        mem[address0][143*8+7:143*8] <= #DLY din0[143*8+7:143*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[143] == 1))
        mem[address1][143*8+7:143*8] <= #DLY din1[143*8+7:143*8];
end
//write process for byte 144
always @ (posedge clk) begin
    if((we0[144] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[144] == 1) && (address0 == address1))
        mem[address0][144*8+7:144*8] <= #DLY din1[144*8+7:144*8];
    else if ((we0[144] == 1) && (ce0 == 1))
        mem[address0][144*8+7:144*8] <= #DLY din0[144*8+7:144*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[144] == 1))
        mem[address1][144*8+7:144*8] <= #DLY din1[144*8+7:144*8];
end
//write process for byte 145
always @ (posedge clk) begin
    if((we0[145] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[145] == 1) && (address0 == address1))
        mem[address0][145*8+7:145*8] <= #DLY din1[145*8+7:145*8];
    else if ((we0[145] == 1) && (ce0 == 1))
        mem[address0][145*8+7:145*8] <= #DLY din0[145*8+7:145*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[145] == 1))
        mem[address1][145*8+7:145*8] <= #DLY din1[145*8+7:145*8];
end
//write process for byte 146
always @ (posedge clk) begin
    if((we0[146] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[146] == 1) && (address0 == address1))
        mem[address0][146*8+7:146*8] <= #DLY din1[146*8+7:146*8];
    else if ((we0[146] == 1) && (ce0 == 1))
        mem[address0][146*8+7:146*8] <= #DLY din0[146*8+7:146*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[146] == 1))
        mem[address1][146*8+7:146*8] <= #DLY din1[146*8+7:146*8];
end
//write process for byte 147
always @ (posedge clk) begin
    if((we0[147] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[147] == 1) && (address0 == address1))
        mem[address0][147*8+7:147*8] <= #DLY din1[147*8+7:147*8];
    else if ((we0[147] == 1) && (ce0 == 1))
        mem[address0][147*8+7:147*8] <= #DLY din0[147*8+7:147*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[147] == 1))
        mem[address1][147*8+7:147*8] <= #DLY din1[147*8+7:147*8];
end
//write process for byte 148
always @ (posedge clk) begin
    if((we0[148] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[148] == 1) && (address0 == address1))
        mem[address0][148*8+7:148*8] <= #DLY din1[148*8+7:148*8];
    else if ((we0[148] == 1) && (ce0 == 1))
        mem[address0][148*8+7:148*8] <= #DLY din0[148*8+7:148*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[148] == 1))
        mem[address1][148*8+7:148*8] <= #DLY din1[148*8+7:148*8];
end
//write process for byte 149
always @ (posedge clk) begin
    if((we0[149] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[149] == 1) && (address0 == address1))
        mem[address0][149*8+7:149*8] <= #DLY din1[149*8+7:149*8];
    else if ((we0[149] == 1) && (ce0 == 1))
        mem[address0][149*8+7:149*8] <= #DLY din0[149*8+7:149*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[149] == 1))
        mem[address1][149*8+7:149*8] <= #DLY din1[149*8+7:149*8];
end
//write process for byte 150
always @ (posedge clk) begin
    if((we0[150] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[150] == 1) && (address0 == address1))
        mem[address0][150*8+7:150*8] <= #DLY din1[150*8+7:150*8];
    else if ((we0[150] == 1) && (ce0 == 1))
        mem[address0][150*8+7:150*8] <= #DLY din0[150*8+7:150*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[150] == 1))
        mem[address1][150*8+7:150*8] <= #DLY din1[150*8+7:150*8];
end
//write process for byte 151
always @ (posedge clk) begin
    if((we0[151] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[151] == 1) && (address0 == address1))
        mem[address0][151*8+7:151*8] <= #DLY din1[151*8+7:151*8];
    else if ((we0[151] == 1) && (ce0 == 1))
        mem[address0][151*8+7:151*8] <= #DLY din0[151*8+7:151*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[151] == 1))
        mem[address1][151*8+7:151*8] <= #DLY din1[151*8+7:151*8];
end
//write process for byte 152
always @ (posedge clk) begin
    if((we0[152] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[152] == 1) && (address0 == address1))
        mem[address0][152*8+7:152*8] <= #DLY din1[152*8+7:152*8];
    else if ((we0[152] == 1) && (ce0 == 1))
        mem[address0][152*8+7:152*8] <= #DLY din0[152*8+7:152*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[152] == 1))
        mem[address1][152*8+7:152*8] <= #DLY din1[152*8+7:152*8];
end
//write process for byte 153
always @ (posedge clk) begin
    if((we0[153] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[153] == 1) && (address0 == address1))
        mem[address0][153*8+7:153*8] <= #DLY din1[153*8+7:153*8];
    else if ((we0[153] == 1) && (ce0 == 1))
        mem[address0][153*8+7:153*8] <= #DLY din0[153*8+7:153*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[153] == 1))
        mem[address1][153*8+7:153*8] <= #DLY din1[153*8+7:153*8];
end
//write process for byte 154
always @ (posedge clk) begin
    if((we0[154] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[154] == 1) && (address0 == address1))
        mem[address0][154*8+7:154*8] <= #DLY din1[154*8+7:154*8];
    else if ((we0[154] == 1) && (ce0 == 1))
        mem[address0][154*8+7:154*8] <= #DLY din0[154*8+7:154*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[154] == 1))
        mem[address1][154*8+7:154*8] <= #DLY din1[154*8+7:154*8];
end
//write process for byte 155
always @ (posedge clk) begin
    if((we0[155] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[155] == 1) && (address0 == address1))
        mem[address0][155*8+7:155*8] <= #DLY din1[155*8+7:155*8];
    else if ((we0[155] == 1) && (ce0 == 1))
        mem[address0][155*8+7:155*8] <= #DLY din0[155*8+7:155*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[155] == 1))
        mem[address1][155*8+7:155*8] <= #DLY din1[155*8+7:155*8];
end
//write process for byte 156
always @ (posedge clk) begin
    if((we0[156] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[156] == 1) && (address0 == address1))
        mem[address0][156*8+7:156*8] <= #DLY din1[156*8+7:156*8];
    else if ((we0[156] == 1) && (ce0 == 1))
        mem[address0][156*8+7:156*8] <= #DLY din0[156*8+7:156*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[156] == 1))
        mem[address1][156*8+7:156*8] <= #DLY din1[156*8+7:156*8];
end
//write process for byte 157
always @ (posedge clk) begin
    if((we0[157] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[157] == 1) && (address0 == address1))
        mem[address0][157*8+7:157*8] <= #DLY din1[157*8+7:157*8];
    else if ((we0[157] == 1) && (ce0 == 1))
        mem[address0][157*8+7:157*8] <= #DLY din0[157*8+7:157*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[157] == 1))
        mem[address1][157*8+7:157*8] <= #DLY din1[157*8+7:157*8];
end
//write process for byte 158
always @ (posedge clk) begin
    if((we0[158] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[158] == 1) && (address0 == address1))
        mem[address0][158*8+7:158*8] <= #DLY din1[158*8+7:158*8];
    else if ((we0[158] == 1) && (ce0 == 1))
        mem[address0][158*8+7:158*8] <= #DLY din0[158*8+7:158*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[158] == 1))
        mem[address1][158*8+7:158*8] <= #DLY din1[158*8+7:158*8];
end
//write process for byte 159
always @ (posedge clk) begin
    if((we0[159] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[159] == 1) && (address0 == address1))
        mem[address0][159*8+7:159*8] <= #DLY din1[159*8+7:159*8];
    else if ((we0[159] == 1) && (ce0 == 1))
        mem[address0][159*8+7:159*8] <= #DLY din0[159*8+7:159*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[159] == 1))
        mem[address1][159*8+7:159*8] <= #DLY din1[159*8+7:159*8];
end
//write process for byte 160
always @ (posedge clk) begin
    if((we0[160] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[160] == 1) && (address0 == address1))
        mem[address0][160*8+7:160*8] <= #DLY din1[160*8+7:160*8];
    else if ((we0[160] == 1) && (ce0 == 1))
        mem[address0][160*8+7:160*8] <= #DLY din0[160*8+7:160*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[160] == 1))
        mem[address1][160*8+7:160*8] <= #DLY din1[160*8+7:160*8];
end
//write process for byte 161
always @ (posedge clk) begin
    if((we0[161] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[161] == 1) && (address0 == address1))
        mem[address0][161*8+7:161*8] <= #DLY din1[161*8+7:161*8];
    else if ((we0[161] == 1) && (ce0 == 1))
        mem[address0][161*8+7:161*8] <= #DLY din0[161*8+7:161*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[161] == 1))
        mem[address1][161*8+7:161*8] <= #DLY din1[161*8+7:161*8];
end
//write process for byte 162
always @ (posedge clk) begin
    if((we0[162] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[162] == 1) && (address0 == address1))
        mem[address0][162*8+7:162*8] <= #DLY din1[162*8+7:162*8];
    else if ((we0[162] == 1) && (ce0 == 1))
        mem[address0][162*8+7:162*8] <= #DLY din0[162*8+7:162*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[162] == 1))
        mem[address1][162*8+7:162*8] <= #DLY din1[162*8+7:162*8];
end
//write process for byte 163
always @ (posedge clk) begin
    if((we0[163] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[163] == 1) && (address0 == address1))
        mem[address0][163*8+7:163*8] <= #DLY din1[163*8+7:163*8];
    else if ((we0[163] == 1) && (ce0 == 1))
        mem[address0][163*8+7:163*8] <= #DLY din0[163*8+7:163*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[163] == 1))
        mem[address1][163*8+7:163*8] <= #DLY din1[163*8+7:163*8];
end
//write process for byte 164
always @ (posedge clk) begin
    if((we0[164] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[164] == 1) && (address0 == address1))
        mem[address0][164*8+7:164*8] <= #DLY din1[164*8+7:164*8];
    else if ((we0[164] == 1) && (ce0 == 1))
        mem[address0][164*8+7:164*8] <= #DLY din0[164*8+7:164*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[164] == 1))
        mem[address1][164*8+7:164*8] <= #DLY din1[164*8+7:164*8];
end
//write process for byte 165
always @ (posedge clk) begin
    if((we0[165] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[165] == 1) && (address0 == address1))
        mem[address0][165*8+7:165*8] <= #DLY din1[165*8+7:165*8];
    else if ((we0[165] == 1) && (ce0 == 1))
        mem[address0][165*8+7:165*8] <= #DLY din0[165*8+7:165*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[165] == 1))
        mem[address1][165*8+7:165*8] <= #DLY din1[165*8+7:165*8];
end
//write process for byte 166
always @ (posedge clk) begin
    if((we0[166] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[166] == 1) && (address0 == address1))
        mem[address0][166*8+7:166*8] <= #DLY din1[166*8+7:166*8];
    else if ((we0[166] == 1) && (ce0 == 1))
        mem[address0][166*8+7:166*8] <= #DLY din0[166*8+7:166*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[166] == 1))
        mem[address1][166*8+7:166*8] <= #DLY din1[166*8+7:166*8];
end
//write process for byte 167
always @ (posedge clk) begin
    if((we0[167] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[167] == 1) && (address0 == address1))
        mem[address0][167*8+7:167*8] <= #DLY din1[167*8+7:167*8];
    else if ((we0[167] == 1) && (ce0 == 1))
        mem[address0][167*8+7:167*8] <= #DLY din0[167*8+7:167*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[167] == 1))
        mem[address1][167*8+7:167*8] <= #DLY din1[167*8+7:167*8];
end
//write process for byte 168
always @ (posedge clk) begin
    if((we0[168] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[168] == 1) && (address0 == address1))
        mem[address0][168*8+7:168*8] <= #DLY din1[168*8+7:168*8];
    else if ((we0[168] == 1) && (ce0 == 1))
        mem[address0][168*8+7:168*8] <= #DLY din0[168*8+7:168*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[168] == 1))
        mem[address1][168*8+7:168*8] <= #DLY din1[168*8+7:168*8];
end
//write process for byte 169
always @ (posedge clk) begin
    if((we0[169] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[169] == 1) && (address0 == address1))
        mem[address0][169*8+7:169*8] <= #DLY din1[169*8+7:169*8];
    else if ((we0[169] == 1) && (ce0 == 1))
        mem[address0][169*8+7:169*8] <= #DLY din0[169*8+7:169*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[169] == 1))
        mem[address1][169*8+7:169*8] <= #DLY din1[169*8+7:169*8];
end
//write process for byte 170
always @ (posedge clk) begin
    if((we0[170] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[170] == 1) && (address0 == address1))
        mem[address0][170*8+7:170*8] <= #DLY din1[170*8+7:170*8];
    else if ((we0[170] == 1) && (ce0 == 1))
        mem[address0][170*8+7:170*8] <= #DLY din0[170*8+7:170*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[170] == 1))
        mem[address1][170*8+7:170*8] <= #DLY din1[170*8+7:170*8];
end
//write process for byte 171
always @ (posedge clk) begin
    if((we0[171] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[171] == 1) && (address0 == address1))
        mem[address0][171*8+7:171*8] <= #DLY din1[171*8+7:171*8];
    else if ((we0[171] == 1) && (ce0 == 1))
        mem[address0][171*8+7:171*8] <= #DLY din0[171*8+7:171*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[171] == 1))
        mem[address1][171*8+7:171*8] <= #DLY din1[171*8+7:171*8];
end
//write process for byte 172
always @ (posedge clk) begin
    if((we0[172] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[172] == 1) && (address0 == address1))
        mem[address0][172*8+7:172*8] <= #DLY din1[172*8+7:172*8];
    else if ((we0[172] == 1) && (ce0 == 1))
        mem[address0][172*8+7:172*8] <= #DLY din0[172*8+7:172*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[172] == 1))
        mem[address1][172*8+7:172*8] <= #DLY din1[172*8+7:172*8];
end
//write process for byte 173
always @ (posedge clk) begin
    if((we0[173] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[173] == 1) && (address0 == address1))
        mem[address0][173*8+7:173*8] <= #DLY din1[173*8+7:173*8];
    else if ((we0[173] == 1) && (ce0 == 1))
        mem[address0][173*8+7:173*8] <= #DLY din0[173*8+7:173*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[173] == 1))
        mem[address1][173*8+7:173*8] <= #DLY din1[173*8+7:173*8];
end
//write process for byte 174
always @ (posedge clk) begin
    if((we0[174] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[174] == 1) && (address0 == address1))
        mem[address0][174*8+7:174*8] <= #DLY din1[174*8+7:174*8];
    else if ((we0[174] == 1) && (ce0 == 1))
        mem[address0][174*8+7:174*8] <= #DLY din0[174*8+7:174*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[174] == 1))
        mem[address1][174*8+7:174*8] <= #DLY din1[174*8+7:174*8];
end
//write process for byte 175
always @ (posedge clk) begin
    if((we0[175] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[175] == 1) && (address0 == address1))
        mem[address0][175*8+7:175*8] <= #DLY din1[175*8+7:175*8];
    else if ((we0[175] == 1) && (ce0 == 1))
        mem[address0][175*8+7:175*8] <= #DLY din0[175*8+7:175*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[175] == 1))
        mem[address1][175*8+7:175*8] <= #DLY din1[175*8+7:175*8];
end
//write process for byte 176
always @ (posedge clk) begin
    if((we0[176] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[176] == 1) && (address0 == address1))
        mem[address0][176*8+7:176*8] <= #DLY din1[176*8+7:176*8];
    else if ((we0[176] == 1) && (ce0 == 1))
        mem[address0][176*8+7:176*8] <= #DLY din0[176*8+7:176*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[176] == 1))
        mem[address1][176*8+7:176*8] <= #DLY din1[176*8+7:176*8];
end
//write process for byte 177
always @ (posedge clk) begin
    if((we0[177] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[177] == 1) && (address0 == address1))
        mem[address0][177*8+7:177*8] <= #DLY din1[177*8+7:177*8];
    else if ((we0[177] == 1) && (ce0 == 1))
        mem[address0][177*8+7:177*8] <= #DLY din0[177*8+7:177*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[177] == 1))
        mem[address1][177*8+7:177*8] <= #DLY din1[177*8+7:177*8];
end
//write process for byte 178
always @ (posedge clk) begin
    if((we0[178] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[178] == 1) && (address0 == address1))
        mem[address0][178*8+7:178*8] <= #DLY din1[178*8+7:178*8];
    else if ((we0[178] == 1) && (ce0 == 1))
        mem[address0][178*8+7:178*8] <= #DLY din0[178*8+7:178*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[178] == 1))
        mem[address1][178*8+7:178*8] <= #DLY din1[178*8+7:178*8];
end
//write process for byte 179
always @ (posedge clk) begin
    if((we0[179] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[179] == 1) && (address0 == address1))
        mem[address0][179*8+7:179*8] <= #DLY din1[179*8+7:179*8];
    else if ((we0[179] == 1) && (ce0 == 1))
        mem[address0][179*8+7:179*8] <= #DLY din0[179*8+7:179*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[179] == 1))
        mem[address1][179*8+7:179*8] <= #DLY din1[179*8+7:179*8];
end
//write process for byte 180
always @ (posedge clk) begin
    if((we0[180] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[180] == 1) && (address0 == address1))
        mem[address0][180*8+7:180*8] <= #DLY din1[180*8+7:180*8];
    else if ((we0[180] == 1) && (ce0 == 1))
        mem[address0][180*8+7:180*8] <= #DLY din0[180*8+7:180*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[180] == 1))
        mem[address1][180*8+7:180*8] <= #DLY din1[180*8+7:180*8];
end
//write process for byte 181
always @ (posedge clk) begin
    if((we0[181] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[181] == 1) && (address0 == address1))
        mem[address0][181*8+7:181*8] <= #DLY din1[181*8+7:181*8];
    else if ((we0[181] == 1) && (ce0 == 1))
        mem[address0][181*8+7:181*8] <= #DLY din0[181*8+7:181*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[181] == 1))
        mem[address1][181*8+7:181*8] <= #DLY din1[181*8+7:181*8];
end
//write process for byte 182
always @ (posedge clk) begin
    if((we0[182] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[182] == 1) && (address0 == address1))
        mem[address0][182*8+7:182*8] <= #DLY din1[182*8+7:182*8];
    else if ((we0[182] == 1) && (ce0 == 1))
        mem[address0][182*8+7:182*8] <= #DLY din0[182*8+7:182*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[182] == 1))
        mem[address1][182*8+7:182*8] <= #DLY din1[182*8+7:182*8];
end
//write process for byte 183
always @ (posedge clk) begin
    if((we0[183] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[183] == 1) && (address0 == address1))
        mem[address0][183*8+7:183*8] <= #DLY din1[183*8+7:183*8];
    else if ((we0[183] == 1) && (ce0 == 1))
        mem[address0][183*8+7:183*8] <= #DLY din0[183*8+7:183*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[183] == 1))
        mem[address1][183*8+7:183*8] <= #DLY din1[183*8+7:183*8];
end
//write process for byte 184
always @ (posedge clk) begin
    if((we0[184] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[184] == 1) && (address0 == address1))
        mem[address0][184*8+7:184*8] <= #DLY din1[184*8+7:184*8];
    else if ((we0[184] == 1) && (ce0 == 1))
        mem[address0][184*8+7:184*8] <= #DLY din0[184*8+7:184*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[184] == 1))
        mem[address1][184*8+7:184*8] <= #DLY din1[184*8+7:184*8];
end
//write process for byte 185
always @ (posedge clk) begin
    if((we0[185] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[185] == 1) && (address0 == address1))
        mem[address0][185*8+7:185*8] <= #DLY din1[185*8+7:185*8];
    else if ((we0[185] == 1) && (ce0 == 1))
        mem[address0][185*8+7:185*8] <= #DLY din0[185*8+7:185*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[185] == 1))
        mem[address1][185*8+7:185*8] <= #DLY din1[185*8+7:185*8];
end
//write process for byte 186
always @ (posedge clk) begin
    if((we0[186] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[186] == 1) && (address0 == address1))
        mem[address0][186*8+7:186*8] <= #DLY din1[186*8+7:186*8];
    else if ((we0[186] == 1) && (ce0 == 1))
        mem[address0][186*8+7:186*8] <= #DLY din0[186*8+7:186*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[186] == 1))
        mem[address1][186*8+7:186*8] <= #DLY din1[186*8+7:186*8];
end
//write process for byte 187
always @ (posedge clk) begin
    if((we0[187] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[187] == 1) && (address0 == address1))
        mem[address0][187*8+7:187*8] <= #DLY din1[187*8+7:187*8];
    else if ((we0[187] == 1) && (ce0 == 1))
        mem[address0][187*8+7:187*8] <= #DLY din0[187*8+7:187*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[187] == 1))
        mem[address1][187*8+7:187*8] <= #DLY din1[187*8+7:187*8];
end
//write process for byte 188
always @ (posedge clk) begin
    if((we0[188] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[188] == 1) && (address0 == address1))
        mem[address0][188*8+7:188*8] <= #DLY din1[188*8+7:188*8];
    else if ((we0[188] == 1) && (ce0 == 1))
        mem[address0][188*8+7:188*8] <= #DLY din0[188*8+7:188*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[188] == 1))
        mem[address1][188*8+7:188*8] <= #DLY din1[188*8+7:188*8];
end
//write process for byte 189
always @ (posedge clk) begin
    if((we0[189] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[189] == 1) && (address0 == address1))
        mem[address0][189*8+7:189*8] <= #DLY din1[189*8+7:189*8];
    else if ((we0[189] == 1) && (ce0 == 1))
        mem[address0][189*8+7:189*8] <= #DLY din0[189*8+7:189*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[189] == 1))
        mem[address1][189*8+7:189*8] <= #DLY din1[189*8+7:189*8];
end
//write process for byte 190
always @ (posedge clk) begin
    if((we0[190] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[190] == 1) && (address0 == address1))
        mem[address0][190*8+7:190*8] <= #DLY din1[190*8+7:190*8];
    else if ((we0[190] == 1) && (ce0 == 1))
        mem[address0][190*8+7:190*8] <= #DLY din0[190*8+7:190*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[190] == 1))
        mem[address1][190*8+7:190*8] <= #DLY din1[190*8+7:190*8];
end
//write process for byte 191
always @ (posedge clk) begin
    if((we0[191] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[191] == 1) && (address0 == address1))
        mem[address0][191*8+7:191*8] <= #DLY din1[191*8+7:191*8];
    else if ((we0[191] == 1) && (ce0 == 1))
        mem[address0][191*8+7:191*8] <= #DLY din0[191*8+7:191*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[191] == 1))
        mem[address1][191*8+7:191*8] <= #DLY din1[191*8+7:191*8];
end
//write process for byte 192
always @ (posedge clk) begin
    if((we0[192] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[192] == 1) && (address0 == address1))
        mem[address0][192*8+7:192*8] <= #DLY din1[192*8+7:192*8];
    else if ((we0[192] == 1) && (ce0 == 1))
        mem[address0][192*8+7:192*8] <= #DLY din0[192*8+7:192*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[192] == 1))
        mem[address1][192*8+7:192*8] <= #DLY din1[192*8+7:192*8];
end
//write process for byte 193
always @ (posedge clk) begin
    if((we0[193] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[193] == 1) && (address0 == address1))
        mem[address0][193*8+7:193*8] <= #DLY din1[193*8+7:193*8];
    else if ((we0[193] == 1) && (ce0 == 1))
        mem[address0][193*8+7:193*8] <= #DLY din0[193*8+7:193*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[193] == 1))
        mem[address1][193*8+7:193*8] <= #DLY din1[193*8+7:193*8];
end
//write process for byte 194
always @ (posedge clk) begin
    if((we0[194] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[194] == 1) && (address0 == address1))
        mem[address0][194*8+7:194*8] <= #DLY din1[194*8+7:194*8];
    else if ((we0[194] == 1) && (ce0 == 1))
        mem[address0][194*8+7:194*8] <= #DLY din0[194*8+7:194*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[194] == 1))
        mem[address1][194*8+7:194*8] <= #DLY din1[194*8+7:194*8];
end
//write process for byte 195
always @ (posedge clk) begin
    if((we0[195] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[195] == 1) && (address0 == address1))
        mem[address0][195*8+7:195*8] <= #DLY din1[195*8+7:195*8];
    else if ((we0[195] == 1) && (ce0 == 1))
        mem[address0][195*8+7:195*8] <= #DLY din0[195*8+7:195*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[195] == 1))
        mem[address1][195*8+7:195*8] <= #DLY din1[195*8+7:195*8];
end
//write process for byte 196
always @ (posedge clk) begin
    if((we0[196] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[196] == 1) && (address0 == address1))
        mem[address0][196*8+7:196*8] <= #DLY din1[196*8+7:196*8];
    else if ((we0[196] == 1) && (ce0 == 1))
        mem[address0][196*8+7:196*8] <= #DLY din0[196*8+7:196*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[196] == 1))
        mem[address1][196*8+7:196*8] <= #DLY din1[196*8+7:196*8];
end
//write process for byte 197
always @ (posedge clk) begin
    if((we0[197] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[197] == 1) && (address0 == address1))
        mem[address0][197*8+7:197*8] <= #DLY din1[197*8+7:197*8];
    else if ((we0[197] == 1) && (ce0 == 1))
        mem[address0][197*8+7:197*8] <= #DLY din0[197*8+7:197*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[197] == 1))
        mem[address1][197*8+7:197*8] <= #DLY din1[197*8+7:197*8];
end
//write process for byte 198
always @ (posedge clk) begin
    if((we0[198] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[198] == 1) && (address0 == address1))
        mem[address0][198*8+7:198*8] <= #DLY din1[198*8+7:198*8];
    else if ((we0[198] == 1) && (ce0 == 1))
        mem[address0][198*8+7:198*8] <= #DLY din0[198*8+7:198*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[198] == 1))
        mem[address1][198*8+7:198*8] <= #DLY din1[198*8+7:198*8];
end
//write process for byte 199
always @ (posedge clk) begin
    if((we0[199] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[199] == 1) && (address0 == address1))
        mem[address0][199*8+7:199*8] <= #DLY din1[199*8+7:199*8];
    else if ((we0[199] == 1) && (ce0 == 1))
        mem[address0][199*8+7:199*8] <= #DLY din0[199*8+7:199*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[199] == 1))
        mem[address1][199*8+7:199*8] <= #DLY din1[199*8+7:199*8];
end
//write process for byte 200
always @ (posedge clk) begin
    if((we0[200] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[200] == 1) && (address0 == address1))
        mem[address0][200*8+7:200*8] <= #DLY din1[200*8+7:200*8];
    else if ((we0[200] == 1) && (ce0 == 1))
        mem[address0][200*8+7:200*8] <= #DLY din0[200*8+7:200*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[200] == 1))
        mem[address1][200*8+7:200*8] <= #DLY din1[200*8+7:200*8];
end
//write process for byte 201
always @ (posedge clk) begin
    if((we0[201] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[201] == 1) && (address0 == address1))
        mem[address0][201*8+7:201*8] <= #DLY din1[201*8+7:201*8];
    else if ((we0[201] == 1) && (ce0 == 1))
        mem[address0][201*8+7:201*8] <= #DLY din0[201*8+7:201*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[201] == 1))
        mem[address1][201*8+7:201*8] <= #DLY din1[201*8+7:201*8];
end
//write process for byte 202
always @ (posedge clk) begin
    if((we0[202] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[202] == 1) && (address0 == address1))
        mem[address0][202*8+7:202*8] <= #DLY din1[202*8+7:202*8];
    else if ((we0[202] == 1) && (ce0 == 1))
        mem[address0][202*8+7:202*8] <= #DLY din0[202*8+7:202*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[202] == 1))
        mem[address1][202*8+7:202*8] <= #DLY din1[202*8+7:202*8];
end
//write process for byte 203
always @ (posedge clk) begin
    if((we0[203] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[203] == 1) && (address0 == address1))
        mem[address0][203*8+7:203*8] <= #DLY din1[203*8+7:203*8];
    else if ((we0[203] == 1) && (ce0 == 1))
        mem[address0][203*8+7:203*8] <= #DLY din0[203*8+7:203*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[203] == 1))
        mem[address1][203*8+7:203*8] <= #DLY din1[203*8+7:203*8];
end
//write process for byte 204
always @ (posedge clk) begin
    if((we0[204] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[204] == 1) && (address0 == address1))
        mem[address0][204*8+7:204*8] <= #DLY din1[204*8+7:204*8];
    else if ((we0[204] == 1) && (ce0 == 1))
        mem[address0][204*8+7:204*8] <= #DLY din0[204*8+7:204*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[204] == 1))
        mem[address1][204*8+7:204*8] <= #DLY din1[204*8+7:204*8];
end
//write process for byte 205
always @ (posedge clk) begin
    if((we0[205] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[205] == 1) && (address0 == address1))
        mem[address0][205*8+7:205*8] <= #DLY din1[205*8+7:205*8];
    else if ((we0[205] == 1) && (ce0 == 1))
        mem[address0][205*8+7:205*8] <= #DLY din0[205*8+7:205*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[205] == 1))
        mem[address1][205*8+7:205*8] <= #DLY din1[205*8+7:205*8];
end
//write process for byte 206
always @ (posedge clk) begin
    if((we0[206] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[206] == 1) && (address0 == address1))
        mem[address0][206*8+7:206*8] <= #DLY din1[206*8+7:206*8];
    else if ((we0[206] == 1) && (ce0 == 1))
        mem[address0][206*8+7:206*8] <= #DLY din0[206*8+7:206*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[206] == 1))
        mem[address1][206*8+7:206*8] <= #DLY din1[206*8+7:206*8];
end
//write process for byte 207
always @ (posedge clk) begin
    if((we0[207] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[207] == 1) && (address0 == address1))
        mem[address0][207*8+7:207*8] <= #DLY din1[207*8+7:207*8];
    else if ((we0[207] == 1) && (ce0 == 1))
        mem[address0][207*8+7:207*8] <= #DLY din0[207*8+7:207*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[207] == 1))
        mem[address1][207*8+7:207*8] <= #DLY din1[207*8+7:207*8];
end
//write process for byte 208
always @ (posedge clk) begin
    if((we0[208] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[208] == 1) && (address0 == address1))
        mem[address0][208*8+7:208*8] <= #DLY din1[208*8+7:208*8];
    else if ((we0[208] == 1) && (ce0 == 1))
        mem[address0][208*8+7:208*8] <= #DLY din0[208*8+7:208*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[208] == 1))
        mem[address1][208*8+7:208*8] <= #DLY din1[208*8+7:208*8];
end
//write process for byte 209
always @ (posedge clk) begin
    if((we0[209] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[209] == 1) && (address0 == address1))
        mem[address0][209*8+7:209*8] <= #DLY din1[209*8+7:209*8];
    else if ((we0[209] == 1) && (ce0 == 1))
        mem[address0][209*8+7:209*8] <= #DLY din0[209*8+7:209*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[209] == 1))
        mem[address1][209*8+7:209*8] <= #DLY din1[209*8+7:209*8];
end
//write process for byte 210
always @ (posedge clk) begin
    if((we0[210] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[210] == 1) && (address0 == address1))
        mem[address0][210*8+7:210*8] <= #DLY din1[210*8+7:210*8];
    else if ((we0[210] == 1) && (ce0 == 1))
        mem[address0][210*8+7:210*8] <= #DLY din0[210*8+7:210*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[210] == 1))
        mem[address1][210*8+7:210*8] <= #DLY din1[210*8+7:210*8];
end
//write process for byte 211
always @ (posedge clk) begin
    if((we0[211] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[211] == 1) && (address0 == address1))
        mem[address0][211*8+7:211*8] <= #DLY din1[211*8+7:211*8];
    else if ((we0[211] == 1) && (ce0 == 1))
        mem[address0][211*8+7:211*8] <= #DLY din0[211*8+7:211*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[211] == 1))
        mem[address1][211*8+7:211*8] <= #DLY din1[211*8+7:211*8];
end
//write process for byte 212
always @ (posedge clk) begin
    if((we0[212] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[212] == 1) && (address0 == address1))
        mem[address0][212*8+7:212*8] <= #DLY din1[212*8+7:212*8];
    else if ((we0[212] == 1) && (ce0 == 1))
        mem[address0][212*8+7:212*8] <= #DLY din0[212*8+7:212*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[212] == 1))
        mem[address1][212*8+7:212*8] <= #DLY din1[212*8+7:212*8];
end
//write process for byte 213
always @ (posedge clk) begin
    if((we0[213] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[213] == 1) && (address0 == address1))
        mem[address0][213*8+7:213*8] <= #DLY din1[213*8+7:213*8];
    else if ((we0[213] == 1) && (ce0 == 1))
        mem[address0][213*8+7:213*8] <= #DLY din0[213*8+7:213*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[213] == 1))
        mem[address1][213*8+7:213*8] <= #DLY din1[213*8+7:213*8];
end
//write process for byte 214
always @ (posedge clk) begin
    if((we0[214] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[214] == 1) && (address0 == address1))
        mem[address0][214*8+7:214*8] <= #DLY din1[214*8+7:214*8];
    else if ((we0[214] == 1) && (ce0 == 1))
        mem[address0][214*8+7:214*8] <= #DLY din0[214*8+7:214*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[214] == 1))
        mem[address1][214*8+7:214*8] <= #DLY din1[214*8+7:214*8];
end
//write process for byte 215
always @ (posedge clk) begin
    if((we0[215] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[215] == 1) && (address0 == address1))
        mem[address0][215*8+7:215*8] <= #DLY din1[215*8+7:215*8];
    else if ((we0[215] == 1) && (ce0 == 1))
        mem[address0][215*8+7:215*8] <= #DLY din0[215*8+7:215*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[215] == 1))
        mem[address1][215*8+7:215*8] <= #DLY din1[215*8+7:215*8];
end
//write process for byte 216
always @ (posedge clk) begin
    if((we0[216] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[216] == 1) && (address0 == address1))
        mem[address0][216*8+7:216*8] <= #DLY din1[216*8+7:216*8];
    else if ((we0[216] == 1) && (ce0 == 1))
        mem[address0][216*8+7:216*8] <= #DLY din0[216*8+7:216*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[216] == 1))
        mem[address1][216*8+7:216*8] <= #DLY din1[216*8+7:216*8];
end
//write process for byte 217
always @ (posedge clk) begin
    if((we0[217] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[217] == 1) && (address0 == address1))
        mem[address0][217*8+7:217*8] <= #DLY din1[217*8+7:217*8];
    else if ((we0[217] == 1) && (ce0 == 1))
        mem[address0][217*8+7:217*8] <= #DLY din0[217*8+7:217*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[217] == 1))
        mem[address1][217*8+7:217*8] <= #DLY din1[217*8+7:217*8];
end
//write process for byte 218
always @ (posedge clk) begin
    if((we0[218] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[218] == 1) && (address0 == address1))
        mem[address0][218*8+7:218*8] <= #DLY din1[218*8+7:218*8];
    else if ((we0[218] == 1) && (ce0 == 1))
        mem[address0][218*8+7:218*8] <= #DLY din0[218*8+7:218*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[218] == 1))
        mem[address1][218*8+7:218*8] <= #DLY din1[218*8+7:218*8];
end
//write process for byte 219
always @ (posedge clk) begin
    if((we0[219] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[219] == 1) && (address0 == address1))
        mem[address0][219*8+7:219*8] <= #DLY din1[219*8+7:219*8];
    else if ((we0[219] == 1) && (ce0 == 1))
        mem[address0][219*8+7:219*8] <= #DLY din0[219*8+7:219*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[219] == 1))
        mem[address1][219*8+7:219*8] <= #DLY din1[219*8+7:219*8];
end
//write process for byte 220
always @ (posedge clk) begin
    if((we0[220] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[220] == 1) && (address0 == address1))
        mem[address0][220*8+7:220*8] <= #DLY din1[220*8+7:220*8];
    else if ((we0[220] == 1) && (ce0 == 1))
        mem[address0][220*8+7:220*8] <= #DLY din0[220*8+7:220*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[220] == 1))
        mem[address1][220*8+7:220*8] <= #DLY din1[220*8+7:220*8];
end
//write process for byte 221
always @ (posedge clk) begin
    if((we0[221] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[221] == 1) && (address0 == address1))
        mem[address0][221*8+7:221*8] <= #DLY din1[221*8+7:221*8];
    else if ((we0[221] == 1) && (ce0 == 1))
        mem[address0][221*8+7:221*8] <= #DLY din0[221*8+7:221*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[221] == 1))
        mem[address1][221*8+7:221*8] <= #DLY din1[221*8+7:221*8];
end
//write process for byte 222
always @ (posedge clk) begin
    if((we0[222] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[222] == 1) && (address0 == address1))
        mem[address0][222*8+7:222*8] <= #DLY din1[222*8+7:222*8];
    else if ((we0[222] == 1) && (ce0 == 1))
        mem[address0][222*8+7:222*8] <= #DLY din0[222*8+7:222*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[222] == 1))
        mem[address1][222*8+7:222*8] <= #DLY din1[222*8+7:222*8];
end
//write process for byte 223
always @ (posedge clk) begin
    if((we0[223] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[223] == 1) && (address0 == address1))
        mem[address0][223*8+7:223*8] <= #DLY din1[223*8+7:223*8];
    else if ((we0[223] == 1) && (ce0 == 1))
        mem[address0][223*8+7:223*8] <= #DLY din0[223*8+7:223*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[223] == 1))
        mem[address1][223*8+7:223*8] <= #DLY din1[223*8+7:223*8];
end
//write process for byte 224
always @ (posedge clk) begin
    if((we0[224] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[224] == 1) && (address0 == address1))
        mem[address0][224*8+7:224*8] <= #DLY din1[224*8+7:224*8];
    else if ((we0[224] == 1) && (ce0 == 1))
        mem[address0][224*8+7:224*8] <= #DLY din0[224*8+7:224*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[224] == 1))
        mem[address1][224*8+7:224*8] <= #DLY din1[224*8+7:224*8];
end
//write process for byte 225
always @ (posedge clk) begin
    if((we0[225] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[225] == 1) && (address0 == address1))
        mem[address0][225*8+7:225*8] <= #DLY din1[225*8+7:225*8];
    else if ((we0[225] == 1) && (ce0 == 1))
        mem[address0][225*8+7:225*8] <= #DLY din0[225*8+7:225*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[225] == 1))
        mem[address1][225*8+7:225*8] <= #DLY din1[225*8+7:225*8];
end
//write process for byte 226
always @ (posedge clk) begin
    if((we0[226] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[226] == 1) && (address0 == address1))
        mem[address0][226*8+7:226*8] <= #DLY din1[226*8+7:226*8];
    else if ((we0[226] == 1) && (ce0 == 1))
        mem[address0][226*8+7:226*8] <= #DLY din0[226*8+7:226*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[226] == 1))
        mem[address1][226*8+7:226*8] <= #DLY din1[226*8+7:226*8];
end
//write process for byte 227
always @ (posedge clk) begin
    if((we0[227] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[227] == 1) && (address0 == address1))
        mem[address0][227*8+7:227*8] <= #DLY din1[227*8+7:227*8];
    else if ((we0[227] == 1) && (ce0 == 1))
        mem[address0][227*8+7:227*8] <= #DLY din0[227*8+7:227*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[227] == 1))
        mem[address1][227*8+7:227*8] <= #DLY din1[227*8+7:227*8];
end
//write process for byte 228
always @ (posedge clk) begin
    if((we0[228] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[228] == 1) && (address0 == address1))
        mem[address0][228*8+7:228*8] <= #DLY din1[228*8+7:228*8];
    else if ((we0[228] == 1) && (ce0 == 1))
        mem[address0][228*8+7:228*8] <= #DLY din0[228*8+7:228*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[228] == 1))
        mem[address1][228*8+7:228*8] <= #DLY din1[228*8+7:228*8];
end
//write process for byte 229
always @ (posedge clk) begin
    if((we0[229] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[229] == 1) && (address0 == address1))
        mem[address0][229*8+7:229*8] <= #DLY din1[229*8+7:229*8];
    else if ((we0[229] == 1) && (ce0 == 1))
        mem[address0][229*8+7:229*8] <= #DLY din0[229*8+7:229*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[229] == 1))
        mem[address1][229*8+7:229*8] <= #DLY din1[229*8+7:229*8];
end
//write process for byte 230
always @ (posedge clk) begin
    if((we0[230] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[230] == 1) && (address0 == address1))
        mem[address0][230*8+7:230*8] <= #DLY din1[230*8+7:230*8];
    else if ((we0[230] == 1) && (ce0 == 1))
        mem[address0][230*8+7:230*8] <= #DLY din0[230*8+7:230*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[230] == 1))
        mem[address1][230*8+7:230*8] <= #DLY din1[230*8+7:230*8];
end
//write process for byte 231
always @ (posedge clk) begin
    if((we0[231] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[231] == 1) && (address0 == address1))
        mem[address0][231*8+7:231*8] <= #DLY din1[231*8+7:231*8];
    else if ((we0[231] == 1) && (ce0 == 1))
        mem[address0][231*8+7:231*8] <= #DLY din0[231*8+7:231*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[231] == 1))
        mem[address1][231*8+7:231*8] <= #DLY din1[231*8+7:231*8];
end
//write process for byte 232
always @ (posedge clk) begin
    if((we0[232] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[232] == 1) && (address0 == address1))
        mem[address0][232*8+7:232*8] <= #DLY din1[232*8+7:232*8];
    else if ((we0[232] == 1) && (ce0 == 1))
        mem[address0][232*8+7:232*8] <= #DLY din0[232*8+7:232*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[232] == 1))
        mem[address1][232*8+7:232*8] <= #DLY din1[232*8+7:232*8];
end
//write process for byte 233
always @ (posedge clk) begin
    if((we0[233] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[233] == 1) && (address0 == address1))
        mem[address0][233*8+7:233*8] <= #DLY din1[233*8+7:233*8];
    else if ((we0[233] == 1) && (ce0 == 1))
        mem[address0][233*8+7:233*8] <= #DLY din0[233*8+7:233*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[233] == 1))
        mem[address1][233*8+7:233*8] <= #DLY din1[233*8+7:233*8];
end
//write process for byte 234
always @ (posedge clk) begin
    if((we0[234] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[234] == 1) && (address0 == address1))
        mem[address0][234*8+7:234*8] <= #DLY din1[234*8+7:234*8];
    else if ((we0[234] == 1) && (ce0 == 1))
        mem[address0][234*8+7:234*8] <= #DLY din0[234*8+7:234*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[234] == 1))
        mem[address1][234*8+7:234*8] <= #DLY din1[234*8+7:234*8];
end
//write process for byte 235
always @ (posedge clk) begin
    if((we0[235] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[235] == 1) && (address0 == address1))
        mem[address0][235*8+7:235*8] <= #DLY din1[235*8+7:235*8];
    else if ((we0[235] == 1) && (ce0 == 1))
        mem[address0][235*8+7:235*8] <= #DLY din0[235*8+7:235*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[235] == 1))
        mem[address1][235*8+7:235*8] <= #DLY din1[235*8+7:235*8];
end
//write process for byte 236
always @ (posedge clk) begin
    if((we0[236] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[236] == 1) && (address0 == address1))
        mem[address0][236*8+7:236*8] <= #DLY din1[236*8+7:236*8];
    else if ((we0[236] == 1) && (ce0 == 1))
        mem[address0][236*8+7:236*8] <= #DLY din0[236*8+7:236*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[236] == 1))
        mem[address1][236*8+7:236*8] <= #DLY din1[236*8+7:236*8];
end
//write process for byte 237
always @ (posedge clk) begin
    if((we0[237] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[237] == 1) && (address0 == address1))
        mem[address0][237*8+7:237*8] <= #DLY din1[237*8+7:237*8];
    else if ((we0[237] == 1) && (ce0 == 1))
        mem[address0][237*8+7:237*8] <= #DLY din0[237*8+7:237*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[237] == 1))
        mem[address1][237*8+7:237*8] <= #DLY din1[237*8+7:237*8];
end
//write process for byte 238
always @ (posedge clk) begin
    if((we0[238] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[238] == 1) && (address0 == address1))
        mem[address0][238*8+7:238*8] <= #DLY din1[238*8+7:238*8];
    else if ((we0[238] == 1) && (ce0 == 1))
        mem[address0][238*8+7:238*8] <= #DLY din0[238*8+7:238*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[238] == 1))
        mem[address1][238*8+7:238*8] <= #DLY din1[238*8+7:238*8];
end
//write process for byte 239
always @ (posedge clk) begin
    if((we0[239] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[239] == 1) && (address0 == address1))
        mem[address0][239*8+7:239*8] <= #DLY din1[239*8+7:239*8];
    else if ((we0[239] == 1) && (ce0 == 1))
        mem[address0][239*8+7:239*8] <= #DLY din0[239*8+7:239*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[239] == 1))
        mem[address1][239*8+7:239*8] <= #DLY din1[239*8+7:239*8];
end
//write process for byte 240
always @ (posedge clk) begin
    if((we0[240] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[240] == 1) && (address0 == address1))
        mem[address0][240*8+7:240*8] <= #DLY din1[240*8+7:240*8];
    else if ((we0[240] == 1) && (ce0 == 1))
        mem[address0][240*8+7:240*8] <= #DLY din0[240*8+7:240*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[240] == 1))
        mem[address1][240*8+7:240*8] <= #DLY din1[240*8+7:240*8];
end
//write process for byte 241
always @ (posedge clk) begin
    if((we0[241] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[241] == 1) && (address0 == address1))
        mem[address0][241*8+7:241*8] <= #DLY din1[241*8+7:241*8];
    else if ((we0[241] == 1) && (ce0 == 1))
        mem[address0][241*8+7:241*8] <= #DLY din0[241*8+7:241*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[241] == 1))
        mem[address1][241*8+7:241*8] <= #DLY din1[241*8+7:241*8];
end
//write process for byte 242
always @ (posedge clk) begin
    if((we0[242] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[242] == 1) && (address0 == address1))
        mem[address0][242*8+7:242*8] <= #DLY din1[242*8+7:242*8];
    else if ((we0[242] == 1) && (ce0 == 1))
        mem[address0][242*8+7:242*8] <= #DLY din0[242*8+7:242*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[242] == 1))
        mem[address1][242*8+7:242*8] <= #DLY din1[242*8+7:242*8];
end
//write process for byte 243
always @ (posedge clk) begin
    if((we0[243] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[243] == 1) && (address0 == address1))
        mem[address0][243*8+7:243*8] <= #DLY din1[243*8+7:243*8];
    else if ((we0[243] == 1) && (ce0 == 1))
        mem[address0][243*8+7:243*8] <= #DLY din0[243*8+7:243*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[243] == 1))
        mem[address1][243*8+7:243*8] <= #DLY din1[243*8+7:243*8];
end
//write process for byte 244
always @ (posedge clk) begin
    if((we0[244] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[244] == 1) && (address0 == address1))
        mem[address0][244*8+7:244*8] <= #DLY din1[244*8+7:244*8];
    else if ((we0[244] == 1) && (ce0 == 1))
        mem[address0][244*8+7:244*8] <= #DLY din0[244*8+7:244*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[244] == 1))
        mem[address1][244*8+7:244*8] <= #DLY din1[244*8+7:244*8];
end
//write process for byte 245
always @ (posedge clk) begin
    if((we0[245] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[245] == 1) && (address0 == address1))
        mem[address0][245*8+7:245*8] <= #DLY din1[245*8+7:245*8];
    else if ((we0[245] == 1) && (ce0 == 1))
        mem[address0][245*8+7:245*8] <= #DLY din0[245*8+7:245*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[245] == 1))
        mem[address1][245*8+7:245*8] <= #DLY din1[245*8+7:245*8];
end
//write process for byte 246
always @ (posedge clk) begin
    if((we0[246] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[246] == 1) && (address0 == address1))
        mem[address0][246*8+7:246*8] <= #DLY din1[246*8+7:246*8];
    else if ((we0[246] == 1) && (ce0 == 1))
        mem[address0][246*8+7:246*8] <= #DLY din0[246*8+7:246*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[246] == 1))
        mem[address1][246*8+7:246*8] <= #DLY din1[246*8+7:246*8];
end
//write process for byte 247
always @ (posedge clk) begin
    if((we0[247] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[247] == 1) && (address0 == address1))
        mem[address0][247*8+7:247*8] <= #DLY din1[247*8+7:247*8];
    else if ((we0[247] == 1) && (ce0 == 1))
        mem[address0][247*8+7:247*8] <= #DLY din0[247*8+7:247*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[247] == 1))
        mem[address1][247*8+7:247*8] <= #DLY din1[247*8+7:247*8];
end
//write process for byte 248
always @ (posedge clk) begin
    if((we0[248] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[248] == 1) && (address0 == address1))
        mem[address0][248*8+7:248*8] <= #DLY din1[248*8+7:248*8];
    else if ((we0[248] == 1) && (ce0 == 1))
        mem[address0][248*8+7:248*8] <= #DLY din0[248*8+7:248*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[248] == 1))
        mem[address1][248*8+7:248*8] <= #DLY din1[248*8+7:248*8];
end
//write process for byte 249
always @ (posedge clk) begin
    if((we0[249] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[249] == 1) && (address0 == address1))
        mem[address0][249*8+7:249*8] <= #DLY din1[249*8+7:249*8];
    else if ((we0[249] == 1) && (ce0 == 1))
        mem[address0][249*8+7:249*8] <= #DLY din0[249*8+7:249*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[249] == 1))
        mem[address1][249*8+7:249*8] <= #DLY din1[249*8+7:249*8];
end
//write process for byte 250
always @ (posedge clk) begin
    if((we0[250] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[250] == 1) && (address0 == address1))
        mem[address0][250*8+7:250*8] <= #DLY din1[250*8+7:250*8];
    else if ((we0[250] == 1) && (ce0 == 1))
        mem[address0][250*8+7:250*8] <= #DLY din0[250*8+7:250*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[250] == 1))
        mem[address1][250*8+7:250*8] <= #DLY din1[250*8+7:250*8];
end
//write process for byte 251
always @ (posedge clk) begin
    if((we0[251] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[251] == 1) && (address0 == address1))
        mem[address0][251*8+7:251*8] <= #DLY din1[251*8+7:251*8];
    else if ((we0[251] == 1) && (ce0 == 1))
        mem[address0][251*8+7:251*8] <= #DLY din0[251*8+7:251*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[251] == 1))
        mem[address1][251*8+7:251*8] <= #DLY din1[251*8+7:251*8];
end
//write process for byte 252
always @ (posedge clk) begin
    if((we0[252] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[252] == 1) && (address0 == address1))
        mem[address0][252*8+7:252*8] <= #DLY din1[252*8+7:252*8];
    else if ((we0[252] == 1) && (ce0 == 1))
        mem[address0][252*8+7:252*8] <= #DLY din0[252*8+7:252*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[252] == 1))
        mem[address1][252*8+7:252*8] <= #DLY din1[252*8+7:252*8];
end
//write process for byte 253
always @ (posedge clk) begin
    if((we0[253] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[253] == 1) && (address0 == address1))
        mem[address0][253*8+7:253*8] <= #DLY din1[253*8+7:253*8];
    else if ((we0[253] == 1) && (ce0 == 1))
        mem[address0][253*8+7:253*8] <= #DLY din0[253*8+7:253*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[253] == 1))
        mem[address1][253*8+7:253*8] <= #DLY din1[253*8+7:253*8];
end
//write process for byte 254
always @ (posedge clk) begin
    if((we0[254] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[254] == 1) && (address0 == address1))
        mem[address0][254*8+7:254*8] <= #DLY din1[254*8+7:254*8];
    else if ((we0[254] == 1) && (ce0 == 1))
        mem[address0][254*8+7:254*8] <= #DLY din0[254*8+7:254*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[254] == 1))
        mem[address1][254*8+7:254*8] <= #DLY din1[254*8+7:254*8];
end
//write process for byte 255
always @ (posedge clk) begin
    if((we0[255] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[255] == 1) && (address0 == address1))
        mem[address0][255*8+7:255*8] <= #DLY din1[255*8+7:255*8];
    else if ((we0[255] == 1) && (ce0 == 1))
        mem[address0][255*8+7:255*8] <= #DLY din0[255*8+7:255*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[255] == 1))
        mem[address1][255*8+7:255*8] <= #DLY din1[255*8+7:255*8];
end
//write process for byte 256
always @ (posedge clk) begin
    if((we0[256] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[256] == 1) && (address0 == address1))
        mem[address0][256*8+7:256*8] <= #DLY din1[256*8+7:256*8];
    else if ((we0[256] == 1) && (ce0 == 1))
        mem[address0][256*8+7:256*8] <= #DLY din0[256*8+7:256*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[256] == 1))
        mem[address1][256*8+7:256*8] <= #DLY din1[256*8+7:256*8];
end
//write process for byte 257
always @ (posedge clk) begin
    if((we0[257] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[257] == 1) && (address0 == address1))
        mem[address0][257*8+7:257*8] <= #DLY din1[257*8+7:257*8];
    else if ((we0[257] == 1) && (ce0 == 1))
        mem[address0][257*8+7:257*8] <= #DLY din0[257*8+7:257*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[257] == 1))
        mem[address1][257*8+7:257*8] <= #DLY din1[257*8+7:257*8];
end
//write process for byte 258
always @ (posedge clk) begin
    if((we0[258] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[258] == 1) && (address0 == address1))
        mem[address0][258*8+7:258*8] <= #DLY din1[258*8+7:258*8];
    else if ((we0[258] == 1) && (ce0 == 1))
        mem[address0][258*8+7:258*8] <= #DLY din0[258*8+7:258*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[258] == 1))
        mem[address1][258*8+7:258*8] <= #DLY din1[258*8+7:258*8];
end
//write process for byte 259
always @ (posedge clk) begin
    if((we0[259] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[259] == 1) && (address0 == address1))
        mem[address0][259*8+7:259*8] <= #DLY din1[259*8+7:259*8];
    else if ((we0[259] == 1) && (ce0 == 1))
        mem[address0][259*8+7:259*8] <= #DLY din0[259*8+7:259*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[259] == 1))
        mem[address1][259*8+7:259*8] <= #DLY din1[259*8+7:259*8];
end
//write process for byte 260
always @ (posedge clk) begin
    if((we0[260] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[260] == 1) && (address0 == address1))
        mem[address0][260*8+7:260*8] <= #DLY din1[260*8+7:260*8];
    else if ((we0[260] == 1) && (ce0 == 1))
        mem[address0][260*8+7:260*8] <= #DLY din0[260*8+7:260*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[260] == 1))
        mem[address1][260*8+7:260*8] <= #DLY din1[260*8+7:260*8];
end
//write process for byte 261
always @ (posedge clk) begin
    if((we0[261] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[261] == 1) && (address0 == address1))
        mem[address0][261*8+7:261*8] <= #DLY din1[261*8+7:261*8];
    else if ((we0[261] == 1) && (ce0 == 1))
        mem[address0][261*8+7:261*8] <= #DLY din0[261*8+7:261*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[261] == 1))
        mem[address1][261*8+7:261*8] <= #DLY din1[261*8+7:261*8];
end
//write process for byte 262
always @ (posedge clk) begin
    if((we0[262] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[262] == 1) && (address0 == address1))
        mem[address0][262*8+7:262*8] <= #DLY din1[262*8+7:262*8];
    else if ((we0[262] == 1) && (ce0 == 1))
        mem[address0][262*8+7:262*8] <= #DLY din0[262*8+7:262*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[262] == 1))
        mem[address1][262*8+7:262*8] <= #DLY din1[262*8+7:262*8];
end
//write process for byte 263
always @ (posedge clk) begin
    if((we0[263] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[263] == 1) && (address0 == address1))
        mem[address0][263*8+7:263*8] <= #DLY din1[263*8+7:263*8];
    else if ((we0[263] == 1) && (ce0 == 1))
        mem[address0][263*8+7:263*8] <= #DLY din0[263*8+7:263*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[263] == 1))
        mem[address1][263*8+7:263*8] <= #DLY din1[263*8+7:263*8];
end
//write process for byte 264
always @ (posedge clk) begin
    if((we0[264] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[264] == 1) && (address0 == address1))
        mem[address0][264*8+7:264*8] <= #DLY din1[264*8+7:264*8];
    else if ((we0[264] == 1) && (ce0 == 1))
        mem[address0][264*8+7:264*8] <= #DLY din0[264*8+7:264*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[264] == 1))
        mem[address1][264*8+7:264*8] <= #DLY din1[264*8+7:264*8];
end
//write process for byte 265
always @ (posedge clk) begin
    if((we0[265] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[265] == 1) && (address0 == address1))
        mem[address0][265*8+7:265*8] <= #DLY din1[265*8+7:265*8];
    else if ((we0[265] == 1) && (ce0 == 1))
        mem[address0][265*8+7:265*8] <= #DLY din0[265*8+7:265*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[265] == 1))
        mem[address1][265*8+7:265*8] <= #DLY din1[265*8+7:265*8];
end
//write process for byte 266
always @ (posedge clk) begin
    if((we0[266] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[266] == 1) && (address0 == address1))
        mem[address0][266*8+7:266*8] <= #DLY din1[266*8+7:266*8];
    else if ((we0[266] == 1) && (ce0 == 1))
        mem[address0][266*8+7:266*8] <= #DLY din0[266*8+7:266*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[266] == 1))
        mem[address1][266*8+7:266*8] <= #DLY din1[266*8+7:266*8];
end
//write process for byte 267
always @ (posedge clk) begin
    if((we0[267] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[267] == 1) && (address0 == address1))
        mem[address0][267*8+7:267*8] <= #DLY din1[267*8+7:267*8];
    else if ((we0[267] == 1) && (ce0 == 1))
        mem[address0][267*8+7:267*8] <= #DLY din0[267*8+7:267*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[267] == 1))
        mem[address1][267*8+7:267*8] <= #DLY din1[267*8+7:267*8];
end
//write process for byte 268
always @ (posedge clk) begin
    if((we0[268] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[268] == 1) && (address0 == address1))
        mem[address0][268*8+7:268*8] <= #DLY din1[268*8+7:268*8];
    else if ((we0[268] == 1) && (ce0 == 1))
        mem[address0][268*8+7:268*8] <= #DLY din0[268*8+7:268*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[268] == 1))
        mem[address1][268*8+7:268*8] <= #DLY din1[268*8+7:268*8];
end
//write process for byte 269
always @ (posedge clk) begin
    if((we0[269] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[269] == 1) && (address0 == address1))
        mem[address0][269*8+7:269*8] <= #DLY din1[269*8+7:269*8];
    else if ((we0[269] == 1) && (ce0 == 1))
        mem[address0][269*8+7:269*8] <= #DLY din0[269*8+7:269*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[269] == 1))
        mem[address1][269*8+7:269*8] <= #DLY din1[269*8+7:269*8];
end
//write process for byte 270
always @ (posedge clk) begin
    if((we0[270] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[270] == 1) && (address0 == address1))
        mem[address0][270*8+7:270*8] <= #DLY din1[270*8+7:270*8];
    else if ((we0[270] == 1) && (ce0 == 1))
        mem[address0][270*8+7:270*8] <= #DLY din0[270*8+7:270*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[270] == 1))
        mem[address1][270*8+7:270*8] <= #DLY din1[270*8+7:270*8];
end
//write process for byte 271
always @ (posedge clk) begin
    if((we0[271] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[271] == 1) && (address0 == address1))
        mem[address0][271*8+7:271*8] <= #DLY din1[271*8+7:271*8];
    else if ((we0[271] == 1) && (ce0 == 1))
        mem[address0][271*8+7:271*8] <= #DLY din0[271*8+7:271*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[271] == 1))
        mem[address1][271*8+7:271*8] <= #DLY din1[271*8+7:271*8];
end
//write process for byte 272
always @ (posedge clk) begin
    if((we0[272] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[272] == 1) && (address0 == address1))
        mem[address0][272*8+7:272*8] <= #DLY din1[272*8+7:272*8];
    else if ((we0[272] == 1) && (ce0 == 1))
        mem[address0][272*8+7:272*8] <= #DLY din0[272*8+7:272*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[272] == 1))
        mem[address1][272*8+7:272*8] <= #DLY din1[272*8+7:272*8];
end
//write process for byte 273
always @ (posedge clk) begin
    if((we0[273] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[273] == 1) && (address0 == address1))
        mem[address0][273*8+7:273*8] <= #DLY din1[273*8+7:273*8];
    else if ((we0[273] == 1) && (ce0 == 1))
        mem[address0][273*8+7:273*8] <= #DLY din0[273*8+7:273*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[273] == 1))
        mem[address1][273*8+7:273*8] <= #DLY din1[273*8+7:273*8];
end
//write process for byte 274
always @ (posedge clk) begin
    if((we0[274] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[274] == 1) && (address0 == address1))
        mem[address0][274*8+7:274*8] <= #DLY din1[274*8+7:274*8];
    else if ((we0[274] == 1) && (ce0 == 1))
        mem[address0][274*8+7:274*8] <= #DLY din0[274*8+7:274*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[274] == 1))
        mem[address1][274*8+7:274*8] <= #DLY din1[274*8+7:274*8];
end
//write process for byte 275
always @ (posedge clk) begin
    if((we0[275] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[275] == 1) && (address0 == address1))
        mem[address0][275*8+7:275*8] <= #DLY din1[275*8+7:275*8];
    else if ((we0[275] == 1) && (ce0 == 1))
        mem[address0][275*8+7:275*8] <= #DLY din0[275*8+7:275*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[275] == 1))
        mem[address1][275*8+7:275*8] <= #DLY din1[275*8+7:275*8];
end
//write process for byte 276
always @ (posedge clk) begin
    if((we0[276] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[276] == 1) && (address0 == address1))
        mem[address0][276*8+7:276*8] <= #DLY din1[276*8+7:276*8];
    else if ((we0[276] == 1) && (ce0 == 1))
        mem[address0][276*8+7:276*8] <= #DLY din0[276*8+7:276*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[276] == 1))
        mem[address1][276*8+7:276*8] <= #DLY din1[276*8+7:276*8];
end
//write process for byte 277
always @ (posedge clk) begin
    if((we0[277] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[277] == 1) && (address0 == address1))
        mem[address0][277*8+7:277*8] <= #DLY din1[277*8+7:277*8];
    else if ((we0[277] == 1) && (ce0 == 1))
        mem[address0][277*8+7:277*8] <= #DLY din0[277*8+7:277*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[277] == 1))
        mem[address1][277*8+7:277*8] <= #DLY din1[277*8+7:277*8];
end
//write process for byte 278
always @ (posedge clk) begin
    if((we0[278] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[278] == 1) && (address0 == address1))
        mem[address0][278*8+7:278*8] <= #DLY din1[278*8+7:278*8];
    else if ((we0[278] == 1) && (ce0 == 1))
        mem[address0][278*8+7:278*8] <= #DLY din0[278*8+7:278*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[278] == 1))
        mem[address1][278*8+7:278*8] <= #DLY din1[278*8+7:278*8];
end
//write process for byte 279
always @ (posedge clk) begin
    if((we0[279] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[279] == 1) && (address0 == address1))
        mem[address0][279*8+7:279*8] <= #DLY din1[279*8+7:279*8];
    else if ((we0[279] == 1) && (ce0 == 1))
        mem[address0][279*8+7:279*8] <= #DLY din0[279*8+7:279*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[279] == 1))
        mem[address1][279*8+7:279*8] <= #DLY din1[279*8+7:279*8];
end
//write process for byte 280
always @ (posedge clk) begin
    if((we0[280] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[280] == 1) && (address0 == address1))
        mem[address0][280*8+7:280*8] <= #DLY din1[280*8+7:280*8];
    else if ((we0[280] == 1) && (ce0 == 1))
        mem[address0][280*8+7:280*8] <= #DLY din0[280*8+7:280*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[280] == 1))
        mem[address1][280*8+7:280*8] <= #DLY din1[280*8+7:280*8];
end
//write process for byte 281
always @ (posedge clk) begin
    if((we0[281] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[281] == 1) && (address0 == address1))
        mem[address0][281*8+7:281*8] <= #DLY din1[281*8+7:281*8];
    else if ((we0[281] == 1) && (ce0 == 1))
        mem[address0][281*8+7:281*8] <= #DLY din0[281*8+7:281*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[281] == 1))
        mem[address1][281*8+7:281*8] <= #DLY din1[281*8+7:281*8];
end
//write process for byte 282
always @ (posedge clk) begin
    if((we0[282] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[282] == 1) && (address0 == address1))
        mem[address0][282*8+7:282*8] <= #DLY din1[282*8+7:282*8];
    else if ((we0[282] == 1) && (ce0 == 1))
        mem[address0][282*8+7:282*8] <= #DLY din0[282*8+7:282*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[282] == 1))
        mem[address1][282*8+7:282*8] <= #DLY din1[282*8+7:282*8];
end
//write process for byte 283
always @ (posedge clk) begin
    if((we0[283] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[283] == 1) && (address0 == address1))
        mem[address0][283*8+7:283*8] <= #DLY din1[283*8+7:283*8];
    else if ((we0[283] == 1) && (ce0 == 1))
        mem[address0][283*8+7:283*8] <= #DLY din0[283*8+7:283*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[283] == 1))
        mem[address1][283*8+7:283*8] <= #DLY din1[283*8+7:283*8];
end
//write process for byte 284
always @ (posedge clk) begin
    if((we0[284] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[284] == 1) && (address0 == address1))
        mem[address0][284*8+7:284*8] <= #DLY din1[284*8+7:284*8];
    else if ((we0[284] == 1) && (ce0 == 1))
        mem[address0][284*8+7:284*8] <= #DLY din0[284*8+7:284*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[284] == 1))
        mem[address1][284*8+7:284*8] <= #DLY din1[284*8+7:284*8];
end
//write process for byte 285
always @ (posedge clk) begin
    if((we0[285] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[285] == 1) && (address0 == address1))
        mem[address0][285*8+7:285*8] <= #DLY din1[285*8+7:285*8];
    else if ((we0[285] == 1) && (ce0 == 1))
        mem[address0][285*8+7:285*8] <= #DLY din0[285*8+7:285*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[285] == 1))
        mem[address1][285*8+7:285*8] <= #DLY din1[285*8+7:285*8];
end
//write process for byte 286
always @ (posedge clk) begin
    if((we0[286] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[286] == 1) && (address0 == address1))
        mem[address0][286*8+7:286*8] <= #DLY din1[286*8+7:286*8];
    else if ((we0[286] == 1) && (ce0 == 1))
        mem[address0][286*8+7:286*8] <= #DLY din0[286*8+7:286*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[286] == 1))
        mem[address1][286*8+7:286*8] <= #DLY din1[286*8+7:286*8];
end
//write process for byte 287
always @ (posedge clk) begin
    if((we0[287] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[287] == 1) && (address0 == address1))
        mem[address0][287*8+7:287*8] <= #DLY din1[287*8+7:287*8];
    else if ((we0[287] == 1) && (ce0 == 1))
        mem[address0][287*8+7:287*8] <= #DLY din0[287*8+7:287*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[287] == 1))
        mem[address1][287*8+7:287*8] <= #DLY din1[287*8+7:287*8];
end
//write process for byte 288
always @ (posedge clk) begin
    if((we0[288] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[288] == 1) && (address0 == address1))
        mem[address0][288*8+7:288*8] <= #DLY din1[288*8+7:288*8];
    else if ((we0[288] == 1) && (ce0 == 1))
        mem[address0][288*8+7:288*8] <= #DLY din0[288*8+7:288*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[288] == 1))
        mem[address1][288*8+7:288*8] <= #DLY din1[288*8+7:288*8];
end
//write process for byte 289
always @ (posedge clk) begin
    if((we0[289] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[289] == 1) && (address0 == address1))
        mem[address0][289*8+7:289*8] <= #DLY din1[289*8+7:289*8];
    else if ((we0[289] == 1) && (ce0 == 1))
        mem[address0][289*8+7:289*8] <= #DLY din0[289*8+7:289*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[289] == 1))
        mem[address1][289*8+7:289*8] <= #DLY din1[289*8+7:289*8];
end
//write process for byte 290
always @ (posedge clk) begin
    if((we0[290] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[290] == 1) && (address0 == address1))
        mem[address0][290*8+7:290*8] <= #DLY din1[290*8+7:290*8];
    else if ((we0[290] == 1) && (ce0 == 1))
        mem[address0][290*8+7:290*8] <= #DLY din0[290*8+7:290*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[290] == 1))
        mem[address1][290*8+7:290*8] <= #DLY din1[290*8+7:290*8];
end
//write process for byte 291
always @ (posedge clk) begin
    if((we0[291] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[291] == 1) && (address0 == address1))
        mem[address0][291*8+7:291*8] <= #DLY din1[291*8+7:291*8];
    else if ((we0[291] == 1) && (ce0 == 1))
        mem[address0][291*8+7:291*8] <= #DLY din0[291*8+7:291*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[291] == 1))
        mem[address1][291*8+7:291*8] <= #DLY din1[291*8+7:291*8];
end
//write process for byte 292
always @ (posedge clk) begin
    if((we0[292] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[292] == 1) && (address0 == address1))
        mem[address0][292*8+7:292*8] <= #DLY din1[292*8+7:292*8];
    else if ((we0[292] == 1) && (ce0 == 1))
        mem[address0][292*8+7:292*8] <= #DLY din0[292*8+7:292*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[292] == 1))
        mem[address1][292*8+7:292*8] <= #DLY din1[292*8+7:292*8];
end
//write process for byte 293
always @ (posedge clk) begin
    if((we0[293] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[293] == 1) && (address0 == address1))
        mem[address0][293*8+7:293*8] <= #DLY din1[293*8+7:293*8];
    else if ((we0[293] == 1) && (ce0 == 1))
        mem[address0][293*8+7:293*8] <= #DLY din0[293*8+7:293*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[293] == 1))
        mem[address1][293*8+7:293*8] <= #DLY din1[293*8+7:293*8];
end
//write process for byte 294
always @ (posedge clk) begin
    if((we0[294] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[294] == 1) && (address0 == address1))
        mem[address0][294*8+7:294*8] <= #DLY din1[294*8+7:294*8];
    else if ((we0[294] == 1) && (ce0 == 1))
        mem[address0][294*8+7:294*8] <= #DLY din0[294*8+7:294*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[294] == 1))
        mem[address1][294*8+7:294*8] <= #DLY din1[294*8+7:294*8];
end
//write process for byte 295
always @ (posedge clk) begin
    if((we0[295] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[295] == 1) && (address0 == address1))
        mem[address0][295*8+7:295*8] <= #DLY din1[295*8+7:295*8];
    else if ((we0[295] == 1) && (ce0 == 1))
        mem[address0][295*8+7:295*8] <= #DLY din0[295*8+7:295*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[295] == 1))
        mem[address1][295*8+7:295*8] <= #DLY din1[295*8+7:295*8];
end
//write process for byte 296
always @ (posedge clk) begin
    if((we0[296] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[296] == 1) && (address0 == address1))
        mem[address0][296*8+7:296*8] <= #DLY din1[296*8+7:296*8];
    else if ((we0[296] == 1) && (ce0 == 1))
        mem[address0][296*8+7:296*8] <= #DLY din0[296*8+7:296*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[296] == 1))
        mem[address1][296*8+7:296*8] <= #DLY din1[296*8+7:296*8];
end
//write process for byte 297
always @ (posedge clk) begin
    if((we0[297] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[297] == 1) && (address0 == address1))
        mem[address0][297*8+7:297*8] <= #DLY din1[297*8+7:297*8];
    else if ((we0[297] == 1) && (ce0 == 1))
        mem[address0][297*8+7:297*8] <= #DLY din0[297*8+7:297*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[297] == 1))
        mem[address1][297*8+7:297*8] <= #DLY din1[297*8+7:297*8];
end
//write process for byte 298
always @ (posedge clk) begin
    if((we0[298] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[298] == 1) && (address0 == address1))
        mem[address0][298*8+7:298*8] <= #DLY din1[298*8+7:298*8];
    else if ((we0[298] == 1) && (ce0 == 1))
        mem[address0][298*8+7:298*8] <= #DLY din0[298*8+7:298*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[298] == 1))
        mem[address1][298*8+7:298*8] <= #DLY din1[298*8+7:298*8];
end
//write process for byte 299
always @ (posedge clk) begin
    if((we0[299] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[299] == 1) && (address0 == address1))
        mem[address0][299*8+7:299*8] <= #DLY din1[299*8+7:299*8];
    else if ((we0[299] == 1) && (ce0 == 1))
        mem[address0][299*8+7:299*8] <= #DLY din0[299*8+7:299*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[299] == 1))
        mem[address1][299*8+7:299*8] <= #DLY din1[299*8+7:299*8];
end
//write process for byte 300
always @ (posedge clk) begin
    if((we0[300] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[300] == 1) && (address0 == address1))
        mem[address0][300*8+7:300*8] <= #DLY din1[300*8+7:300*8];
    else if ((we0[300] == 1) && (ce0 == 1))
        mem[address0][300*8+7:300*8] <= #DLY din0[300*8+7:300*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[300] == 1))
        mem[address1][300*8+7:300*8] <= #DLY din1[300*8+7:300*8];
end
//write process for byte 301
always @ (posedge clk) begin
    if((we0[301] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[301] == 1) && (address0 == address1))
        mem[address0][301*8+7:301*8] <= #DLY din1[301*8+7:301*8];
    else if ((we0[301] == 1) && (ce0 == 1))
        mem[address0][301*8+7:301*8] <= #DLY din0[301*8+7:301*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[301] == 1))
        mem[address1][301*8+7:301*8] <= #DLY din1[301*8+7:301*8];
end
//write process for byte 302
always @ (posedge clk) begin
    if((we0[302] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[302] == 1) && (address0 == address1))
        mem[address0][302*8+7:302*8] <= #DLY din1[302*8+7:302*8];
    else if ((we0[302] == 1) && (ce0 == 1))
        mem[address0][302*8+7:302*8] <= #DLY din0[302*8+7:302*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[302] == 1))
        mem[address1][302*8+7:302*8] <= #DLY din1[302*8+7:302*8];
end
//write process for byte 303
always @ (posedge clk) begin
    if((we0[303] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[303] == 1) && (address0 == address1))
        mem[address0][303*8+7:303*8] <= #DLY din1[303*8+7:303*8];
    else if ((we0[303] == 1) && (ce0 == 1))
        mem[address0][303*8+7:303*8] <= #DLY din0[303*8+7:303*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[303] == 1))
        mem[address1][303*8+7:303*8] <= #DLY din1[303*8+7:303*8];
end
//write process for byte 304
always @ (posedge clk) begin
    if((we0[304] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[304] == 1) && (address0 == address1))
        mem[address0][304*8+7:304*8] <= #DLY din1[304*8+7:304*8];
    else if ((we0[304] == 1) && (ce0 == 1))
        mem[address0][304*8+7:304*8] <= #DLY din0[304*8+7:304*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[304] == 1))
        mem[address1][304*8+7:304*8] <= #DLY din1[304*8+7:304*8];
end
//write process for byte 305
always @ (posedge clk) begin
    if((we0[305] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[305] == 1) && (address0 == address1))
        mem[address0][305*8+7:305*8] <= #DLY din1[305*8+7:305*8];
    else if ((we0[305] == 1) && (ce0 == 1))
        mem[address0][305*8+7:305*8] <= #DLY din0[305*8+7:305*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[305] == 1))
        mem[address1][305*8+7:305*8] <= #DLY din1[305*8+7:305*8];
end
//write process for byte 306
always @ (posedge clk) begin
    if((we0[306] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[306] == 1) && (address0 == address1))
        mem[address0][306*8+7:306*8] <= #DLY din1[306*8+7:306*8];
    else if ((we0[306] == 1) && (ce0 == 1))
        mem[address0][306*8+7:306*8] <= #DLY din0[306*8+7:306*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[306] == 1))
        mem[address1][306*8+7:306*8] <= #DLY din1[306*8+7:306*8];
end
//write process for byte 307
always @ (posedge clk) begin
    if((we0[307] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[307] == 1) && (address0 == address1))
        mem[address0][307*8+7:307*8] <= #DLY din1[307*8+7:307*8];
    else if ((we0[307] == 1) && (ce0 == 1))
        mem[address0][307*8+7:307*8] <= #DLY din0[307*8+7:307*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[307] == 1))
        mem[address1][307*8+7:307*8] <= #DLY din1[307*8+7:307*8];
end
//write process for byte 308
always @ (posedge clk) begin
    if((we0[308] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[308] == 1) && (address0 == address1))
        mem[address0][308*8+7:308*8] <= #DLY din1[308*8+7:308*8];
    else if ((we0[308] == 1) && (ce0 == 1))
        mem[address0][308*8+7:308*8] <= #DLY din0[308*8+7:308*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[308] == 1))
        mem[address1][308*8+7:308*8] <= #DLY din1[308*8+7:308*8];
end
//write process for byte 309
always @ (posedge clk) begin
    if((we0[309] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[309] == 1) && (address0 == address1))
        mem[address0][309*8+7:309*8] <= #DLY din1[309*8+7:309*8];
    else if ((we0[309] == 1) && (ce0 == 1))
        mem[address0][309*8+7:309*8] <= #DLY din0[309*8+7:309*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[309] == 1))
        mem[address1][309*8+7:309*8] <= #DLY din1[309*8+7:309*8];
end
//write process for byte 310
always @ (posedge clk) begin
    if((we0[310] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[310] == 1) && (address0 == address1))
        mem[address0][310*8+7:310*8] <= #DLY din1[310*8+7:310*8];
    else if ((we0[310] == 1) && (ce0 == 1))
        mem[address0][310*8+7:310*8] <= #DLY din0[310*8+7:310*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[310] == 1))
        mem[address1][310*8+7:310*8] <= #DLY din1[310*8+7:310*8];
end
//write process for byte 311
always @ (posedge clk) begin
    if((we0[311] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[311] == 1) && (address0 == address1))
        mem[address0][311*8+7:311*8] <= #DLY din1[311*8+7:311*8];
    else if ((we0[311] == 1) && (ce0 == 1))
        mem[address0][311*8+7:311*8] <= #DLY din0[311*8+7:311*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[311] == 1))
        mem[address1][311*8+7:311*8] <= #DLY din1[311*8+7:311*8];
end
//write process for byte 312
always @ (posedge clk) begin
    if((we0[312] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[312] == 1) && (address0 == address1))
        mem[address0][312*8+7:312*8] <= #DLY din1[312*8+7:312*8];
    else if ((we0[312] == 1) && (ce0 == 1))
        mem[address0][312*8+7:312*8] <= #DLY din0[312*8+7:312*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[312] == 1))
        mem[address1][312*8+7:312*8] <= #DLY din1[312*8+7:312*8];
end
//write process for byte 313
always @ (posedge clk) begin
    if((we0[313] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[313] == 1) && (address0 == address1))
        mem[address0][313*8+7:313*8] <= #DLY din1[313*8+7:313*8];
    else if ((we0[313] == 1) && (ce0 == 1))
        mem[address0][313*8+7:313*8] <= #DLY din0[313*8+7:313*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[313] == 1))
        mem[address1][313*8+7:313*8] <= #DLY din1[313*8+7:313*8];
end
//write process for byte 314
always @ (posedge clk) begin
    if((we0[314] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[314] == 1) && (address0 == address1))
        mem[address0][314*8+7:314*8] <= #DLY din1[314*8+7:314*8];
    else if ((we0[314] == 1) && (ce0 == 1))
        mem[address0][314*8+7:314*8] <= #DLY din0[314*8+7:314*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[314] == 1))
        mem[address1][314*8+7:314*8] <= #DLY din1[314*8+7:314*8];
end
//write process for byte 315
always @ (posedge clk) begin
    if((we0[315] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[315] == 1) && (address0 == address1))
        mem[address0][315*8+7:315*8] <= #DLY din1[315*8+7:315*8];
    else if ((we0[315] == 1) && (ce0 == 1))
        mem[address0][315*8+7:315*8] <= #DLY din0[315*8+7:315*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[315] == 1))
        mem[address1][315*8+7:315*8] <= #DLY din1[315*8+7:315*8];
end
//write process for byte 316
always @ (posedge clk) begin
    if((we0[316] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[316] == 1) && (address0 == address1))
        mem[address0][316*8+7:316*8] <= #DLY din1[316*8+7:316*8];
    else if ((we0[316] == 1) && (ce0 == 1))
        mem[address0][316*8+7:316*8] <= #DLY din0[316*8+7:316*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[316] == 1))
        mem[address1][316*8+7:316*8] <= #DLY din1[316*8+7:316*8];
end
//write process for byte 317
always @ (posedge clk) begin
    if((we0[317] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[317] == 1) && (address0 == address1))
        mem[address0][317*8+7:317*8] <= #DLY din1[317*8+7:317*8];
    else if ((we0[317] == 1) && (ce0 == 1))
        mem[address0][317*8+7:317*8] <= #DLY din0[317*8+7:317*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[317] == 1))
        mem[address1][317*8+7:317*8] <= #DLY din1[317*8+7:317*8];
end
//write process for byte 318
always @ (posedge clk) begin
    if((we0[318] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[318] == 1) && (address0 == address1))
        mem[address0][318*8+7:318*8] <= #DLY din1[318*8+7:318*8];
    else if ((we0[318] == 1) && (ce0 == 1))
        mem[address0][318*8+7:318*8] <= #DLY din0[318*8+7:318*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[318] == 1))
        mem[address1][318*8+7:318*8] <= #DLY din1[318*8+7:318*8];
end
//write process for byte 319
always @ (posedge clk) begin
    if((we0[319] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[319] == 1) && (address0 == address1))
        mem[address0][319*8+7:319*8] <= #DLY din1[319*8+7:319*8];
    else if ((we0[319] == 1) && (ce0 == 1))
        mem[address0][319*8+7:319*8] <= #DLY din0[319*8+7:319*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[319] == 1))
        mem[address1][319*8+7:319*8] <= #DLY din1[319*8+7:319*8];
end
//write process for byte 320
always @ (posedge clk) begin
    if((we0[320] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[320] == 1) && (address0 == address1))
        mem[address0][320*8+7:320*8] <= #DLY din1[320*8+7:320*8];
    else if ((we0[320] == 1) && (ce0 == 1))
        mem[address0][320*8+7:320*8] <= #DLY din0[320*8+7:320*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[320] == 1))
        mem[address1][320*8+7:320*8] <= #DLY din1[320*8+7:320*8];
end
//write process for byte 321
always @ (posedge clk) begin
    if((we0[321] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[321] == 1) && (address0 == address1))
        mem[address0][321*8+7:321*8] <= #DLY din1[321*8+7:321*8];
    else if ((we0[321] == 1) && (ce0 == 1))
        mem[address0][321*8+7:321*8] <= #DLY din0[321*8+7:321*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[321] == 1))
        mem[address1][321*8+7:321*8] <= #DLY din1[321*8+7:321*8];
end
//write process for byte 322
always @ (posedge clk) begin
    if((we0[322] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[322] == 1) && (address0 == address1))
        mem[address0][322*8+7:322*8] <= #DLY din1[322*8+7:322*8];
    else if ((we0[322] == 1) && (ce0 == 1))
        mem[address0][322*8+7:322*8] <= #DLY din0[322*8+7:322*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[322] == 1))
        mem[address1][322*8+7:322*8] <= #DLY din1[322*8+7:322*8];
end
//write process for byte 323
always @ (posedge clk) begin
    if((we0[323] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[323] == 1) && (address0 == address1))
        mem[address0][323*8+7:323*8] <= #DLY din1[323*8+7:323*8];
    else if ((we0[323] == 1) && (ce0 == 1))
        mem[address0][323*8+7:323*8] <= #DLY din0[323*8+7:323*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[323] == 1))
        mem[address1][323*8+7:323*8] <= #DLY din1[323*8+7:323*8];
end
//write process for byte 324
always @ (posedge clk) begin
    if((we0[324] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[324] == 1) && (address0 == address1))
        mem[address0][324*8+7:324*8] <= #DLY din1[324*8+7:324*8];
    else if ((we0[324] == 1) && (ce0 == 1))
        mem[address0][324*8+7:324*8] <= #DLY din0[324*8+7:324*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[324] == 1))
        mem[address1][324*8+7:324*8] <= #DLY din1[324*8+7:324*8];
end
//write process for byte 325
always @ (posedge clk) begin
    if((we0[325] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[325] == 1) && (address0 == address1))
        mem[address0][325*8+7:325*8] <= #DLY din1[325*8+7:325*8];
    else if ((we0[325] == 1) && (ce0 == 1))
        mem[address0][325*8+7:325*8] <= #DLY din0[325*8+7:325*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[325] == 1))
        mem[address1][325*8+7:325*8] <= #DLY din1[325*8+7:325*8];
end
//write process for byte 326
always @ (posedge clk) begin
    if((we0[326] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[326] == 1) && (address0 == address1))
        mem[address0][326*8+7:326*8] <= #DLY din1[326*8+7:326*8];
    else if ((we0[326] == 1) && (ce0 == 1))
        mem[address0][326*8+7:326*8] <= #DLY din0[326*8+7:326*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[326] == 1))
        mem[address1][326*8+7:326*8] <= #DLY din1[326*8+7:326*8];
end
//write process for byte 327
always @ (posedge clk) begin
    if((we0[327] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[327] == 1) && (address0 == address1))
        mem[address0][327*8+7:327*8] <= #DLY din1[327*8+7:327*8];
    else if ((we0[327] == 1) && (ce0 == 1))
        mem[address0][327*8+7:327*8] <= #DLY din0[327*8+7:327*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[327] == 1))
        mem[address1][327*8+7:327*8] <= #DLY din1[327*8+7:327*8];
end
//write process for byte 328
always @ (posedge clk) begin
    if((we0[328] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[328] == 1) && (address0 == address1))
        mem[address0][328*8+7:328*8] <= #DLY din1[328*8+7:328*8];
    else if ((we0[328] == 1) && (ce0 == 1))
        mem[address0][328*8+7:328*8] <= #DLY din0[328*8+7:328*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[328] == 1))
        mem[address1][328*8+7:328*8] <= #DLY din1[328*8+7:328*8];
end
//write process for byte 329
always @ (posedge clk) begin
    if((we0[329] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[329] == 1) && (address0 == address1))
        mem[address0][329*8+7:329*8] <= #DLY din1[329*8+7:329*8];
    else if ((we0[329] == 1) && (ce0 == 1))
        mem[address0][329*8+7:329*8] <= #DLY din0[329*8+7:329*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[329] == 1))
        mem[address1][329*8+7:329*8] <= #DLY din1[329*8+7:329*8];
end
//write process for byte 330
always @ (posedge clk) begin
    if((we0[330] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[330] == 1) && (address0 == address1))
        mem[address0][330*8+7:330*8] <= #DLY din1[330*8+7:330*8];
    else if ((we0[330] == 1) && (ce0 == 1))
        mem[address0][330*8+7:330*8] <= #DLY din0[330*8+7:330*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[330] == 1))
        mem[address1][330*8+7:330*8] <= #DLY din1[330*8+7:330*8];
end
//write process for byte 331
always @ (posedge clk) begin
    if((we0[331] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[331] == 1) && (address0 == address1))
        mem[address0][331*8+7:331*8] <= #DLY din1[331*8+7:331*8];
    else if ((we0[331] == 1) && (ce0 == 1))
        mem[address0][331*8+7:331*8] <= #DLY din0[331*8+7:331*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[331] == 1))
        mem[address1][331*8+7:331*8] <= #DLY din1[331*8+7:331*8];
end
//write process for byte 332
always @ (posedge clk) begin
    if((we0[332] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[332] == 1) && (address0 == address1))
        mem[address0][332*8+7:332*8] <= #DLY din1[332*8+7:332*8];
    else if ((we0[332] == 1) && (ce0 == 1))
        mem[address0][332*8+7:332*8] <= #DLY din0[332*8+7:332*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[332] == 1))
        mem[address1][332*8+7:332*8] <= #DLY din1[332*8+7:332*8];
end
//write process for byte 333
always @ (posedge clk) begin
    if((we0[333] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[333] == 1) && (address0 == address1))
        mem[address0][333*8+7:333*8] <= #DLY din1[333*8+7:333*8];
    else if ((we0[333] == 1) && (ce0 == 1))
        mem[address0][333*8+7:333*8] <= #DLY din0[333*8+7:333*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[333] == 1))
        mem[address1][333*8+7:333*8] <= #DLY din1[333*8+7:333*8];
end
//write process for byte 334
always @ (posedge clk) begin
    if((we0[334] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[334] == 1) && (address0 == address1))
        mem[address0][334*8+7:334*8] <= #DLY din1[334*8+7:334*8];
    else if ((we0[334] == 1) && (ce0 == 1))
        mem[address0][334*8+7:334*8] <= #DLY din0[334*8+7:334*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[334] == 1))
        mem[address1][334*8+7:334*8] <= #DLY din1[334*8+7:334*8];
end
//write process for byte 335
always @ (posedge clk) begin
    if((we0[335] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[335] == 1) && (address0 == address1))
        mem[address0][335*8+7:335*8] <= #DLY din1[335*8+7:335*8];
    else if ((we0[335] == 1) && (ce0 == 1))
        mem[address0][335*8+7:335*8] <= #DLY din0[335*8+7:335*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[335] == 1))
        mem[address1][335*8+7:335*8] <= #DLY din1[335*8+7:335*8];
end
//write process for byte 336
always @ (posedge clk) begin
    if((we0[336] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[336] == 1) && (address0 == address1))
        mem[address0][336*8+7:336*8] <= #DLY din1[336*8+7:336*8];
    else if ((we0[336] == 1) && (ce0 == 1))
        mem[address0][336*8+7:336*8] <= #DLY din0[336*8+7:336*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[336] == 1))
        mem[address1][336*8+7:336*8] <= #DLY din1[336*8+7:336*8];
end
//write process for byte 337
always @ (posedge clk) begin
    if((we0[337] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[337] == 1) && (address0 == address1))
        mem[address0][337*8+7:337*8] <= #DLY din1[337*8+7:337*8];
    else if ((we0[337] == 1) && (ce0 == 1))
        mem[address0][337*8+7:337*8] <= #DLY din0[337*8+7:337*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[337] == 1))
        mem[address1][337*8+7:337*8] <= #DLY din1[337*8+7:337*8];
end
//write process for byte 338
always @ (posedge clk) begin
    if((we0[338] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[338] == 1) && (address0 == address1))
        mem[address0][338*8+7:338*8] <= #DLY din1[338*8+7:338*8];
    else if ((we0[338] == 1) && (ce0 == 1))
        mem[address0][338*8+7:338*8] <= #DLY din0[338*8+7:338*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[338] == 1))
        mem[address1][338*8+7:338*8] <= #DLY din1[338*8+7:338*8];
end
//write process for byte 339
always @ (posedge clk) begin
    if((we0[339] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[339] == 1) && (address0 == address1))
        mem[address0][339*8+7:339*8] <= #DLY din1[339*8+7:339*8];
    else if ((we0[339] == 1) && (ce0 == 1))
        mem[address0][339*8+7:339*8] <= #DLY din0[339*8+7:339*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[339] == 1))
        mem[address1][339*8+7:339*8] <= #DLY din1[339*8+7:339*8];
end
//write process for byte 340
always @ (posedge clk) begin
    if((we0[340] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[340] == 1) && (address0 == address1))
        mem[address0][340*8+7:340*8] <= #DLY din1[340*8+7:340*8];
    else if ((we0[340] == 1) && (ce0 == 1))
        mem[address0][340*8+7:340*8] <= #DLY din0[340*8+7:340*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[340] == 1))
        mem[address1][340*8+7:340*8] <= #DLY din1[340*8+7:340*8];
end
//write process for byte 341
always @ (posedge clk) begin
    if((we0[341] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[341] == 1) && (address0 == address1))
        mem[address0][341*8+7:341*8] <= #DLY din1[341*8+7:341*8];
    else if ((we0[341] == 1) && (ce0 == 1))
        mem[address0][341*8+7:341*8] <= #DLY din0[341*8+7:341*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[341] == 1))
        mem[address1][341*8+7:341*8] <= #DLY din1[341*8+7:341*8];
end
//write process for byte 342
always @ (posedge clk) begin
    if((we0[342] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[342] == 1) && (address0 == address1))
        mem[address0][342*8+7:342*8] <= #DLY din1[342*8+7:342*8];
    else if ((we0[342] == 1) && (ce0 == 1))
        mem[address0][342*8+7:342*8] <= #DLY din0[342*8+7:342*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[342] == 1))
        mem[address1][342*8+7:342*8] <= #DLY din1[342*8+7:342*8];
end
//write process for byte 343
always @ (posedge clk) begin
    if((we0[343] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[343] == 1) && (address0 == address1))
        mem[address0][343*8+7:343*8] <= #DLY din1[343*8+7:343*8];
    else if ((we0[343] == 1) && (ce0 == 1))
        mem[address0][343*8+7:343*8] <= #DLY din0[343*8+7:343*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[343] == 1))
        mem[address1][343*8+7:343*8] <= #DLY din1[343*8+7:343*8];
end
//write process for byte 344
always @ (posedge clk) begin
    if((we0[344] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[344] == 1) && (address0 == address1))
        mem[address0][344*8+7:344*8] <= #DLY din1[344*8+7:344*8];
    else if ((we0[344] == 1) && (ce0 == 1))
        mem[address0][344*8+7:344*8] <= #DLY din0[344*8+7:344*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[344] == 1))
        mem[address1][344*8+7:344*8] <= #DLY din1[344*8+7:344*8];
end
//write process for byte 345
always @ (posedge clk) begin
    if((we0[345] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[345] == 1) && (address0 == address1))
        mem[address0][345*8+7:345*8] <= #DLY din1[345*8+7:345*8];
    else if ((we0[345] == 1) && (ce0 == 1))
        mem[address0][345*8+7:345*8] <= #DLY din0[345*8+7:345*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[345] == 1))
        mem[address1][345*8+7:345*8] <= #DLY din1[345*8+7:345*8];
end
//write process for byte 346
always @ (posedge clk) begin
    if((we0[346] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[346] == 1) && (address0 == address1))
        mem[address0][346*8+7:346*8] <= #DLY din1[346*8+7:346*8];
    else if ((we0[346] == 1) && (ce0 == 1))
        mem[address0][346*8+7:346*8] <= #DLY din0[346*8+7:346*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[346] == 1))
        mem[address1][346*8+7:346*8] <= #DLY din1[346*8+7:346*8];
end
//write process for byte 347
always @ (posedge clk) begin
    if((we0[347] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[347] == 1) && (address0 == address1))
        mem[address0][347*8+7:347*8] <= #DLY din1[347*8+7:347*8];
    else if ((we0[347] == 1) && (ce0 == 1))
        mem[address0][347*8+7:347*8] <= #DLY din0[347*8+7:347*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[347] == 1))
        mem[address1][347*8+7:347*8] <= #DLY din1[347*8+7:347*8];
end
//write process for byte 348
always @ (posedge clk) begin
    if((we0[348] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[348] == 1) && (address0 == address1))
        mem[address0][348*8+7:348*8] <= #DLY din1[348*8+7:348*8];
    else if ((we0[348] == 1) && (ce0 == 1))
        mem[address0][348*8+7:348*8] <= #DLY din0[348*8+7:348*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[348] == 1))
        mem[address1][348*8+7:348*8] <= #DLY din1[348*8+7:348*8];
end
//write process for byte 349
always @ (posedge clk) begin
    if((we0[349] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[349] == 1) && (address0 == address1))
        mem[address0][349*8+7:349*8] <= #DLY din1[349*8+7:349*8];
    else if ((we0[349] == 1) && (ce0 == 1))
        mem[address0][349*8+7:349*8] <= #DLY din0[349*8+7:349*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[349] == 1))
        mem[address1][349*8+7:349*8] <= #DLY din1[349*8+7:349*8];
end
//write process for byte 350
always @ (posedge clk) begin
    if((we0[350] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[350] == 1) && (address0 == address1))
        mem[address0][350*8+7:350*8] <= #DLY din1[350*8+7:350*8];
    else if ((we0[350] == 1) && (ce0 == 1))
        mem[address0][350*8+7:350*8] <= #DLY din0[350*8+7:350*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[350] == 1))
        mem[address1][350*8+7:350*8] <= #DLY din1[350*8+7:350*8];
end
//write process for byte 351
always @ (posedge clk) begin
    if((we0[351] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[351] == 1) && (address0 == address1))
        mem[address0][351*8+7:351*8] <= #DLY din1[351*8+7:351*8];
    else if ((we0[351] == 1) && (ce0 == 1))
        mem[address0][351*8+7:351*8] <= #DLY din0[351*8+7:351*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[351] == 1))
        mem[address1][351*8+7:351*8] <= #DLY din1[351*8+7:351*8];
end
//write process for byte 352
always @ (posedge clk) begin
    if((we0[352] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[352] == 1) && (address0 == address1))
        mem[address0][352*8+7:352*8] <= #DLY din1[352*8+7:352*8];
    else if ((we0[352] == 1) && (ce0 == 1))
        mem[address0][352*8+7:352*8] <= #DLY din0[352*8+7:352*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[352] == 1))
        mem[address1][352*8+7:352*8] <= #DLY din1[352*8+7:352*8];
end
//write process for byte 353
always @ (posedge clk) begin
    if((we0[353] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[353] == 1) && (address0 == address1))
        mem[address0][353*8+7:353*8] <= #DLY din1[353*8+7:353*8];
    else if ((we0[353] == 1) && (ce0 == 1))
        mem[address0][353*8+7:353*8] <= #DLY din0[353*8+7:353*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[353] == 1))
        mem[address1][353*8+7:353*8] <= #DLY din1[353*8+7:353*8];
end
//write process for byte 354
always @ (posedge clk) begin
    if((we0[354] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[354] == 1) && (address0 == address1))
        mem[address0][354*8+7:354*8] <= #DLY din1[354*8+7:354*8];
    else if ((we0[354] == 1) && (ce0 == 1))
        mem[address0][354*8+7:354*8] <= #DLY din0[354*8+7:354*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[354] == 1))
        mem[address1][354*8+7:354*8] <= #DLY din1[354*8+7:354*8];
end
//write process for byte 355
always @ (posedge clk) begin
    if((we0[355] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[355] == 1) && (address0 == address1))
        mem[address0][355*8+7:355*8] <= #DLY din1[355*8+7:355*8];
    else if ((we0[355] == 1) && (ce0 == 1))
        mem[address0][355*8+7:355*8] <= #DLY din0[355*8+7:355*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[355] == 1))
        mem[address1][355*8+7:355*8] <= #DLY din1[355*8+7:355*8];
end
//write process for byte 356
always @ (posedge clk) begin
    if((we0[356] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[356] == 1) && (address0 == address1))
        mem[address0][356*8+7:356*8] <= #DLY din1[356*8+7:356*8];
    else if ((we0[356] == 1) && (ce0 == 1))
        mem[address0][356*8+7:356*8] <= #DLY din0[356*8+7:356*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[356] == 1))
        mem[address1][356*8+7:356*8] <= #DLY din1[356*8+7:356*8];
end
//write process for byte 357
always @ (posedge clk) begin
    if((we0[357] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[357] == 1) && (address0 == address1))
        mem[address0][357*8+7:357*8] <= #DLY din1[357*8+7:357*8];
    else if ((we0[357] == 1) && (ce0 == 1))
        mem[address0][357*8+7:357*8] <= #DLY din0[357*8+7:357*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[357] == 1))
        mem[address1][357*8+7:357*8] <= #DLY din1[357*8+7:357*8];
end
//write process for byte 358
always @ (posedge clk) begin
    if((we0[358] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[358] == 1) && (address0 == address1))
        mem[address0][358*8+7:358*8] <= #DLY din1[358*8+7:358*8];
    else if ((we0[358] == 1) && (ce0 == 1))
        mem[address0][358*8+7:358*8] <= #DLY din0[358*8+7:358*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[358] == 1))
        mem[address1][358*8+7:358*8] <= #DLY din1[358*8+7:358*8];
end
//write process for byte 359
always @ (posedge clk) begin
    if((we0[359] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[359] == 1) && (address0 == address1))
        mem[address0][359*8+7:359*8] <= #DLY din1[359*8+7:359*8];
    else if ((we0[359] == 1) && (ce0 == 1))
        mem[address0][359*8+7:359*8] <= #DLY din0[359*8+7:359*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[359] == 1))
        mem[address1][359*8+7:359*8] <= #DLY din1[359*8+7:359*8];
end
//write process for byte 360
always @ (posedge clk) begin
    if((we0[360] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[360] == 1) && (address0 == address1))
        mem[address0][360*8+7:360*8] <= #DLY din1[360*8+7:360*8];
    else if ((we0[360] == 1) && (ce0 == 1))
        mem[address0][360*8+7:360*8] <= #DLY din0[360*8+7:360*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[360] == 1))
        mem[address1][360*8+7:360*8] <= #DLY din1[360*8+7:360*8];
end
//write process for byte 361
always @ (posedge clk) begin
    if((we0[361] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[361] == 1) && (address0 == address1))
        mem[address0][361*8+7:361*8] <= #DLY din1[361*8+7:361*8];
    else if ((we0[361] == 1) && (ce0 == 1))
        mem[address0][361*8+7:361*8] <= #DLY din0[361*8+7:361*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[361] == 1))
        mem[address1][361*8+7:361*8] <= #DLY din1[361*8+7:361*8];
end
//write process for byte 362
always @ (posedge clk) begin
    if((we0[362] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[362] == 1) && (address0 == address1))
        mem[address0][362*8+7:362*8] <= #DLY din1[362*8+7:362*8];
    else if ((we0[362] == 1) && (ce0 == 1))
        mem[address0][362*8+7:362*8] <= #DLY din0[362*8+7:362*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[362] == 1))
        mem[address1][362*8+7:362*8] <= #DLY din1[362*8+7:362*8];
end
//write process for byte 363
always @ (posedge clk) begin
    if((we0[363] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[363] == 1) && (address0 == address1))
        mem[address0][363*8+7:363*8] <= #DLY din1[363*8+7:363*8];
    else if ((we0[363] == 1) && (ce0 == 1))
        mem[address0][363*8+7:363*8] <= #DLY din0[363*8+7:363*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[363] == 1))
        mem[address1][363*8+7:363*8] <= #DLY din1[363*8+7:363*8];
end
//write process for byte 364
always @ (posedge clk) begin
    if((we0[364] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[364] == 1) && (address0 == address1))
        mem[address0][364*8+7:364*8] <= #DLY din1[364*8+7:364*8];
    else if ((we0[364] == 1) && (ce0 == 1))
        mem[address0][364*8+7:364*8] <= #DLY din0[364*8+7:364*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[364] == 1))
        mem[address1][364*8+7:364*8] <= #DLY din1[364*8+7:364*8];
end
//write process for byte 365
always @ (posedge clk) begin
    if((we0[365] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[365] == 1) && (address0 == address1))
        mem[address0][365*8+7:365*8] <= #DLY din1[365*8+7:365*8];
    else if ((we0[365] == 1) && (ce0 == 1))
        mem[address0][365*8+7:365*8] <= #DLY din0[365*8+7:365*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[365] == 1))
        mem[address1][365*8+7:365*8] <= #DLY din1[365*8+7:365*8];
end
//write process for byte 366
always @ (posedge clk) begin
    if((we0[366] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[366] == 1) && (address0 == address1))
        mem[address0][366*8+7:366*8] <= #DLY din1[366*8+7:366*8];
    else if ((we0[366] == 1) && (ce0 == 1))
        mem[address0][366*8+7:366*8] <= #DLY din0[366*8+7:366*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[366] == 1))
        mem[address1][366*8+7:366*8] <= #DLY din1[366*8+7:366*8];
end
//write process for byte 367
always @ (posedge clk) begin
    if((we0[367] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[367] == 1) && (address0 == address1))
        mem[address0][367*8+7:367*8] <= #DLY din1[367*8+7:367*8];
    else if ((we0[367] == 1) && (ce0 == 1))
        mem[address0][367*8+7:367*8] <= #DLY din0[367*8+7:367*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[367] == 1))
        mem[address1][367*8+7:367*8] <= #DLY din1[367*8+7:367*8];
end
//write process for byte 368
always @ (posedge clk) begin
    if((we0[368] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[368] == 1) && (address0 == address1))
        mem[address0][368*8+7:368*8] <= #DLY din1[368*8+7:368*8];
    else if ((we0[368] == 1) && (ce0 == 1))
        mem[address0][368*8+7:368*8] <= #DLY din0[368*8+7:368*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[368] == 1))
        mem[address1][368*8+7:368*8] <= #DLY din1[368*8+7:368*8];
end
//write process for byte 369
always @ (posedge clk) begin
    if((we0[369] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[369] == 1) && (address0 == address1))
        mem[address0][369*8+7:369*8] <= #DLY din1[369*8+7:369*8];
    else if ((we0[369] == 1) && (ce0 == 1))
        mem[address0][369*8+7:369*8] <= #DLY din0[369*8+7:369*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[369] == 1))
        mem[address1][369*8+7:369*8] <= #DLY din1[369*8+7:369*8];
end
//write process for byte 370
always @ (posedge clk) begin
    if((we0[370] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[370] == 1) && (address0 == address1))
        mem[address0][370*8+7:370*8] <= #DLY din1[370*8+7:370*8];
    else if ((we0[370] == 1) && (ce0 == 1))
        mem[address0][370*8+7:370*8] <= #DLY din0[370*8+7:370*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[370] == 1))
        mem[address1][370*8+7:370*8] <= #DLY din1[370*8+7:370*8];
end
//write process for byte 371
always @ (posedge clk) begin
    if((we0[371] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[371] == 1) && (address0 == address1))
        mem[address0][371*8+7:371*8] <= #DLY din1[371*8+7:371*8];
    else if ((we0[371] == 1) && (ce0 == 1))
        mem[address0][371*8+7:371*8] <= #DLY din0[371*8+7:371*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[371] == 1))
        mem[address1][371*8+7:371*8] <= #DLY din1[371*8+7:371*8];
end
//write process for byte 372
always @ (posedge clk) begin
    if((we0[372] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[372] == 1) && (address0 == address1))
        mem[address0][372*8+7:372*8] <= #DLY din1[372*8+7:372*8];
    else if ((we0[372] == 1) && (ce0 == 1))
        mem[address0][372*8+7:372*8] <= #DLY din0[372*8+7:372*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[372] == 1))
        mem[address1][372*8+7:372*8] <= #DLY din1[372*8+7:372*8];
end
//write process for byte 373
always @ (posedge clk) begin
    if((we0[373] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[373] == 1) && (address0 == address1))
        mem[address0][373*8+7:373*8] <= #DLY din1[373*8+7:373*8];
    else if ((we0[373] == 1) && (ce0 == 1))
        mem[address0][373*8+7:373*8] <= #DLY din0[373*8+7:373*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[373] == 1))
        mem[address1][373*8+7:373*8] <= #DLY din1[373*8+7:373*8];
end
//write process for byte 374
always @ (posedge clk) begin
    if((we0[374] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[374] == 1) && (address0 == address1))
        mem[address0][374*8+7:374*8] <= #DLY din1[374*8+7:374*8];
    else if ((we0[374] == 1) && (ce0 == 1))
        mem[address0][374*8+7:374*8] <= #DLY din0[374*8+7:374*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[374] == 1))
        mem[address1][374*8+7:374*8] <= #DLY din1[374*8+7:374*8];
end
//write process for byte 375
always @ (posedge clk) begin
    if((we0[375] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[375] == 1) && (address0 == address1))
        mem[address0][375*8+7:375*8] <= #DLY din1[375*8+7:375*8];
    else if ((we0[375] == 1) && (ce0 == 1))
        mem[address0][375*8+7:375*8] <= #DLY din0[375*8+7:375*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[375] == 1))
        mem[address1][375*8+7:375*8] <= #DLY din1[375*8+7:375*8];
end
//write process for byte 376
always @ (posedge clk) begin
    if((we0[376] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[376] == 1) && (address0 == address1))
        mem[address0][376*8+7:376*8] <= #DLY din1[376*8+7:376*8];
    else if ((we0[376] == 1) && (ce0 == 1))
        mem[address0][376*8+7:376*8] <= #DLY din0[376*8+7:376*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[376] == 1))
        mem[address1][376*8+7:376*8] <= #DLY din1[376*8+7:376*8];
end
//write process for byte 377
always @ (posedge clk) begin
    if((we0[377] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[377] == 1) && (address0 == address1))
        mem[address0][377*8+7:377*8] <= #DLY din1[377*8+7:377*8];
    else if ((we0[377] == 1) && (ce0 == 1))
        mem[address0][377*8+7:377*8] <= #DLY din0[377*8+7:377*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[377] == 1))
        mem[address1][377*8+7:377*8] <= #DLY din1[377*8+7:377*8];
end
//write process for byte 378
always @ (posedge clk) begin
    if((we0[378] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[378] == 1) && (address0 == address1))
        mem[address0][378*8+7:378*8] <= #DLY din1[378*8+7:378*8];
    else if ((we0[378] == 1) && (ce0 == 1))
        mem[address0][378*8+7:378*8] <= #DLY din0[378*8+7:378*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[378] == 1))
        mem[address1][378*8+7:378*8] <= #DLY din1[378*8+7:378*8];
end
//write process for byte 379
always @ (posedge clk) begin
    if((we0[379] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[379] == 1) && (address0 == address1))
        mem[address0][379*8+7:379*8] <= #DLY din1[379*8+7:379*8];
    else if ((we0[379] == 1) && (ce0 == 1))
        mem[address0][379*8+7:379*8] <= #DLY din0[379*8+7:379*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[379] == 1))
        mem[address1][379*8+7:379*8] <= #DLY din1[379*8+7:379*8];
end
//write process for byte 380
always @ (posedge clk) begin
    if((we0[380] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[380] == 1) && (address0 == address1))
        mem[address0][380*8+7:380*8] <= #DLY din1[380*8+7:380*8];
    else if ((we0[380] == 1) && (ce0 == 1))
        mem[address0][380*8+7:380*8] <= #DLY din0[380*8+7:380*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[380] == 1))
        mem[address1][380*8+7:380*8] <= #DLY din1[380*8+7:380*8];
end
//write process for byte 381
always @ (posedge clk) begin
    if((we0[381] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[381] == 1) && (address0 == address1))
        mem[address0][381*8+7:381*8] <= #DLY din1[381*8+7:381*8];
    else if ((we0[381] == 1) && (ce0 == 1))
        mem[address0][381*8+7:381*8] <= #DLY din0[381*8+7:381*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[381] == 1))
        mem[address1][381*8+7:381*8] <= #DLY din1[381*8+7:381*8];
end
//write process for byte 382
always @ (posedge clk) begin
    if((we0[382] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[382] == 1) && (address0 == address1))
        mem[address0][382*8+7:382*8] <= #DLY din1[382*8+7:382*8];
    else if ((we0[382] == 1) && (ce0 == 1))
        mem[address0][382*8+7:382*8] <= #DLY din0[382*8+7:382*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[382] == 1))
        mem[address1][382*8+7:382*8] <= #DLY din1[382*8+7:382*8];
end
//write process for byte 383
always @ (posedge clk) begin
    if((we0[383] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[383] == 1) && (address0 == address1))
        mem[address0][383*8+7:383*8] <= #DLY din1[383*8+7:383*8];
    else if ((we0[383] == 1) && (ce0 == 1))
        mem[address0][383*8+7:383*8] <= #DLY din0[383*8+7:383*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[383] == 1))
        mem[address1][383*8+7:383*8] <= #DLY din1[383*8+7:383*8];
end
//write process for byte 384
always @ (posedge clk) begin
    if((we0[384] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[384] == 1) && (address0 == address1))
        mem[address0][384*8+7:384*8] <= #DLY din1[384*8+7:384*8];
    else if ((we0[384] == 1) && (ce0 == 1))
        mem[address0][384*8+7:384*8] <= #DLY din0[384*8+7:384*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[384] == 1))
        mem[address1][384*8+7:384*8] <= #DLY din1[384*8+7:384*8];
end
//write process for byte 385
always @ (posedge clk) begin
    if((we0[385] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[385] == 1) && (address0 == address1))
        mem[address0][385*8+7:385*8] <= #DLY din1[385*8+7:385*8];
    else if ((we0[385] == 1) && (ce0 == 1))
        mem[address0][385*8+7:385*8] <= #DLY din0[385*8+7:385*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[385] == 1))
        mem[address1][385*8+7:385*8] <= #DLY din1[385*8+7:385*8];
end
//write process for byte 386
always @ (posedge clk) begin
    if((we0[386] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[386] == 1) && (address0 == address1))
        mem[address0][386*8+7:386*8] <= #DLY din1[386*8+7:386*8];
    else if ((we0[386] == 1) && (ce0 == 1))
        mem[address0][386*8+7:386*8] <= #DLY din0[386*8+7:386*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[386] == 1))
        mem[address1][386*8+7:386*8] <= #DLY din1[386*8+7:386*8];
end
//write process for byte 387
always @ (posedge clk) begin
    if((we0[387] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[387] == 1) && (address0 == address1))
        mem[address0][387*8+7:387*8] <= #DLY din1[387*8+7:387*8];
    else if ((we0[387] == 1) && (ce0 == 1))
        mem[address0][387*8+7:387*8] <= #DLY din0[387*8+7:387*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[387] == 1))
        mem[address1][387*8+7:387*8] <= #DLY din1[387*8+7:387*8];
end
//write process for byte 388
always @ (posedge clk) begin
    if((we0[388] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[388] == 1) && (address0 == address1))
        mem[address0][388*8+7:388*8] <= #DLY din1[388*8+7:388*8];
    else if ((we0[388] == 1) && (ce0 == 1))
        mem[address0][388*8+7:388*8] <= #DLY din0[388*8+7:388*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[388] == 1))
        mem[address1][388*8+7:388*8] <= #DLY din1[388*8+7:388*8];
end
//write process for byte 389
always @ (posedge clk) begin
    if((we0[389] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[389] == 1) && (address0 == address1))
        mem[address0][389*8+7:389*8] <= #DLY din1[389*8+7:389*8];
    else if ((we0[389] == 1) && (ce0 == 1))
        mem[address0][389*8+7:389*8] <= #DLY din0[389*8+7:389*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[389] == 1))
        mem[address1][389*8+7:389*8] <= #DLY din1[389*8+7:389*8];
end
//write process for byte 390
always @ (posedge clk) begin
    if((we0[390] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[390] == 1) && (address0 == address1))
        mem[address0][390*8+7:390*8] <= #DLY din1[390*8+7:390*8];
    else if ((we0[390] == 1) && (ce0 == 1))
        mem[address0][390*8+7:390*8] <= #DLY din0[390*8+7:390*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[390] == 1))
        mem[address1][390*8+7:390*8] <= #DLY din1[390*8+7:390*8];
end
//write process for byte 391
always @ (posedge clk) begin
    if((we0[391] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[391] == 1) && (address0 == address1))
        mem[address0][391*8+7:391*8] <= #DLY din1[391*8+7:391*8];
    else if ((we0[391] == 1) && (ce0 == 1))
        mem[address0][391*8+7:391*8] <= #DLY din0[391*8+7:391*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[391] == 1))
        mem[address1][391*8+7:391*8] <= #DLY din1[391*8+7:391*8];
end
//write process for byte 392
always @ (posedge clk) begin
    if((we0[392] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[392] == 1) && (address0 == address1))
        mem[address0][392*8+7:392*8] <= #DLY din1[392*8+7:392*8];
    else if ((we0[392] == 1) && (ce0 == 1))
        mem[address0][392*8+7:392*8] <= #DLY din0[392*8+7:392*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[392] == 1))
        mem[address1][392*8+7:392*8] <= #DLY din1[392*8+7:392*8];
end
//write process for byte 393
always @ (posedge clk) begin
    if((we0[393] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[393] == 1) && (address0 == address1))
        mem[address0][393*8+7:393*8] <= #DLY din1[393*8+7:393*8];
    else if ((we0[393] == 1) && (ce0 == 1))
        mem[address0][393*8+7:393*8] <= #DLY din0[393*8+7:393*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[393] == 1))
        mem[address1][393*8+7:393*8] <= #DLY din1[393*8+7:393*8];
end
//write process for byte 394
always @ (posedge clk) begin
    if((we0[394] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[394] == 1) && (address0 == address1))
        mem[address0][394*8+7:394*8] <= #DLY din1[394*8+7:394*8];
    else if ((we0[394] == 1) && (ce0 == 1))
        mem[address0][394*8+7:394*8] <= #DLY din0[394*8+7:394*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[394] == 1))
        mem[address1][394*8+7:394*8] <= #DLY din1[394*8+7:394*8];
end
//write process for byte 395
always @ (posedge clk) begin
    if((we0[395] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[395] == 1) && (address0 == address1))
        mem[address0][395*8+7:395*8] <= #DLY din1[395*8+7:395*8];
    else if ((we0[395] == 1) && (ce0 == 1))
        mem[address0][395*8+7:395*8] <= #DLY din0[395*8+7:395*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[395] == 1))
        mem[address1][395*8+7:395*8] <= #DLY din1[395*8+7:395*8];
end
//write process for byte 396
always @ (posedge clk) begin
    if((we0[396] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[396] == 1) && (address0 == address1))
        mem[address0][396*8+7:396*8] <= #DLY din1[396*8+7:396*8];
    else if ((we0[396] == 1) && (ce0 == 1))
        mem[address0][396*8+7:396*8] <= #DLY din0[396*8+7:396*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[396] == 1))
        mem[address1][396*8+7:396*8] <= #DLY din1[396*8+7:396*8];
end
//write process for byte 397
always @ (posedge clk) begin
    if((we0[397] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[397] == 1) && (address0 == address1))
        mem[address0][397*8+7:397*8] <= #DLY din1[397*8+7:397*8];
    else if ((we0[397] == 1) && (ce0 == 1))
        mem[address0][397*8+7:397*8] <= #DLY din0[397*8+7:397*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[397] == 1))
        mem[address1][397*8+7:397*8] <= #DLY din1[397*8+7:397*8];
end
//write process for byte 398
always @ (posedge clk) begin
    if((we0[398] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[398] == 1) && (address0 == address1))
        mem[address0][398*8+7:398*8] <= #DLY din1[398*8+7:398*8];
    else if ((we0[398] == 1) && (ce0 == 1))
        mem[address0][398*8+7:398*8] <= #DLY din0[398*8+7:398*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[398] == 1))
        mem[address1][398*8+7:398*8] <= #DLY din1[398*8+7:398*8];
end
//write process for byte 399
always @ (posedge clk) begin
    if((we0[399] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[399] == 1) && (address0 == address1))
        mem[address0][399*8+7:399*8] <= #DLY din1[399*8+7:399*8];
    else if ((we0[399] == 1) && (ce0 == 1))
        mem[address0][399*8+7:399*8] <= #DLY din0[399*8+7:399*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[399] == 1))
        mem[address1][399*8+7:399*8] <= #DLY din1[399*8+7:399*8];
end
//write process for byte 400
always @ (posedge clk) begin
    if((we0[400] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[400] == 1) && (address0 == address1))
        mem[address0][400*8+7:400*8] <= #DLY din1[400*8+7:400*8];
    else if ((we0[400] == 1) && (ce0 == 1))
        mem[address0][400*8+7:400*8] <= #DLY din0[400*8+7:400*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[400] == 1))
        mem[address1][400*8+7:400*8] <= #DLY din1[400*8+7:400*8];
end
//write process for byte 401
always @ (posedge clk) begin
    if((we0[401] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[401] == 1) && (address0 == address1))
        mem[address0][401*8+7:401*8] <= #DLY din1[401*8+7:401*8];
    else if ((we0[401] == 1) && (ce0 == 1))
        mem[address0][401*8+7:401*8] <= #DLY din0[401*8+7:401*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[401] == 1))
        mem[address1][401*8+7:401*8] <= #DLY din1[401*8+7:401*8];
end
//write process for byte 402
always @ (posedge clk) begin
    if((we0[402] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[402] == 1) && (address0 == address1))
        mem[address0][402*8+7:402*8] <= #DLY din1[402*8+7:402*8];
    else if ((we0[402] == 1) && (ce0 == 1))
        mem[address0][402*8+7:402*8] <= #DLY din0[402*8+7:402*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[402] == 1))
        mem[address1][402*8+7:402*8] <= #DLY din1[402*8+7:402*8];
end
//write process for byte 403
always @ (posedge clk) begin
    if((we0[403] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[403] == 1) && (address0 == address1))
        mem[address0][403*8+7:403*8] <= #DLY din1[403*8+7:403*8];
    else if ((we0[403] == 1) && (ce0 == 1))
        mem[address0][403*8+7:403*8] <= #DLY din0[403*8+7:403*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[403] == 1))
        mem[address1][403*8+7:403*8] <= #DLY din1[403*8+7:403*8];
end
//write process for byte 404
always @ (posedge clk) begin
    if((we0[404] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[404] == 1) && (address0 == address1))
        mem[address0][404*8+7:404*8] <= #DLY din1[404*8+7:404*8];
    else if ((we0[404] == 1) && (ce0 == 1))
        mem[address0][404*8+7:404*8] <= #DLY din0[404*8+7:404*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[404] == 1))
        mem[address1][404*8+7:404*8] <= #DLY din1[404*8+7:404*8];
end
//write process for byte 405
always @ (posedge clk) begin
    if((we0[405] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[405] == 1) && (address0 == address1))
        mem[address0][405*8+7:405*8] <= #DLY din1[405*8+7:405*8];
    else if ((we0[405] == 1) && (ce0 == 1))
        mem[address0][405*8+7:405*8] <= #DLY din0[405*8+7:405*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[405] == 1))
        mem[address1][405*8+7:405*8] <= #DLY din1[405*8+7:405*8];
end
//write process for byte 406
always @ (posedge clk) begin
    if((we0[406] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[406] == 1) && (address0 == address1))
        mem[address0][406*8+7:406*8] <= #DLY din1[406*8+7:406*8];
    else if ((we0[406] == 1) && (ce0 == 1))
        mem[address0][406*8+7:406*8] <= #DLY din0[406*8+7:406*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[406] == 1))
        mem[address1][406*8+7:406*8] <= #DLY din1[406*8+7:406*8];
end
//write process for byte 407
always @ (posedge clk) begin
    if((we0[407] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[407] == 1) && (address0 == address1))
        mem[address0][407*8+7:407*8] <= #DLY din1[407*8+7:407*8];
    else if ((we0[407] == 1) && (ce0 == 1))
        mem[address0][407*8+7:407*8] <= #DLY din0[407*8+7:407*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[407] == 1))
        mem[address1][407*8+7:407*8] <= #DLY din1[407*8+7:407*8];
end
//write process for byte 408
always @ (posedge clk) begin
    if((we0[408] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[408] == 1) && (address0 == address1))
        mem[address0][408*8+7:408*8] <= #DLY din1[408*8+7:408*8];
    else if ((we0[408] == 1) && (ce0 == 1))
        mem[address0][408*8+7:408*8] <= #DLY din0[408*8+7:408*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[408] == 1))
        mem[address1][408*8+7:408*8] <= #DLY din1[408*8+7:408*8];
end
//write process for byte 409
always @ (posedge clk) begin
    if((we0[409] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[409] == 1) && (address0 == address1))
        mem[address0][409*8+7:409*8] <= #DLY din1[409*8+7:409*8];
    else if ((we0[409] == 1) && (ce0 == 1))
        mem[address0][409*8+7:409*8] <= #DLY din0[409*8+7:409*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[409] == 1))
        mem[address1][409*8+7:409*8] <= #DLY din1[409*8+7:409*8];
end
//write process for byte 410
always @ (posedge clk) begin
    if((we0[410] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[410] == 1) && (address0 == address1))
        mem[address0][410*8+7:410*8] <= #DLY din1[410*8+7:410*8];
    else if ((we0[410] == 1) && (ce0 == 1))
        mem[address0][410*8+7:410*8] <= #DLY din0[410*8+7:410*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[410] == 1))
        mem[address1][410*8+7:410*8] <= #DLY din1[410*8+7:410*8];
end
//write process for byte 411
always @ (posedge clk) begin
    if((we0[411] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[411] == 1) && (address0 == address1))
        mem[address0][411*8+7:411*8] <= #DLY din1[411*8+7:411*8];
    else if ((we0[411] == 1) && (ce0 == 1))
        mem[address0][411*8+7:411*8] <= #DLY din0[411*8+7:411*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[411] == 1))
        mem[address1][411*8+7:411*8] <= #DLY din1[411*8+7:411*8];
end
//write process for byte 412
always @ (posedge clk) begin
    if((we0[412] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[412] == 1) && (address0 == address1))
        mem[address0][412*8+7:412*8] <= #DLY din1[412*8+7:412*8];
    else if ((we0[412] == 1) && (ce0 == 1))
        mem[address0][412*8+7:412*8] <= #DLY din0[412*8+7:412*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[412] == 1))
        mem[address1][412*8+7:412*8] <= #DLY din1[412*8+7:412*8];
end
//write process for byte 413
always @ (posedge clk) begin
    if((we0[413] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[413] == 1) && (address0 == address1))
        mem[address0][413*8+7:413*8] <= #DLY din1[413*8+7:413*8];
    else if ((we0[413] == 1) && (ce0 == 1))
        mem[address0][413*8+7:413*8] <= #DLY din0[413*8+7:413*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[413] == 1))
        mem[address1][413*8+7:413*8] <= #DLY din1[413*8+7:413*8];
end
//write process for byte 414
always @ (posedge clk) begin
    if((we0[414] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[414] == 1) && (address0 == address1))
        mem[address0][414*8+7:414*8] <= #DLY din1[414*8+7:414*8];
    else if ((we0[414] == 1) && (ce0 == 1))
        mem[address0][414*8+7:414*8] <= #DLY din0[414*8+7:414*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[414] == 1))
        mem[address1][414*8+7:414*8] <= #DLY din1[414*8+7:414*8];
end
//write process for byte 415
always @ (posedge clk) begin
    if((we0[415] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[415] == 1) && (address0 == address1))
        mem[address0][415*8+7:415*8] <= #DLY din1[415*8+7:415*8];
    else if ((we0[415] == 1) && (ce0 == 1))
        mem[address0][415*8+7:415*8] <= #DLY din0[415*8+7:415*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[415] == 1))
        mem[address1][415*8+7:415*8] <= #DLY din1[415*8+7:415*8];
end
//write process for byte 416
always @ (posedge clk) begin
    if((we0[416] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[416] == 1) && (address0 == address1))
        mem[address0][416*8+7:416*8] <= #DLY din1[416*8+7:416*8];
    else if ((we0[416] == 1) && (ce0 == 1))
        mem[address0][416*8+7:416*8] <= #DLY din0[416*8+7:416*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[416] == 1))
        mem[address1][416*8+7:416*8] <= #DLY din1[416*8+7:416*8];
end
//write process for byte 417
always @ (posedge clk) begin
    if((we0[417] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[417] == 1) && (address0 == address1))
        mem[address0][417*8+7:417*8] <= #DLY din1[417*8+7:417*8];
    else if ((we0[417] == 1) && (ce0 == 1))
        mem[address0][417*8+7:417*8] <= #DLY din0[417*8+7:417*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[417] == 1))
        mem[address1][417*8+7:417*8] <= #DLY din1[417*8+7:417*8];
end
//write process for byte 418
always @ (posedge clk) begin
    if((we0[418] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[418] == 1) && (address0 == address1))
        mem[address0][418*8+7:418*8] <= #DLY din1[418*8+7:418*8];
    else if ((we0[418] == 1) && (ce0 == 1))
        mem[address0][418*8+7:418*8] <= #DLY din0[418*8+7:418*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[418] == 1))
        mem[address1][418*8+7:418*8] <= #DLY din1[418*8+7:418*8];
end
//write process for byte 419
always @ (posedge clk) begin
    if((we0[419] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[419] == 1) && (address0 == address1))
        mem[address0][419*8+7:419*8] <= #DLY din1[419*8+7:419*8];
    else if ((we0[419] == 1) && (ce0 == 1))
        mem[address0][419*8+7:419*8] <= #DLY din0[419*8+7:419*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[419] == 1))
        mem[address1][419*8+7:419*8] <= #DLY din1[419*8+7:419*8];
end
//write process for byte 420
always @ (posedge clk) begin
    if((we0[420] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[420] == 1) && (address0 == address1))
        mem[address0][420*8+7:420*8] <= #DLY din1[420*8+7:420*8];
    else if ((we0[420] == 1) && (ce0 == 1))
        mem[address0][420*8+7:420*8] <= #DLY din0[420*8+7:420*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[420] == 1))
        mem[address1][420*8+7:420*8] <= #DLY din1[420*8+7:420*8];
end
//write process for byte 421
always @ (posedge clk) begin
    if((we0[421] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[421] == 1) && (address0 == address1))
        mem[address0][421*8+7:421*8] <= #DLY din1[421*8+7:421*8];
    else if ((we0[421] == 1) && (ce0 == 1))
        mem[address0][421*8+7:421*8] <= #DLY din0[421*8+7:421*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[421] == 1))
        mem[address1][421*8+7:421*8] <= #DLY din1[421*8+7:421*8];
end
//write process for byte 422
always @ (posedge clk) begin
    if((we0[422] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[422] == 1) && (address0 == address1))
        mem[address0][422*8+7:422*8] <= #DLY din1[422*8+7:422*8];
    else if ((we0[422] == 1) && (ce0 == 1))
        mem[address0][422*8+7:422*8] <= #DLY din0[422*8+7:422*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[422] == 1))
        mem[address1][422*8+7:422*8] <= #DLY din1[422*8+7:422*8];
end
//write process for byte 423
always @ (posedge clk) begin
    if((we0[423] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[423] == 1) && (address0 == address1))
        mem[address0][423*8+7:423*8] <= #DLY din1[423*8+7:423*8];
    else if ((we0[423] == 1) && (ce0 == 1))
        mem[address0][423*8+7:423*8] <= #DLY din0[423*8+7:423*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[423] == 1))
        mem[address1][423*8+7:423*8] <= #DLY din1[423*8+7:423*8];
end
//write process for byte 424
always @ (posedge clk) begin
    if((we0[424] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[424] == 1) && (address0 == address1))
        mem[address0][424*8+7:424*8] <= #DLY din1[424*8+7:424*8];
    else if ((we0[424] == 1) && (ce0 == 1))
        mem[address0][424*8+7:424*8] <= #DLY din0[424*8+7:424*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[424] == 1))
        mem[address1][424*8+7:424*8] <= #DLY din1[424*8+7:424*8];
end
//write process for byte 425
always @ (posedge clk) begin
    if((we0[425] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[425] == 1) && (address0 == address1))
        mem[address0][425*8+7:425*8] <= #DLY din1[425*8+7:425*8];
    else if ((we0[425] == 1) && (ce0 == 1))
        mem[address0][425*8+7:425*8] <= #DLY din0[425*8+7:425*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[425] == 1))
        mem[address1][425*8+7:425*8] <= #DLY din1[425*8+7:425*8];
end
//write process for byte 426
always @ (posedge clk) begin
    if((we0[426] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[426] == 1) && (address0 == address1))
        mem[address0][426*8+7:426*8] <= #DLY din1[426*8+7:426*8];
    else if ((we0[426] == 1) && (ce0 == 1))
        mem[address0][426*8+7:426*8] <= #DLY din0[426*8+7:426*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[426] == 1))
        mem[address1][426*8+7:426*8] <= #DLY din1[426*8+7:426*8];
end
//write process for byte 427
always @ (posedge clk) begin
    if((we0[427] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[427] == 1) && (address0 == address1))
        mem[address0][427*8+7:427*8] <= #DLY din1[427*8+7:427*8];
    else if ((we0[427] == 1) && (ce0 == 1))
        mem[address0][427*8+7:427*8] <= #DLY din0[427*8+7:427*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[427] == 1))
        mem[address1][427*8+7:427*8] <= #DLY din1[427*8+7:427*8];
end
//write process for byte 428
always @ (posedge clk) begin
    if((we0[428] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[428] == 1) && (address0 == address1))
        mem[address0][428*8+7:428*8] <= #DLY din1[428*8+7:428*8];
    else if ((we0[428] == 1) && (ce0 == 1))
        mem[address0][428*8+7:428*8] <= #DLY din0[428*8+7:428*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[428] == 1))
        mem[address1][428*8+7:428*8] <= #DLY din1[428*8+7:428*8];
end
//write process for byte 429
always @ (posedge clk) begin
    if((we0[429] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[429] == 1) && (address0 == address1))
        mem[address0][429*8+7:429*8] <= #DLY din1[429*8+7:429*8];
    else if ((we0[429] == 1) && (ce0 == 1))
        mem[address0][429*8+7:429*8] <= #DLY din0[429*8+7:429*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[429] == 1))
        mem[address1][429*8+7:429*8] <= #DLY din1[429*8+7:429*8];
end
//write process for byte 430
always @ (posedge clk) begin
    if((we0[430] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[430] == 1) && (address0 == address1))
        mem[address0][430*8+7:430*8] <= #DLY din1[430*8+7:430*8];
    else if ((we0[430] == 1) && (ce0 == 1))
        mem[address0][430*8+7:430*8] <= #DLY din0[430*8+7:430*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[430] == 1))
        mem[address1][430*8+7:430*8] <= #DLY din1[430*8+7:430*8];
end
//write process for byte 431
always @ (posedge clk) begin
    if((we0[431] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[431] == 1) && (address0 == address1))
        mem[address0][431*8+7:431*8] <= #DLY din1[431*8+7:431*8];
    else if ((we0[431] == 1) && (ce0 == 1))
        mem[address0][431*8+7:431*8] <= #DLY din0[431*8+7:431*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[431] == 1))
        mem[address1][431*8+7:431*8] <= #DLY din1[431*8+7:431*8];
end
//write process for byte 432
always @ (posedge clk) begin
    if((we0[432] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[432] == 1) && (address0 == address1))
        mem[address0][432*8+7:432*8] <= #DLY din1[432*8+7:432*8];
    else if ((we0[432] == 1) && (ce0 == 1))
        mem[address0][432*8+7:432*8] <= #DLY din0[432*8+7:432*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[432] == 1))
        mem[address1][432*8+7:432*8] <= #DLY din1[432*8+7:432*8];
end
//write process for byte 433
always @ (posedge clk) begin
    if((we0[433] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[433] == 1) && (address0 == address1))
        mem[address0][433*8+7:433*8] <= #DLY din1[433*8+7:433*8];
    else if ((we0[433] == 1) && (ce0 == 1))
        mem[address0][433*8+7:433*8] <= #DLY din0[433*8+7:433*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[433] == 1))
        mem[address1][433*8+7:433*8] <= #DLY din1[433*8+7:433*8];
end
//write process for byte 434
always @ (posedge clk) begin
    if((we0[434] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[434] == 1) && (address0 == address1))
        mem[address0][434*8+7:434*8] <= #DLY din1[434*8+7:434*8];
    else if ((we0[434] == 1) && (ce0 == 1))
        mem[address0][434*8+7:434*8] <= #DLY din0[434*8+7:434*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[434] == 1))
        mem[address1][434*8+7:434*8] <= #DLY din1[434*8+7:434*8];
end
//write process for byte 435
always @ (posedge clk) begin
    if((we0[435] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[435] == 1) && (address0 == address1))
        mem[address0][435*8+7:435*8] <= #DLY din1[435*8+7:435*8];
    else if ((we0[435] == 1) && (ce0 == 1))
        mem[address0][435*8+7:435*8] <= #DLY din0[435*8+7:435*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[435] == 1))
        mem[address1][435*8+7:435*8] <= #DLY din1[435*8+7:435*8];
end
//write process for byte 436
always @ (posedge clk) begin
    if((we0[436] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[436] == 1) && (address0 == address1))
        mem[address0][436*8+7:436*8] <= #DLY din1[436*8+7:436*8];
    else if ((we0[436] == 1) && (ce0 == 1))
        mem[address0][436*8+7:436*8] <= #DLY din0[436*8+7:436*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[436] == 1))
        mem[address1][436*8+7:436*8] <= #DLY din1[436*8+7:436*8];
end
//write process for byte 437
always @ (posedge clk) begin
    if((we0[437] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[437] == 1) && (address0 == address1))
        mem[address0][437*8+7:437*8] <= #DLY din1[437*8+7:437*8];
    else if ((we0[437] == 1) && (ce0 == 1))
        mem[address0][437*8+7:437*8] <= #DLY din0[437*8+7:437*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[437] == 1))
        mem[address1][437*8+7:437*8] <= #DLY din1[437*8+7:437*8];
end
//write process for byte 438
always @ (posedge clk) begin
    if((we0[438] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[438] == 1) && (address0 == address1))
        mem[address0][438*8+7:438*8] <= #DLY din1[438*8+7:438*8];
    else if ((we0[438] == 1) && (ce0 == 1))
        mem[address0][438*8+7:438*8] <= #DLY din0[438*8+7:438*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[438] == 1))
        mem[address1][438*8+7:438*8] <= #DLY din1[438*8+7:438*8];
end
//write process for byte 439
always @ (posedge clk) begin
    if((we0[439] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[439] == 1) && (address0 == address1))
        mem[address0][439*8+7:439*8] <= #DLY din1[439*8+7:439*8];
    else if ((we0[439] == 1) && (ce0 == 1))
        mem[address0][439*8+7:439*8] <= #DLY din0[439*8+7:439*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[439] == 1))
        mem[address1][439*8+7:439*8] <= #DLY din1[439*8+7:439*8];
end
//write process for byte 440
always @ (posedge clk) begin
    if((we0[440] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[440] == 1) && (address0 == address1))
        mem[address0][440*8+7:440*8] <= #DLY din1[440*8+7:440*8];
    else if ((we0[440] == 1) && (ce0 == 1))
        mem[address0][440*8+7:440*8] <= #DLY din0[440*8+7:440*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[440] == 1))
        mem[address1][440*8+7:440*8] <= #DLY din1[440*8+7:440*8];
end
//write process for byte 441
always @ (posedge clk) begin
    if((we0[441] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[441] == 1) && (address0 == address1))
        mem[address0][441*8+7:441*8] <= #DLY din1[441*8+7:441*8];
    else if ((we0[441] == 1) && (ce0 == 1))
        mem[address0][441*8+7:441*8] <= #DLY din0[441*8+7:441*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[441] == 1))
        mem[address1][441*8+7:441*8] <= #DLY din1[441*8+7:441*8];
end
//write process for byte 442
always @ (posedge clk) begin
    if((we0[442] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[442] == 1) && (address0 == address1))
        mem[address0][442*8+7:442*8] <= #DLY din1[442*8+7:442*8];
    else if ((we0[442] == 1) && (ce0 == 1))
        mem[address0][442*8+7:442*8] <= #DLY din0[442*8+7:442*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[442] == 1))
        mem[address1][442*8+7:442*8] <= #DLY din1[442*8+7:442*8];
end
//write process for byte 443
always @ (posedge clk) begin
    if((we0[443] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[443] == 1) && (address0 == address1))
        mem[address0][443*8+7:443*8] <= #DLY din1[443*8+7:443*8];
    else if ((we0[443] == 1) && (ce0 == 1))
        mem[address0][443*8+7:443*8] <= #DLY din0[443*8+7:443*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[443] == 1))
        mem[address1][443*8+7:443*8] <= #DLY din1[443*8+7:443*8];
end
//write process for byte 444
always @ (posedge clk) begin
    if((we0[444] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[444] == 1) && (address0 == address1))
        mem[address0][444*8+7:444*8] <= #DLY din1[444*8+7:444*8];
    else if ((we0[444] == 1) && (ce0 == 1))
        mem[address0][444*8+7:444*8] <= #DLY din0[444*8+7:444*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[444] == 1))
        mem[address1][444*8+7:444*8] <= #DLY din1[444*8+7:444*8];
end
//write process for byte 445
always @ (posedge clk) begin
    if((we0[445] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[445] == 1) && (address0 == address1))
        mem[address0][445*8+7:445*8] <= #DLY din1[445*8+7:445*8];
    else if ((we0[445] == 1) && (ce0 == 1))
        mem[address0][445*8+7:445*8] <= #DLY din0[445*8+7:445*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[445] == 1))
        mem[address1][445*8+7:445*8] <= #DLY din1[445*8+7:445*8];
end
//write process for byte 446
always @ (posedge clk) begin
    if((we0[446] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[446] == 1) && (address0 == address1))
        mem[address0][446*8+7:446*8] <= #DLY din1[446*8+7:446*8];
    else if ((we0[446] == 1) && (ce0 == 1))
        mem[address0][446*8+7:446*8] <= #DLY din0[446*8+7:446*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[446] == 1))
        mem[address1][446*8+7:446*8] <= #DLY din1[446*8+7:446*8];
end
//write process for byte 447
always @ (posedge clk) begin
    if((we0[447] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[447] == 1) && (address0 == address1))
        mem[address0][447*8+7:447*8] <= #DLY din1[447*8+7:447*8];
    else if ((we0[447] == 1) && (ce0 == 1))
        mem[address0][447*8+7:447*8] <= #DLY din0[447*8+7:447*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[447] == 1))
        mem[address1][447*8+7:447*8] <= #DLY din1[447*8+7:447*8];
end
//write process for byte 448
always @ (posedge clk) begin
    if((we0[448] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[448] == 1) && (address0 == address1))
        mem[address0][448*8+7:448*8] <= #DLY din1[448*8+7:448*8];
    else if ((we0[448] == 1) && (ce0 == 1))
        mem[address0][448*8+7:448*8] <= #DLY din0[448*8+7:448*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[448] == 1))
        mem[address1][448*8+7:448*8] <= #DLY din1[448*8+7:448*8];
end
//write process for byte 449
always @ (posedge clk) begin
    if((we0[449] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[449] == 1) && (address0 == address1))
        mem[address0][449*8+7:449*8] <= #DLY din1[449*8+7:449*8];
    else if ((we0[449] == 1) && (ce0 == 1))
        mem[address0][449*8+7:449*8] <= #DLY din0[449*8+7:449*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[449] == 1))
        mem[address1][449*8+7:449*8] <= #DLY din1[449*8+7:449*8];
end
//write process for byte 450
always @ (posedge clk) begin
    if((we0[450] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[450] == 1) && (address0 == address1))
        mem[address0][450*8+7:450*8] <= #DLY din1[450*8+7:450*8];
    else if ((we0[450] == 1) && (ce0 == 1))
        mem[address0][450*8+7:450*8] <= #DLY din0[450*8+7:450*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[450] == 1))
        mem[address1][450*8+7:450*8] <= #DLY din1[450*8+7:450*8];
end
//write process for byte 451
always @ (posedge clk) begin
    if((we0[451] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[451] == 1) && (address0 == address1))
        mem[address0][451*8+7:451*8] <= #DLY din1[451*8+7:451*8];
    else if ((we0[451] == 1) && (ce0 == 1))
        mem[address0][451*8+7:451*8] <= #DLY din0[451*8+7:451*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[451] == 1))
        mem[address1][451*8+7:451*8] <= #DLY din1[451*8+7:451*8];
end
//write process for byte 452
always @ (posedge clk) begin
    if((we0[452] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[452] == 1) && (address0 == address1))
        mem[address0][452*8+7:452*8] <= #DLY din1[452*8+7:452*8];
    else if ((we0[452] == 1) && (ce0 == 1))
        mem[address0][452*8+7:452*8] <= #DLY din0[452*8+7:452*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[452] == 1))
        mem[address1][452*8+7:452*8] <= #DLY din1[452*8+7:452*8];
end
//write process for byte 453
always @ (posedge clk) begin
    if((we0[453] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[453] == 1) && (address0 == address1))
        mem[address0][453*8+7:453*8] <= #DLY din1[453*8+7:453*8];
    else if ((we0[453] == 1) && (ce0 == 1))
        mem[address0][453*8+7:453*8] <= #DLY din0[453*8+7:453*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[453] == 1))
        mem[address1][453*8+7:453*8] <= #DLY din1[453*8+7:453*8];
end
//write process for byte 454
always @ (posedge clk) begin
    if((we0[454] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[454] == 1) && (address0 == address1))
        mem[address0][454*8+7:454*8] <= #DLY din1[454*8+7:454*8];
    else if ((we0[454] == 1) && (ce0 == 1))
        mem[address0][454*8+7:454*8] <= #DLY din0[454*8+7:454*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[454] == 1))
        mem[address1][454*8+7:454*8] <= #DLY din1[454*8+7:454*8];
end
//write process for byte 455
always @ (posedge clk) begin
    if((we0[455] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[455] == 1) && (address0 == address1))
        mem[address0][455*8+7:455*8] <= #DLY din1[455*8+7:455*8];
    else if ((we0[455] == 1) && (ce0 == 1))
        mem[address0][455*8+7:455*8] <= #DLY din0[455*8+7:455*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[455] == 1))
        mem[address1][455*8+7:455*8] <= #DLY din1[455*8+7:455*8];
end
//write process for byte 456
always @ (posedge clk) begin
    if((we0[456] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[456] == 1) && (address0 == address1))
        mem[address0][456*8+7:456*8] <= #DLY din1[456*8+7:456*8];
    else if ((we0[456] == 1) && (ce0 == 1))
        mem[address0][456*8+7:456*8] <= #DLY din0[456*8+7:456*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[456] == 1))
        mem[address1][456*8+7:456*8] <= #DLY din1[456*8+7:456*8];
end
//write process for byte 457
always @ (posedge clk) begin
    if((we0[457] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[457] == 1) && (address0 == address1))
        mem[address0][457*8+7:457*8] <= #DLY din1[457*8+7:457*8];
    else if ((we0[457] == 1) && (ce0 == 1))
        mem[address0][457*8+7:457*8] <= #DLY din0[457*8+7:457*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[457] == 1))
        mem[address1][457*8+7:457*8] <= #DLY din1[457*8+7:457*8];
end
//write process for byte 458
always @ (posedge clk) begin
    if((we0[458] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[458] == 1) && (address0 == address1))
        mem[address0][458*8+7:458*8] <= #DLY din1[458*8+7:458*8];
    else if ((we0[458] == 1) && (ce0 == 1))
        mem[address0][458*8+7:458*8] <= #DLY din0[458*8+7:458*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[458] == 1))
        mem[address1][458*8+7:458*8] <= #DLY din1[458*8+7:458*8];
end
//write process for byte 459
always @ (posedge clk) begin
    if((we0[459] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[459] == 1) && (address0 == address1))
        mem[address0][459*8+7:459*8] <= #DLY din1[459*8+7:459*8];
    else if ((we0[459] == 1) && (ce0 == 1))
        mem[address0][459*8+7:459*8] <= #DLY din0[459*8+7:459*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[459] == 1))
        mem[address1][459*8+7:459*8] <= #DLY din1[459*8+7:459*8];
end
//write process for byte 460
always @ (posedge clk) begin
    if((we0[460] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[460] == 1) && (address0 == address1))
        mem[address0][460*8+7:460*8] <= #DLY din1[460*8+7:460*8];
    else if ((we0[460] == 1) && (ce0 == 1))
        mem[address0][460*8+7:460*8] <= #DLY din0[460*8+7:460*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[460] == 1))
        mem[address1][460*8+7:460*8] <= #DLY din1[460*8+7:460*8];
end
//write process for byte 461
always @ (posedge clk) begin
    if((we0[461] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[461] == 1) && (address0 == address1))
        mem[address0][461*8+7:461*8] <= #DLY din1[461*8+7:461*8];
    else if ((we0[461] == 1) && (ce0 == 1))
        mem[address0][461*8+7:461*8] <= #DLY din0[461*8+7:461*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[461] == 1))
        mem[address1][461*8+7:461*8] <= #DLY din1[461*8+7:461*8];
end
//write process for byte 462
always @ (posedge clk) begin
    if((we0[462] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[462] == 1) && (address0 == address1))
        mem[address0][462*8+7:462*8] <= #DLY din1[462*8+7:462*8];
    else if ((we0[462] == 1) && (ce0 == 1))
        mem[address0][462*8+7:462*8] <= #DLY din0[462*8+7:462*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[462] == 1))
        mem[address1][462*8+7:462*8] <= #DLY din1[462*8+7:462*8];
end
//write process for byte 463
always @ (posedge clk) begin
    if((we0[463] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[463] == 1) && (address0 == address1))
        mem[address0][463*8+7:463*8] <= #DLY din1[463*8+7:463*8];
    else if ((we0[463] == 1) && (ce0 == 1))
        mem[address0][463*8+7:463*8] <= #DLY din0[463*8+7:463*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[463] == 1))
        mem[address1][463*8+7:463*8] <= #DLY din1[463*8+7:463*8];
end
//write process for byte 464
always @ (posedge clk) begin
    if((we0[464] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[464] == 1) && (address0 == address1))
        mem[address0][464*8+7:464*8] <= #DLY din1[464*8+7:464*8];
    else if ((we0[464] == 1) && (ce0 == 1))
        mem[address0][464*8+7:464*8] <= #DLY din0[464*8+7:464*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[464] == 1))
        mem[address1][464*8+7:464*8] <= #DLY din1[464*8+7:464*8];
end
//write process for byte 465
always @ (posedge clk) begin
    if((we0[465] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[465] == 1) && (address0 == address1))
        mem[address0][465*8+7:465*8] <= #DLY din1[465*8+7:465*8];
    else if ((we0[465] == 1) && (ce0 == 1))
        mem[address0][465*8+7:465*8] <= #DLY din0[465*8+7:465*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[465] == 1))
        mem[address1][465*8+7:465*8] <= #DLY din1[465*8+7:465*8];
end
//write process for byte 466
always @ (posedge clk) begin
    if((we0[466] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[466] == 1) && (address0 == address1))
        mem[address0][466*8+7:466*8] <= #DLY din1[466*8+7:466*8];
    else if ((we0[466] == 1) && (ce0 == 1))
        mem[address0][466*8+7:466*8] <= #DLY din0[466*8+7:466*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[466] == 1))
        mem[address1][466*8+7:466*8] <= #DLY din1[466*8+7:466*8];
end
//write process for byte 467
always @ (posedge clk) begin
    if((we0[467] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[467] == 1) && (address0 == address1))
        mem[address0][467*8+7:467*8] <= #DLY din1[467*8+7:467*8];
    else if ((we0[467] == 1) && (ce0 == 1))
        mem[address0][467*8+7:467*8] <= #DLY din0[467*8+7:467*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[467] == 1))
        mem[address1][467*8+7:467*8] <= #DLY din1[467*8+7:467*8];
end
//write process for byte 468
always @ (posedge clk) begin
    if((we0[468] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[468] == 1) && (address0 == address1))
        mem[address0][468*8+7:468*8] <= #DLY din1[468*8+7:468*8];
    else if ((we0[468] == 1) && (ce0 == 1))
        mem[address0][468*8+7:468*8] <= #DLY din0[468*8+7:468*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[468] == 1))
        mem[address1][468*8+7:468*8] <= #DLY din1[468*8+7:468*8];
end
//write process for byte 469
always @ (posedge clk) begin
    if((we0[469] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[469] == 1) && (address0 == address1))
        mem[address0][469*8+7:469*8] <= #DLY din1[469*8+7:469*8];
    else if ((we0[469] == 1) && (ce0 == 1))
        mem[address0][469*8+7:469*8] <= #DLY din0[469*8+7:469*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[469] == 1))
        mem[address1][469*8+7:469*8] <= #DLY din1[469*8+7:469*8];
end
//write process for byte 470
always @ (posedge clk) begin
    if((we0[470] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[470] == 1) && (address0 == address1))
        mem[address0][470*8+7:470*8] <= #DLY din1[470*8+7:470*8];
    else if ((we0[470] == 1) && (ce0 == 1))
        mem[address0][470*8+7:470*8] <= #DLY din0[470*8+7:470*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[470] == 1))
        mem[address1][470*8+7:470*8] <= #DLY din1[470*8+7:470*8];
end
//write process for byte 471
always @ (posedge clk) begin
    if((we0[471] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[471] == 1) && (address0 == address1))
        mem[address0][471*8+7:471*8] <= #DLY din1[471*8+7:471*8];
    else if ((we0[471] == 1) && (ce0 == 1))
        mem[address0][471*8+7:471*8] <= #DLY din0[471*8+7:471*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[471] == 1))
        mem[address1][471*8+7:471*8] <= #DLY din1[471*8+7:471*8];
end
//write process for byte 472
always @ (posedge clk) begin
    if((we0[472] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[472] == 1) && (address0 == address1))
        mem[address0][472*8+7:472*8] <= #DLY din1[472*8+7:472*8];
    else if ((we0[472] == 1) && (ce0 == 1))
        mem[address0][472*8+7:472*8] <= #DLY din0[472*8+7:472*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[472] == 1))
        mem[address1][472*8+7:472*8] <= #DLY din1[472*8+7:472*8];
end
//write process for byte 473
always @ (posedge clk) begin
    if((we0[473] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[473] == 1) && (address0 == address1))
        mem[address0][473*8+7:473*8] <= #DLY din1[473*8+7:473*8];
    else if ((we0[473] == 1) && (ce0 == 1))
        mem[address0][473*8+7:473*8] <= #DLY din0[473*8+7:473*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[473] == 1))
        mem[address1][473*8+7:473*8] <= #DLY din1[473*8+7:473*8];
end
//write process for byte 474
always @ (posedge clk) begin
    if((we0[474] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[474] == 1) && (address0 == address1))
        mem[address0][474*8+7:474*8] <= #DLY din1[474*8+7:474*8];
    else if ((we0[474] == 1) && (ce0 == 1))
        mem[address0][474*8+7:474*8] <= #DLY din0[474*8+7:474*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[474] == 1))
        mem[address1][474*8+7:474*8] <= #DLY din1[474*8+7:474*8];
end
//write process for byte 475
always @ (posedge clk) begin
    if((we0[475] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[475] == 1) && (address0 == address1))
        mem[address0][475*8+7:475*8] <= #DLY din1[475*8+7:475*8];
    else if ((we0[475] == 1) && (ce0 == 1))
        mem[address0][475*8+7:475*8] <= #DLY din0[475*8+7:475*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[475] == 1))
        mem[address1][475*8+7:475*8] <= #DLY din1[475*8+7:475*8];
end
//write process for byte 476
always @ (posedge clk) begin
    if((we0[476] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[476] == 1) && (address0 == address1))
        mem[address0][476*8+7:476*8] <= #DLY din1[476*8+7:476*8];
    else if ((we0[476] == 1) && (ce0 == 1))
        mem[address0][476*8+7:476*8] <= #DLY din0[476*8+7:476*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[476] == 1))
        mem[address1][476*8+7:476*8] <= #DLY din1[476*8+7:476*8];
end
//write process for byte 477
always @ (posedge clk) begin
    if((we0[477] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[477] == 1) && (address0 == address1))
        mem[address0][477*8+7:477*8] <= #DLY din1[477*8+7:477*8];
    else if ((we0[477] == 1) && (ce0 == 1))
        mem[address0][477*8+7:477*8] <= #DLY din0[477*8+7:477*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[477] == 1))
        mem[address1][477*8+7:477*8] <= #DLY din1[477*8+7:477*8];
end
//write process for byte 478
always @ (posedge clk) begin
    if((we0[478] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[478] == 1) && (address0 == address1))
        mem[address0][478*8+7:478*8] <= #DLY din1[478*8+7:478*8];
    else if ((we0[478] == 1) && (ce0 == 1))
        mem[address0][478*8+7:478*8] <= #DLY din0[478*8+7:478*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[478] == 1))
        mem[address1][478*8+7:478*8] <= #DLY din1[478*8+7:478*8];
end
//write process for byte 479
always @ (posedge clk) begin
    if((we0[479] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[479] == 1) && (address0 == address1))
        mem[address0][479*8+7:479*8] <= #DLY din1[479*8+7:479*8];
    else if ((we0[479] == 1) && (ce0 == 1))
        mem[address0][479*8+7:479*8] <= #DLY din0[479*8+7:479*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[479] == 1))
        mem[address1][479*8+7:479*8] <= #DLY din1[479*8+7:479*8];
end
//write process for byte 480
always @ (posedge clk) begin
    if((we0[480] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[480] == 1) && (address0 == address1))
        mem[address0][480*8+7:480*8] <= #DLY din1[480*8+7:480*8];
    else if ((we0[480] == 1) && (ce0 == 1))
        mem[address0][480*8+7:480*8] <= #DLY din0[480*8+7:480*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[480] == 1))
        mem[address1][480*8+7:480*8] <= #DLY din1[480*8+7:480*8];
end
//write process for byte 481
always @ (posedge clk) begin
    if((we0[481] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[481] == 1) && (address0 == address1))
        mem[address0][481*8+7:481*8] <= #DLY din1[481*8+7:481*8];
    else if ((we0[481] == 1) && (ce0 == 1))
        mem[address0][481*8+7:481*8] <= #DLY din0[481*8+7:481*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[481] == 1))
        mem[address1][481*8+7:481*8] <= #DLY din1[481*8+7:481*8];
end
//write process for byte 482
always @ (posedge clk) begin
    if((we0[482] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[482] == 1) && (address0 == address1))
        mem[address0][482*8+7:482*8] <= #DLY din1[482*8+7:482*8];
    else if ((we0[482] == 1) && (ce0 == 1))
        mem[address0][482*8+7:482*8] <= #DLY din0[482*8+7:482*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[482] == 1))
        mem[address1][482*8+7:482*8] <= #DLY din1[482*8+7:482*8];
end
//write process for byte 483
always @ (posedge clk) begin
    if((we0[483] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[483] == 1) && (address0 == address1))
        mem[address0][483*8+7:483*8] <= #DLY din1[483*8+7:483*8];
    else if ((we0[483] == 1) && (ce0 == 1))
        mem[address0][483*8+7:483*8] <= #DLY din0[483*8+7:483*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[483] == 1))
        mem[address1][483*8+7:483*8] <= #DLY din1[483*8+7:483*8];
end
//write process for byte 484
always @ (posedge clk) begin
    if((we0[484] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[484] == 1) && (address0 == address1))
        mem[address0][484*8+7:484*8] <= #DLY din1[484*8+7:484*8];
    else if ((we0[484] == 1) && (ce0 == 1))
        mem[address0][484*8+7:484*8] <= #DLY din0[484*8+7:484*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[484] == 1))
        mem[address1][484*8+7:484*8] <= #DLY din1[484*8+7:484*8];
end
//write process for byte 485
always @ (posedge clk) begin
    if((we0[485] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[485] == 1) && (address0 == address1))
        mem[address0][485*8+7:485*8] <= #DLY din1[485*8+7:485*8];
    else if ((we0[485] == 1) && (ce0 == 1))
        mem[address0][485*8+7:485*8] <= #DLY din0[485*8+7:485*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[485] == 1))
        mem[address1][485*8+7:485*8] <= #DLY din1[485*8+7:485*8];
end
//write process for byte 486
always @ (posedge clk) begin
    if((we0[486] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[486] == 1) && (address0 == address1))
        mem[address0][486*8+7:486*8] <= #DLY din1[486*8+7:486*8];
    else if ((we0[486] == 1) && (ce0 == 1))
        mem[address0][486*8+7:486*8] <= #DLY din0[486*8+7:486*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[486] == 1))
        mem[address1][486*8+7:486*8] <= #DLY din1[486*8+7:486*8];
end
//write process for byte 487
always @ (posedge clk) begin
    if((we0[487] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[487] == 1) && (address0 == address1))
        mem[address0][487*8+7:487*8] <= #DLY din1[487*8+7:487*8];
    else if ((we0[487] == 1) && (ce0 == 1))
        mem[address0][487*8+7:487*8] <= #DLY din0[487*8+7:487*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[487] == 1))
        mem[address1][487*8+7:487*8] <= #DLY din1[487*8+7:487*8];
end
//write process for byte 488
always @ (posedge clk) begin
    if((we0[488] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[488] == 1) && (address0 == address1))
        mem[address0][488*8+7:488*8] <= #DLY din1[488*8+7:488*8];
    else if ((we0[488] == 1) && (ce0 == 1))
        mem[address0][488*8+7:488*8] <= #DLY din0[488*8+7:488*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[488] == 1))
        mem[address1][488*8+7:488*8] <= #DLY din1[488*8+7:488*8];
end
//write process for byte 489
always @ (posedge clk) begin
    if((we0[489] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[489] == 1) && (address0 == address1))
        mem[address0][489*8+7:489*8] <= #DLY din1[489*8+7:489*8];
    else if ((we0[489] == 1) && (ce0 == 1))
        mem[address0][489*8+7:489*8] <= #DLY din0[489*8+7:489*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[489] == 1))
        mem[address1][489*8+7:489*8] <= #DLY din1[489*8+7:489*8];
end
//write process for byte 490
always @ (posedge clk) begin
    if((we0[490] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[490] == 1) && (address0 == address1))
        mem[address0][490*8+7:490*8] <= #DLY din1[490*8+7:490*8];
    else if ((we0[490] == 1) && (ce0 == 1))
        mem[address0][490*8+7:490*8] <= #DLY din0[490*8+7:490*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[490] == 1))
        mem[address1][490*8+7:490*8] <= #DLY din1[490*8+7:490*8];
end
//write process for byte 491
always @ (posedge clk) begin
    if((we0[491] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[491] == 1) && (address0 == address1))
        mem[address0][491*8+7:491*8] <= #DLY din1[491*8+7:491*8];
    else if ((we0[491] == 1) && (ce0 == 1))
        mem[address0][491*8+7:491*8] <= #DLY din0[491*8+7:491*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[491] == 1))
        mem[address1][491*8+7:491*8] <= #DLY din1[491*8+7:491*8];
end
//write process for byte 492
always @ (posedge clk) begin
    if((we0[492] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[492] == 1) && (address0 == address1))
        mem[address0][492*8+7:492*8] <= #DLY din1[492*8+7:492*8];
    else if ((we0[492] == 1) && (ce0 == 1))
        mem[address0][492*8+7:492*8] <= #DLY din0[492*8+7:492*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[492] == 1))
        mem[address1][492*8+7:492*8] <= #DLY din1[492*8+7:492*8];
end
//write process for byte 493
always @ (posedge clk) begin
    if((we0[493] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[493] == 1) && (address0 == address1))
        mem[address0][493*8+7:493*8] <= #DLY din1[493*8+7:493*8];
    else if ((we0[493] == 1) && (ce0 == 1))
        mem[address0][493*8+7:493*8] <= #DLY din0[493*8+7:493*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[493] == 1))
        mem[address1][493*8+7:493*8] <= #DLY din1[493*8+7:493*8];
end
//write process for byte 494
always @ (posedge clk) begin
    if((we0[494] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[494] == 1) && (address0 == address1))
        mem[address0][494*8+7:494*8] <= #DLY din1[494*8+7:494*8];
    else if ((we0[494] == 1) && (ce0 == 1))
        mem[address0][494*8+7:494*8] <= #DLY din0[494*8+7:494*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[494] == 1))
        mem[address1][494*8+7:494*8] <= #DLY din1[494*8+7:494*8];
end
//write process for byte 495
always @ (posedge clk) begin
    if((we0[495] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[495] == 1) && (address0 == address1))
        mem[address0][495*8+7:495*8] <= #DLY din1[495*8+7:495*8];
    else if ((we0[495] == 1) && (ce0 == 1))
        mem[address0][495*8+7:495*8] <= #DLY din0[495*8+7:495*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[495] == 1))
        mem[address1][495*8+7:495*8] <= #DLY din1[495*8+7:495*8];
end
//write process for byte 496
always @ (posedge clk) begin
    if((we0[496] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[496] == 1) && (address0 == address1))
        mem[address0][496*8+7:496*8] <= #DLY din1[496*8+7:496*8];
    else if ((we0[496] == 1) && (ce0 == 1))
        mem[address0][496*8+7:496*8] <= #DLY din0[496*8+7:496*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[496] == 1))
        mem[address1][496*8+7:496*8] <= #DLY din1[496*8+7:496*8];
end
//write process for byte 497
always @ (posedge clk) begin
    if((we0[497] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[497] == 1) && (address0 == address1))
        mem[address0][497*8+7:497*8] <= #DLY din1[497*8+7:497*8];
    else if ((we0[497] == 1) && (ce0 == 1))
        mem[address0][497*8+7:497*8] <= #DLY din0[497*8+7:497*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[497] == 1))
        mem[address1][497*8+7:497*8] <= #DLY din1[497*8+7:497*8];
end
//write process for byte 498
always @ (posedge clk) begin
    if((we0[498] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[498] == 1) && (address0 == address1))
        mem[address0][498*8+7:498*8] <= #DLY din1[498*8+7:498*8];
    else if ((we0[498] == 1) && (ce0 == 1))
        mem[address0][498*8+7:498*8] <= #DLY din0[498*8+7:498*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[498] == 1))
        mem[address1][498*8+7:498*8] <= #DLY din1[498*8+7:498*8];
end
//write process for byte 499
always @ (posedge clk) begin
    if((we0[499] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[499] == 1) && (address0 == address1))
        mem[address0][499*8+7:499*8] <= #DLY din1[499*8+7:499*8];
    else if ((we0[499] == 1) && (ce0 == 1))
        mem[address0][499*8+7:499*8] <= #DLY din0[499*8+7:499*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[499] == 1))
        mem[address1][499*8+7:499*8] <= #DLY din1[499*8+7:499*8];
end
//write process for byte 500
always @ (posedge clk) begin
    if((we0[500] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[500] == 1) && (address0 == address1))
        mem[address0][500*8+7:500*8] <= #DLY din1[500*8+7:500*8];
    else if ((we0[500] == 1) && (ce0 == 1))
        mem[address0][500*8+7:500*8] <= #DLY din0[500*8+7:500*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[500] == 1))
        mem[address1][500*8+7:500*8] <= #DLY din1[500*8+7:500*8];
end
//write process for byte 501
always @ (posedge clk) begin
    if((we0[501] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[501] == 1) && (address0 == address1))
        mem[address0][501*8+7:501*8] <= #DLY din1[501*8+7:501*8];
    else if ((we0[501] == 1) && (ce0 == 1))
        mem[address0][501*8+7:501*8] <= #DLY din0[501*8+7:501*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[501] == 1))
        mem[address1][501*8+7:501*8] <= #DLY din1[501*8+7:501*8];
end
//write process for byte 502
always @ (posedge clk) begin
    if((we0[502] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[502] == 1) && (address0 == address1))
        mem[address0][502*8+7:502*8] <= #DLY din1[502*8+7:502*8];
    else if ((we0[502] == 1) && (ce0 == 1))
        mem[address0][502*8+7:502*8] <= #DLY din0[502*8+7:502*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[502] == 1))
        mem[address1][502*8+7:502*8] <= #DLY din1[502*8+7:502*8];
end
//write process for byte 503
always @ (posedge clk) begin
    if((we0[503] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[503] == 1) && (address0 == address1))
        mem[address0][503*8+7:503*8] <= #DLY din1[503*8+7:503*8];
    else if ((we0[503] == 1) && (ce0 == 1))
        mem[address0][503*8+7:503*8] <= #DLY din0[503*8+7:503*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[503] == 1))
        mem[address1][503*8+7:503*8] <= #DLY din1[503*8+7:503*8];
end
//write process for byte 504
always @ (posedge clk) begin
    if((we0[504] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[504] == 1) && (address0 == address1))
        mem[address0][504*8+7:504*8] <= #DLY din1[504*8+7:504*8];
    else if ((we0[504] == 1) && (ce0 == 1))
        mem[address0][504*8+7:504*8] <= #DLY din0[504*8+7:504*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[504] == 1))
        mem[address1][504*8+7:504*8] <= #DLY din1[504*8+7:504*8];
end
//write process for byte 505
always @ (posedge clk) begin
    if((we0[505] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[505] == 1) && (address0 == address1))
        mem[address0][505*8+7:505*8] <= #DLY din1[505*8+7:505*8];
    else if ((we0[505] == 1) && (ce0 == 1))
        mem[address0][505*8+7:505*8] <= #DLY din0[505*8+7:505*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[505] == 1))
        mem[address1][505*8+7:505*8] <= #DLY din1[505*8+7:505*8];
end
//write process for byte 506
always @ (posedge clk) begin
    if((we0[506] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[506] == 1) && (address0 == address1))
        mem[address0][506*8+7:506*8] <= #DLY din1[506*8+7:506*8];
    else if ((we0[506] == 1) && (ce0 == 1))
        mem[address0][506*8+7:506*8] <= #DLY din0[506*8+7:506*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[506] == 1))
        mem[address1][506*8+7:506*8] <= #DLY din1[506*8+7:506*8];
end
//write process for byte 507
always @ (posedge clk) begin
    if((we0[507] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[507] == 1) && (address0 == address1))
        mem[address0][507*8+7:507*8] <= #DLY din1[507*8+7:507*8];
    else if ((we0[507] == 1) && (ce0 == 1))
        mem[address0][507*8+7:507*8] <= #DLY din0[507*8+7:507*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[507] == 1))
        mem[address1][507*8+7:507*8] <= #DLY din1[507*8+7:507*8];
end
//write process for byte 508
always @ (posedge clk) begin
    if((we0[508] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[508] == 1) && (address0 == address1))
        mem[address0][508*8+7:508*8] <= #DLY din1[508*8+7:508*8];
    else if ((we0[508] == 1) && (ce0 == 1))
        mem[address0][508*8+7:508*8] <= #DLY din0[508*8+7:508*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[508] == 1))
        mem[address1][508*8+7:508*8] <= #DLY din1[508*8+7:508*8];
end
//write process for byte 509
always @ (posedge clk) begin
    if((we0[509] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[509] == 1) && (address0 == address1))
        mem[address0][509*8+7:509*8] <= #DLY din1[509*8+7:509*8];
    else if ((we0[509] == 1) && (ce0 == 1))
        mem[address0][509*8+7:509*8] <= #DLY din0[509*8+7:509*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[509] == 1))
        mem[address1][509*8+7:509*8] <= #DLY din1[509*8+7:509*8];
end
//write process for byte 510
always @ (posedge clk) begin
    if((we0[510] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[510] == 1) && (address0 == address1))
        mem[address0][510*8+7:510*8] <= #DLY din1[510*8+7:510*8];
    else if ((we0[510] == 1) && (ce0 == 1))
        mem[address0][510*8+7:510*8] <= #DLY din0[510*8+7:510*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[510] == 1))
        mem[address1][510*8+7:510*8] <= #DLY din1[510*8+7:510*8];
end
//write process for byte 511
always @ (posedge clk) begin
    if((we0[511] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[511] == 1) && (address0 == address1))
        mem[address0][511*8+7:511*8] <= #DLY din1[511*8+7:511*8];
    else if ((we0[511] == 1) && (ce0 == 1))
        mem[address0][511*8+7:511*8] <= #DLY din0[511*8+7:511*8];
end

always @ (posedge clk) begin
    if ((ce1 == 1) && (we1[511] == 1))
        mem[address1][511*8+7:511*8] <= #DLY din1[511*8+7:511*8];
end

// Write data from array to file
initial begin : write_file_proc
    integer fp;
    integer transaction_num;
    reg [ 8*5 : 1] str;
    integer i;
    transaction_num = 0;
    writed_flag = 1;
    wait(rst === 0);
    @(negedge clk);
    while (1) begin
        while(done == 0) begin
            -> write_process_done;
            @(negedge clk);
        end
        fp = $fopen(TV_OUT, "a");
        if (fp == 0) begin       // Failed to open file
            $display("Failed to open file \"%s\"!", TV_OUT);
            $finish;
        end
        $fdisplay(fp, "[[transaction]] %d", transaction_num);
	      for (i = 0; i < DEPTH; i = i + 1) begin
            $fdisplay(fp,"0x%x",mem[i]);
        end
        $fdisplay(fp, "[[/transaction]]");
        transaction_num = transaction_num + 1;
        $fclose(fp);
        writed_flag = 1;
        -> write_process_done;
        @(negedge clk);
    end
end

//------------------------conflict check-------------------
always @ (posedge clk) begin
    if ((we0[0] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[0] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[0] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[0] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[0] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[0] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[1] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[1] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[1] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[1] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[1] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[1] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[2] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[2] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[2] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[2] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[2] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[2] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[3] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[3] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[3] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[3] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[3] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[3] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[4] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[4] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[4] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[4] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[4] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[4] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[5] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[5] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[5] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[5] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[5] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[5] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[6] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[6] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[6] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[6] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[6] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[6] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[7] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[7] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[7] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[7] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[7] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[7] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[8] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[8] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[8] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[8] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[8] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[8] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[9] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[9] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[9] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[9] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[9] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[9] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[10] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[10] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[10] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[10] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[10] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[10] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[11] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[11] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[11] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[11] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[11] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[11] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[12] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[12] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[12] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[12] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[12] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[12] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[13] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[13] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[13] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[13] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[13] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[13] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[14] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[14] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[14] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[14] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[14] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[14] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[15] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[15] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[15] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[15] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[15] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[15] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[16] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[16] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[16] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[16] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[16] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[16] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[17] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[17] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[17] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[17] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[17] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[17] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[18] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[18] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[18] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[18] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[18] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[18] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[19] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[19] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[19] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[19] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[19] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[19] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[20] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[20] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[20] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[20] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[20] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[20] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[21] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[21] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[21] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[21] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[21] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[21] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[22] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[22] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[22] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[22] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[22] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[22] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[23] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[23] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[23] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[23] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[23] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[23] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[24] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[24] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[24] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[24] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[24] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[24] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[25] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[25] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[25] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[25] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[25] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[25] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[26] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[26] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[26] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[26] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[26] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[26] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[27] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[27] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[27] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[27] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[27] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[27] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[28] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[28] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[28] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[28] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[28] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[28] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[29] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[29] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[29] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[29] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[29] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[29] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[30] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[30] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[30] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[30] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[30] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[30] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[31] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[31] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[31] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[31] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[31] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[31] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[32] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[32] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[32] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[32] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[32] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[32] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[33] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[33] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[33] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[33] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[33] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[33] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[34] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[34] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[34] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[34] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[34] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[34] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[35] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[35] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[35] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[35] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[35] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[35] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[36] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[36] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[36] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[36] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[36] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[36] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[37] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[37] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[37] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[37] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[37] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[37] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[38] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[38] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[38] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[38] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[38] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[38] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[39] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[39] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[39] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[39] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[39] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[39] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[40] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[40] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[40] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[40] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[40] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[40] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[41] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[41] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[41] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[41] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[41] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[41] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[42] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[42] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[42] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[42] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[42] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[42] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[43] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[43] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[43] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[43] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[43] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[43] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[44] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[44] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[44] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[44] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[44] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[44] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[45] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[45] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[45] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[45] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[45] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[45] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[46] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[46] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[46] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[46] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[46] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[46] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[47] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[47] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[47] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[47] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[47] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[47] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[48] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[48] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[48] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[48] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[48] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[48] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[49] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[49] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[49] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[49] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[49] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[49] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[50] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[50] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[50] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[50] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[50] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[50] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[51] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[51] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[51] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[51] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[51] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[51] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[52] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[52] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[52] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[52] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[52] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[52] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[53] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[53] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[53] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[53] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[53] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[53] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[54] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[54] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[54] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[54] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[54] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[54] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[55] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[55] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[55] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[55] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[55] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[55] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[56] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[56] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[56] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[56] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[56] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[56] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[57] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[57] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[57] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[57] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[57] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[57] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[58] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[58] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[58] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[58] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[58] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[58] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[59] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[59] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[59] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[59] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[59] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[59] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[60] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[60] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[60] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[60] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[60] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[60] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[61] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[61] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[61] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[61] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[61] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[61] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[62] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[62] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[62] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[62] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[62] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[62] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[63] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[63] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[63] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[63] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[63] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[63] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[64] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[64] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[64] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[64] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[64] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[64] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[65] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[65] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[65] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[65] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[65] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[65] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[66] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[66] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[66] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[66] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[66] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[66] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[67] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[67] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[67] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[67] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[67] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[67] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[68] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[68] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[68] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[68] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[68] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[68] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[69] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[69] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[69] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[69] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[69] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[69] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[70] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[70] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[70] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[70] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[70] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[70] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[71] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[71] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[71] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[71] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[71] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[71] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[72] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[72] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[72] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[72] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[72] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[72] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[73] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[73] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[73] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[73] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[73] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[73] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[74] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[74] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[74] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[74] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[74] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[74] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[75] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[75] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[75] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[75] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[75] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[75] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[76] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[76] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[76] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[76] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[76] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[76] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[77] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[77] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[77] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[77] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[77] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[77] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[78] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[78] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[78] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[78] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[78] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[78] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[79] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[79] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[79] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[79] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[79] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[79] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[80] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[80] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[80] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[80] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[80] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[80] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[81] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[81] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[81] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[81] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[81] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[81] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[82] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[82] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[82] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[82] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[82] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[82] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[83] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[83] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[83] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[83] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[83] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[83] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[84] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[84] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[84] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[84] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[84] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[84] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[85] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[85] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[85] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[85] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[85] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[85] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[86] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[86] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[86] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[86] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[86] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[86] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[87] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[87] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[87] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[87] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[87] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[87] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[88] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[88] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[88] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[88] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[88] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[88] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[89] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[89] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[89] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[89] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[89] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[89] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[90] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[90] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[90] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[90] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[90] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[90] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[91] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[91] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[91] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[91] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[91] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[91] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[92] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[92] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[92] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[92] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[92] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[92] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[93] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[93] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[93] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[93] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[93] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[93] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[94] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[94] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[94] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[94] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[94] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[94] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[95] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[95] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[95] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[95] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[95] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[95] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[96] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[96] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[96] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[96] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[96] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[96] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[97] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[97] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[97] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[97] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[97] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[97] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[98] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[98] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[98] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[98] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[98] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[98] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[99] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[99] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[99] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[99] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[99] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[99] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[100] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[100] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[100] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[100] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[100] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[100] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[101] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[101] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[101] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[101] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[101] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[101] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[102] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[102] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[102] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[102] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[102] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[102] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[103] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[103] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[103] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[103] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[103] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[103] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[104] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[104] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[104] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[104] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[104] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[104] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[105] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[105] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[105] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[105] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[105] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[105] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[106] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[106] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[106] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[106] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[106] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[106] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[107] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[107] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[107] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[107] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[107] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[107] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[108] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[108] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[108] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[108] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[108] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[108] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[109] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[109] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[109] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[109] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[109] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[109] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[110] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[110] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[110] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[110] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[110] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[110] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[111] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[111] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[111] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[111] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[111] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[111] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[112] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[112] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[112] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[112] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[112] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[112] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[113] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[113] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[113] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[113] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[113] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[113] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[114] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[114] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[114] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[114] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[114] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[114] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[115] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[115] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[115] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[115] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[115] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[115] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[116] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[116] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[116] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[116] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[116] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[116] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[117] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[117] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[117] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[117] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[117] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[117] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[118] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[118] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[118] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[118] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[118] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[118] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[119] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[119] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[119] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[119] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[119] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[119] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[120] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[120] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[120] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[120] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[120] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[120] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[121] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[121] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[121] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[121] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[121] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[121] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[122] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[122] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[122] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[122] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[122] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[122] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[123] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[123] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[123] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[123] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[123] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[123] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[124] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[124] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[124] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[124] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[124] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[124] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[125] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[125] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[125] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[125] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[125] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[125] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[126] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[126] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[126] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[126] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[126] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[126] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[127] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[127] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[127] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[127] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[127] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[127] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[128] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[128] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[128] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[128] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[128] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[128] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[129] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[129] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[129] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[129] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[129] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[129] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[130] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[130] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[130] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[130] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[130] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[130] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[131] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[131] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[131] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[131] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[131] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[131] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[132] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[132] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[132] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[132] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[132] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[132] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[133] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[133] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[133] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[133] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[133] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[133] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[134] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[134] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[134] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[134] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[134] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[134] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[135] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[135] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[135] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[135] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[135] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[135] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[136] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[136] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[136] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[136] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[136] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[136] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[137] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[137] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[137] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[137] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[137] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[137] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[138] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[138] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[138] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[138] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[138] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[138] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[139] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[139] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[139] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[139] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[139] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[139] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[140] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[140] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[140] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[140] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[140] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[140] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[141] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[141] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[141] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[141] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[141] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[141] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[142] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[142] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[142] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[142] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[142] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[142] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[143] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[143] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[143] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[143] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[143] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[143] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[144] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[144] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[144] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[144] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[144] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[144] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[145] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[145] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[145] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[145] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[145] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[145] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[146] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[146] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[146] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[146] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[146] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[146] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[147] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[147] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[147] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[147] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[147] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[147] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[148] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[148] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[148] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[148] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[148] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[148] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[149] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[149] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[149] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[149] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[149] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[149] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[150] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[150] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[150] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[150] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[150] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[150] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[151] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[151] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[151] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[151] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[151] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[151] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[152] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[152] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[152] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[152] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[152] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[152] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[153] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[153] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[153] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[153] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[153] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[153] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[154] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[154] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[154] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[154] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[154] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[154] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[155] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[155] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[155] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[155] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[155] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[155] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[156] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[156] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[156] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[156] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[156] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[156] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[157] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[157] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[157] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[157] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[157] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[157] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[158] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[158] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[158] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[158] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[158] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[158] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[159] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[159] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[159] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[159] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[159] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[159] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[160] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[160] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[160] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[160] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[160] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[160] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[161] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[161] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[161] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[161] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[161] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[161] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[162] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[162] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[162] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[162] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[162] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[162] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[163] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[163] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[163] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[163] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[163] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[163] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[164] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[164] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[164] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[164] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[164] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[164] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[165] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[165] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[165] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[165] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[165] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[165] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[166] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[166] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[166] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[166] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[166] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[166] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[167] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[167] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[167] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[167] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[167] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[167] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[168] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[168] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[168] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[168] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[168] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[168] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[169] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[169] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[169] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[169] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[169] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[169] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[170] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[170] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[170] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[170] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[170] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[170] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[171] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[171] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[171] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[171] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[171] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[171] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[172] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[172] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[172] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[172] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[172] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[172] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[173] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[173] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[173] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[173] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[173] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[173] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[174] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[174] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[174] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[174] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[174] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[174] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[175] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[175] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[175] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[175] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[175] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[175] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[176] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[176] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[176] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[176] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[176] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[176] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[177] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[177] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[177] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[177] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[177] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[177] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[178] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[178] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[178] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[178] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[178] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[178] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[179] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[179] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[179] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[179] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[179] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[179] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[180] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[180] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[180] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[180] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[180] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[180] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[181] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[181] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[181] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[181] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[181] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[181] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[182] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[182] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[182] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[182] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[182] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[182] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[183] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[183] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[183] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[183] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[183] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[183] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[184] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[184] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[184] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[184] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[184] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[184] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[185] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[185] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[185] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[185] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[185] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[185] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[186] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[186] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[186] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[186] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[186] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[186] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[187] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[187] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[187] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[187] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[187] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[187] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[188] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[188] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[188] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[188] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[188] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[188] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[189] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[189] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[189] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[189] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[189] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[189] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[190] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[190] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[190] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[190] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[190] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[190] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[191] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[191] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[191] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[191] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[191] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[191] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[192] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[192] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[192] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[192] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[192] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[192] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[193] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[193] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[193] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[193] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[193] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[193] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[194] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[194] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[194] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[194] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[194] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[194] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[195] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[195] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[195] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[195] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[195] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[195] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[196] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[196] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[196] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[196] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[196] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[196] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[197] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[197] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[197] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[197] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[197] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[197] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[198] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[198] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[198] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[198] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[198] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[198] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[199] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[199] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[199] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[199] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[199] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[199] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[200] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[200] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[200] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[200] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[200] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[200] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[201] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[201] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[201] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[201] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[201] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[201] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[202] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[202] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[202] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[202] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[202] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[202] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[203] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[203] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[203] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[203] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[203] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[203] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[204] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[204] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[204] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[204] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[204] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[204] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[205] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[205] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[205] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[205] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[205] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[205] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[206] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[206] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[206] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[206] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[206] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[206] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[207] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[207] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[207] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[207] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[207] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[207] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[208] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[208] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[208] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[208] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[208] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[208] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[209] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[209] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[209] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[209] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[209] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[209] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[210] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[210] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[210] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[210] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[210] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[210] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[211] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[211] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[211] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[211] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[211] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[211] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[212] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[212] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[212] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[212] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[212] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[212] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[213] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[213] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[213] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[213] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[213] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[213] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[214] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[214] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[214] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[214] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[214] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[214] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[215] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[215] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[215] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[215] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[215] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[215] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[216] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[216] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[216] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[216] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[216] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[216] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[217] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[217] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[217] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[217] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[217] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[217] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[218] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[218] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[218] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[218] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[218] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[218] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[219] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[219] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[219] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[219] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[219] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[219] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[220] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[220] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[220] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[220] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[220] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[220] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[221] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[221] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[221] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[221] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[221] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[221] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[222] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[222] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[222] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[222] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[222] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[222] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[223] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[223] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[223] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[223] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[223] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[223] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[224] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[224] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[224] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[224] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[224] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[224] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[225] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[225] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[225] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[225] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[225] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[225] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[226] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[226] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[226] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[226] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[226] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[226] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[227] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[227] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[227] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[227] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[227] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[227] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[228] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[228] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[228] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[228] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[228] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[228] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[229] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[229] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[229] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[229] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[229] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[229] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[230] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[230] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[230] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[230] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[230] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[230] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[231] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[231] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[231] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[231] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[231] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[231] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[232] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[232] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[232] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[232] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[232] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[232] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[233] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[233] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[233] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[233] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[233] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[233] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[234] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[234] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[234] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[234] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[234] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[234] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[235] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[235] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[235] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[235] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[235] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[235] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[236] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[236] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[236] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[236] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[236] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[236] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[237] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[237] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[237] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[237] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[237] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[237] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[238] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[238] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[238] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[238] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[238] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[238] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[239] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[239] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[239] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[239] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[239] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[239] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[240] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[240] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[240] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[240] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[240] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[240] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[241] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[241] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[241] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[241] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[241] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[241] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[242] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[242] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[242] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[242] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[242] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[242] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[243] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[243] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[243] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[243] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[243] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[243] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[244] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[244] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[244] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[244] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[244] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[244] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[245] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[245] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[245] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[245] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[245] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[245] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[246] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[246] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[246] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[246] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[246] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[246] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[247] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[247] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[247] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[247] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[247] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[247] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[248] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[248] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[248] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[248] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[248] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[248] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[249] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[249] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[249] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[249] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[249] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[249] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[250] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[250] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[250] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[250] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[250] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[250] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[251] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[251] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[251] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[251] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[251] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[251] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[252] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[252] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[252] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[252] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[252] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[252] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[253] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[253] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[253] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[253] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[253] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[253] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[254] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[254] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[254] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[254] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[254] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[254] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[255] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[255] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[255] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[255] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[255] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[255] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[256] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[256] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[256] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[256] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[256] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[256] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[257] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[257] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[257] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[257] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[257] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[257] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[258] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[258] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[258] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[258] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[258] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[258] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[259] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[259] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[259] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[259] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[259] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[259] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[260] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[260] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[260] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[260] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[260] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[260] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[261] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[261] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[261] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[261] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[261] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[261] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[262] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[262] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[262] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[262] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[262] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[262] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[263] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[263] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[263] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[263] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[263] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[263] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[264] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[264] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[264] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[264] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[264] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[264] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[265] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[265] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[265] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[265] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[265] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[265] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[266] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[266] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[266] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[266] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[266] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[266] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[267] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[267] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[267] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[267] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[267] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[267] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[268] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[268] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[268] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[268] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[268] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[268] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[269] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[269] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[269] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[269] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[269] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[269] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[270] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[270] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[270] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[270] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[270] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[270] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[271] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[271] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[271] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[271] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[271] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[271] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[272] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[272] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[272] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[272] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[272] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[272] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[273] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[273] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[273] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[273] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[273] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[273] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[274] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[274] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[274] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[274] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[274] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[274] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[275] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[275] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[275] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[275] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[275] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[275] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[276] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[276] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[276] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[276] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[276] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[276] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[277] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[277] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[277] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[277] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[277] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[277] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[278] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[278] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[278] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[278] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[278] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[278] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[279] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[279] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[279] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[279] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[279] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[279] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[280] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[280] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[280] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[280] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[280] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[280] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[281] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[281] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[281] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[281] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[281] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[281] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[282] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[282] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[282] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[282] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[282] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[282] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[283] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[283] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[283] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[283] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[283] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[283] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[284] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[284] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[284] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[284] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[284] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[284] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[285] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[285] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[285] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[285] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[285] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[285] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[286] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[286] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[286] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[286] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[286] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[286] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[287] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[287] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[287] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[287] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[287] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[287] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[288] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[288] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[288] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[288] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[288] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[288] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[289] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[289] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[289] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[289] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[289] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[289] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[290] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[290] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[290] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[290] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[290] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[290] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[291] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[291] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[291] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[291] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[291] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[291] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[292] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[292] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[292] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[292] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[292] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[292] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[293] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[293] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[293] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[293] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[293] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[293] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[294] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[294] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[294] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[294] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[294] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[294] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[295] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[295] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[295] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[295] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[295] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[295] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[296] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[296] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[296] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[296] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[296] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[296] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[297] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[297] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[297] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[297] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[297] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[297] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[298] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[298] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[298] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[298] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[298] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[298] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[299] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[299] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[299] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[299] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[299] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[299] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[300] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[300] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[300] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[300] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[300] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[300] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[301] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[301] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[301] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[301] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[301] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[301] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[302] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[302] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[302] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[302] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[302] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[302] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[303] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[303] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[303] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[303] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[303] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[303] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[304] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[304] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[304] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[304] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[304] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[304] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[305] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[305] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[305] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[305] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[305] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[305] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[306] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[306] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[306] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[306] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[306] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[306] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[307] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[307] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[307] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[307] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[307] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[307] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[308] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[308] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[308] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[308] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[308] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[308] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[309] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[309] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[309] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[309] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[309] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[309] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[310] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[310] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[310] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[310] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[310] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[310] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[311] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[311] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[311] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[311] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[311] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[311] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[312] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[312] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[312] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[312] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[312] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[312] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[313] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[313] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[313] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[313] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[313] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[313] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[314] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[314] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[314] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[314] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[314] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[314] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[315] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[315] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[315] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[315] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[315] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[315] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[316] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[316] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[316] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[316] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[316] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[316] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[317] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[317] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[317] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[317] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[317] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[317] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[318] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[318] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[318] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[318] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[318] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[318] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[319] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[319] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[319] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[319] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[319] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[319] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[320] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[320] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[320] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[320] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[320] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[320] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[321] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[321] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[321] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[321] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[321] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[321] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[322] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[322] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[322] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[322] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[322] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[322] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[323] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[323] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[323] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[323] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[323] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[323] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[324] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[324] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[324] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[324] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[324] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[324] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[325] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[325] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[325] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[325] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[325] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[325] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[326] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[326] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[326] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[326] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[326] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[326] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[327] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[327] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[327] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[327] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[327] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[327] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[328] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[328] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[328] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[328] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[328] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[328] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[329] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[329] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[329] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[329] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[329] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[329] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[330] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[330] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[330] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[330] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[330] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[330] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[331] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[331] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[331] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[331] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[331] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[331] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[332] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[332] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[332] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[332] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[332] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[332] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[333] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[333] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[333] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[333] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[333] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[333] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[334] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[334] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[334] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[334] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[334] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[334] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[335] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[335] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[335] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[335] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[335] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[335] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[336] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[336] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[336] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[336] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[336] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[336] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[337] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[337] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[337] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[337] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[337] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[337] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[338] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[338] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[338] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[338] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[338] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[338] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[339] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[339] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[339] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[339] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[339] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[339] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[340] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[340] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[340] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[340] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[340] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[340] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[341] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[341] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[341] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[341] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[341] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[341] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[342] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[342] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[342] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[342] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[342] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[342] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[343] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[343] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[343] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[343] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[343] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[343] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[344] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[344] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[344] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[344] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[344] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[344] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[345] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[345] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[345] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[345] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[345] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[345] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[346] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[346] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[346] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[346] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[346] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[346] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[347] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[347] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[347] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[347] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[347] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[347] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[348] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[348] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[348] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[348] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[348] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[348] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[349] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[349] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[349] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[349] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[349] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[349] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[350] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[350] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[350] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[350] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[350] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[350] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[351] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[351] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[351] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[351] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[351] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[351] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[352] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[352] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[352] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[352] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[352] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[352] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[353] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[353] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[353] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[353] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[353] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[353] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[354] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[354] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[354] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[354] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[354] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[354] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[355] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[355] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[355] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[355] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[355] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[355] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[356] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[356] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[356] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[356] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[356] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[356] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[357] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[357] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[357] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[357] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[357] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[357] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[358] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[358] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[358] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[358] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[358] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[358] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[359] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[359] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[359] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[359] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[359] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[359] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[360] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[360] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[360] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[360] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[360] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[360] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[361] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[361] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[361] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[361] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[361] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[361] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[362] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[362] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[362] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[362] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[362] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[362] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[363] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[363] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[363] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[363] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[363] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[363] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[364] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[364] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[364] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[364] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[364] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[364] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[365] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[365] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[365] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[365] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[365] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[365] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[366] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[366] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[366] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[366] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[366] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[366] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[367] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[367] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[367] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[367] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[367] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[367] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[368] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[368] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[368] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[368] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[368] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[368] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[369] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[369] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[369] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[369] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[369] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[369] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[370] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[370] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[370] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[370] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[370] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[370] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[371] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[371] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[371] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[371] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[371] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[371] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[372] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[372] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[372] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[372] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[372] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[372] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[373] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[373] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[373] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[373] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[373] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[373] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[374] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[374] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[374] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[374] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[374] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[374] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[375] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[375] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[375] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[375] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[375] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[375] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[376] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[376] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[376] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[376] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[376] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[376] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[377] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[377] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[377] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[377] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[377] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[377] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[378] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[378] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[378] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[378] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[378] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[378] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[379] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[379] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[379] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[379] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[379] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[379] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[380] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[380] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[380] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[380] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[380] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[380] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[381] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[381] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[381] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[381] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[381] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[381] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[382] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[382] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[382] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[382] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[382] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[382] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[383] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[383] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[383] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[383] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[383] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[383] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[384] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[384] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[384] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[384] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[384] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[384] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[385] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[385] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[385] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[385] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[385] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[385] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[386] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[386] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[386] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[386] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[386] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[386] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[387] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[387] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[387] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[387] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[387] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[387] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[388] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[388] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[388] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[388] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[388] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[388] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[389] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[389] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[389] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[389] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[389] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[389] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[390] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[390] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[390] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[390] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[390] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[390] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[391] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[391] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[391] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[391] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[391] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[391] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[392] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[392] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[392] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[392] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[392] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[392] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[393] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[393] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[393] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[393] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[393] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[393] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[394] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[394] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[394] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[394] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[394] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[394] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[395] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[395] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[395] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[395] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[395] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[395] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[396] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[396] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[396] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[396] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[396] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[396] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[397] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[397] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[397] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[397] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[397] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[397] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[398] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[398] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[398] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[398] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[398] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[398] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[399] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[399] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[399] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[399] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[399] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[399] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[400] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[400] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[400] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[400] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[400] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[400] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[401] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[401] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[401] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[401] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[401] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[401] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[402] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[402] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[402] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[402] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[402] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[402] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[403] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[403] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[403] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[403] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[403] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[403] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[404] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[404] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[404] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[404] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[404] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[404] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[405] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[405] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[405] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[405] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[405] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[405] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[406] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[406] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[406] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[406] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[406] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[406] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[407] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[407] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[407] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[407] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[407] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[407] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[408] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[408] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[408] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[408] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[408] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[408] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[409] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[409] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[409] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[409] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[409] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[409] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[410] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[410] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[410] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[410] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[410] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[410] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[411] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[411] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[411] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[411] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[411] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[411] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[412] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[412] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[412] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[412] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[412] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[412] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[413] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[413] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[413] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[413] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[413] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[413] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[414] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[414] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[414] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[414] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[414] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[414] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[415] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[415] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[415] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[415] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[415] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[415] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[416] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[416] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[416] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[416] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[416] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[416] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[417] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[417] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[417] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[417] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[417] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[417] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[418] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[418] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[418] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[418] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[418] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[418] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[419] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[419] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[419] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[419] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[419] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[419] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[420] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[420] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[420] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[420] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[420] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[420] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[421] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[421] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[421] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[421] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[421] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[421] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[422] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[422] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[422] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[422] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[422] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[422] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[423] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[423] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[423] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[423] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[423] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[423] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[424] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[424] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[424] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[424] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[424] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[424] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[425] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[425] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[425] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[425] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[425] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[425] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[426] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[426] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[426] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[426] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[426] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[426] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[427] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[427] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[427] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[427] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[427] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[427] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[428] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[428] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[428] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[428] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[428] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[428] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[429] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[429] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[429] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[429] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[429] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[429] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[430] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[430] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[430] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[430] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[430] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[430] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[431] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[431] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[431] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[431] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[431] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[431] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[432] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[432] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[432] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[432] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[432] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[432] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[433] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[433] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[433] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[433] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[433] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[433] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[434] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[434] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[434] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[434] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[434] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[434] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[435] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[435] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[435] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[435] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[435] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[435] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[436] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[436] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[436] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[436] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[436] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[436] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[437] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[437] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[437] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[437] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[437] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[437] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[438] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[438] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[438] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[438] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[438] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[438] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[439] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[439] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[439] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[439] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[439] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[439] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[440] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[440] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[440] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[440] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[440] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[440] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[441] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[441] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[441] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[441] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[441] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[441] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[442] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[442] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[442] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[442] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[442] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[442] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[443] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[443] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[443] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[443] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[443] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[443] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[444] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[444] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[444] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[444] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[444] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[444] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[445] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[445] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[445] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[445] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[445] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[445] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[446] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[446] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[446] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[446] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[446] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[446] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[447] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[447] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[447] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[447] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[447] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[447] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[448] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[448] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[448] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[448] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[448] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[448] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[449] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[449] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[449] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[449] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[449] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[449] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[450] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[450] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[450] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[450] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[450] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[450] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[451] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[451] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[451] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[451] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[451] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[451] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[452] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[452] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[452] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[452] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[452] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[452] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[453] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[453] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[453] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[453] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[453] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[453] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[454] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[454] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[454] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[454] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[454] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[454] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[455] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[455] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[455] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[455] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[455] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[455] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[456] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[456] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[456] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[456] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[456] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[456] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[457] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[457] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[457] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[457] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[457] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[457] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[458] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[458] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[458] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[458] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[458] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[458] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[459] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[459] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[459] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[459] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[459] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[459] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[460] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[460] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[460] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[460] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[460] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[460] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[461] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[461] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[461] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[461] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[461] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[461] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[462] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[462] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[462] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[462] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[462] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[462] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[463] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[463] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[463] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[463] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[463] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[463] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[464] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[464] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[464] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[464] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[464] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[464] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[465] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[465] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[465] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[465] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[465] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[465] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[466] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[466] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[466] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[466] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[466] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[466] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[467] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[467] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[467] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[467] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[467] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[467] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[468] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[468] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[468] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[468] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[468] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[468] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[469] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[469] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[469] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[469] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[469] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[469] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[470] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[470] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[470] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[470] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[470] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[470] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[471] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[471] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[471] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[471] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[471] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[471] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[472] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[472] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[472] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[472] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[472] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[472] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[473] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[473] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[473] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[473] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[473] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[473] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[474] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[474] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[474] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[474] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[474] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[474] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[475] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[475] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[475] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[475] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[475] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[475] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[476] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[476] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[476] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[476] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[476] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[476] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[477] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[477] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[477] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[477] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[477] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[477] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[478] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[478] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[478] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[478] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[478] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[478] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[479] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[479] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[479] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[479] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[479] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[479] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[480] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[480] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[480] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[480] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[480] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[480] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[481] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[481] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[481] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[481] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[481] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[481] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[482] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[482] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[482] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[482] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[482] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[482] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[483] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[483] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[483] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[483] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[483] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[483] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[484] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[484] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[484] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[484] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[484] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[484] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[485] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[485] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[485] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[485] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[485] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[485] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[486] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[486] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[486] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[486] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[486] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[486] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[487] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[487] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[487] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[487] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[487] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[487] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[488] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[488] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[488] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[488] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[488] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[488] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[489] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[489] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[489] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[489] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[489] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[489] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[490] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[490] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[490] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[490] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[490] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[490] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[491] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[491] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[491] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[491] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[491] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[491] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[492] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[492] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[492] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[492] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[492] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[492] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[493] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[493] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[493] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[493] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[493] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[493] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[494] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[494] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[494] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[494] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[494] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[494] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[495] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[495] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[495] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[495] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[495] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[495] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[496] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[496] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[496] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[496] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[496] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[496] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[497] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[497] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[497] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[497] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[497] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[497] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[498] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[498] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[498] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[498] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[498] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[498] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[499] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[499] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[499] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[499] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[499] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[499] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[500] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[500] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[500] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[500] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[500] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[500] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[501] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[501] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[501] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[501] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[501] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[501] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[502] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[502] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[502] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[502] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[502] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[502] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[503] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[503] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[503] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[503] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[503] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[503] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[504] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[504] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[504] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[504] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[504] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[504] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[505] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[505] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[505] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[505] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[505] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[505] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[506] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[506] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[506] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[506] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[506] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[506] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[507] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[507] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[507] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[507] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[507] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[507] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[508] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[508] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[508] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[508] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[508] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[508] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[509] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[509] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[509] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[509] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[509] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[509] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[510] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[510] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[510] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[510] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[510] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[510] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[511] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[511] == 1) && (address0 == address1))
        $display($time,"WARNING:write conflict----port0 and port1 write to the same address:%h at the same clock. Port1 has the high priority.",address0);
end

always @ (posedge clk) begin
    if ((we0[511] == 1) && (ce0 == 1) && (ce1 == 1) && (we1[511] == 0) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 write and port1 read to the same address:%h at the same clock. Write first Mode.",address0);
end

always @ (posedge clk) begin
    if ((we0[511] == 0) && (ce0 == 1) && (ce1 == 1) && (we1[511] == 1) && (address0 == address1))
        $display($time,"NOTE:read & write conflict----port0 read and port1 write to the same address:%h at the same clock. Write first Mode.",address0);
end

endmodule
